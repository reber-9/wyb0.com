<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代理 on </title>
    <link>http://wyb0.com/tags/%E4%BB%A3%E7%90%86/</link>
    <description>Recent content in 代理 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 13 Sep 2016 11:36:39 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E4%BB%A3%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python实现代理</title>
      <link>http://wyb0.com/posts/Python%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86/</link>
      <pubDate>Tue, 13 Sep 2016 11:36:39 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86/</guid>
      <description>

&lt;h2 id=&#34;帮助信息:1c8d1e1a6033af5d70b3fcb50e371dd2&#34;&gt;帮助信息&lt;/h2&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_proxy_help.png&#34; alt=&#34;帮助信息&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2 id=&#34;代码如下:1c8d1e1a6033af5d70b3fcb50e371dd2&#34;&gt;代码如下&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

&#39;This is a proxy&#39;

__author__ = &#39;xxx&#39;

import sys
import socket
import threading
import optparse

lock = threading.Lock()

def locker(msg):
    lock.acquire()
    print msg
    lock.release()

def hexdump (src,length=16):#十六进制导出函数
    result = []
    digits = 4 if isinstance(src,unicode) else 2

    for i in xrange(0,len(src),length):
        s = src[i:i+length]
        hexa = b&#39; &#39;.join(&amp;quot;[%0*X]&amp;quot; % (digits,ord(x)) for x in s)
        text = b&#39;&#39;.join([x if 0x20 &amp;lt;= ord(x) &amp;lt; 0x7F else b&#39;.&#39; for x in s])
        result.append(b&amp;quot;%04X  %-*s  %s&amp;quot; % (i,length*(digits+1),hexa,text))

    print b&#39;\n&#39;.join(result)

def receive_from (connection):
    
    buffer = &amp;quot;&amp;quot;
    
    #我们设置了1秒的超时，这取决于目标的情况，可能需要调整
    connection.settimeout(1)
    try:
        #持续从缓存中读取数据直到没有数据或者超时
        while True:
            data = connection.recv(4096)
            if not data:
                break

            buffer += data
    except:
        pass
        
    return buffer
    
#对目标是远程主机的请求进行修改
def request_handler (buffer):
    #执行包修改
    return buffer

#对目标是本地主机的响应进行修改
def response_handler (buffer):
    #执行包修改
    return buffer

def proxy_handler (client_socket,remote_host,remote_port,receive_first):
    #连接远程主机
    remote_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    remote_socket.connect((remote_host,remote_port))

    #如果必要从远程主机接收数据
    if receive_first:
        remote_buffer = receive_from(remote_socket)
        if len(remote_buffer):
            print &amp;quot;\n[==&amp;gt;] Received %d bytes from remote.&amp;quot; % len(remote_buffer)
            # hexdump(remote_buffer)
        
        #发送给我们的相应处理
        remote_buffer = response_handler(remote_buffer)
        #若我们有数据传递给本地客户端，发送它
        if len(remote_buffer):
            print &amp;quot;[&amp;lt;==] Sending %d bytes to localhost.\n&amp;quot; % len(remote_buffer)
            client_socket.send(remote_buffer)
    
    #现在我们从本地循环读取数据，发送给远程主机和本地主机
    while True:
        #从本地读取数据
        local_buffer = receive_from(client_socket)
        if len(local_buffer):
            print &amp;quot;\n[==&amp;gt;] Received %d bytes from localhost.&amp;quot; % len(local_buffer)
            # hexdump(local_buffer)
            #发送给我们的本地请求
            local_buffer = request_handler(local_buffer)
            #发送给远程主机
            remote_socket.send(local_buffer)
            print &amp;quot;[==&amp;gt;] Sent to remote.&amp;quot;

        #接收响应的数据
        remote_buffer = receive_from(remote_socket)
        if len(remote_buffer):
            print &amp;quot;\n[&amp;lt;==] Received %d bytes from remote.&amp;quot; % len(remote_buffer)
            # hexdump(remote_buffer)
            #发送数据到响应处理函数
            remote_buffer = response_handler(remote_buffer)
            #将响应发送给本地socket
            client_socket.send(remote_buffer)
            print &amp;quot;[==&amp;gt;] Sent to localhost.&amp;quot;

        #若两边都没有数据，关闭连接
        if not len(local_buffer) or not len(remote_buffer):
            client_socket.close()
            remote_socket.close()
            print &amp;quot;[*] No more data. Closing connections.&amp;quot;
            break

def server_loop(local_host,local_port,remote_host,remote_port,receive_first):

    server = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    try:
        server.bind((local_host,local_port))
    except:
        print &amp;quot;[!!] Failed to listen on %s:%d&amp;quot; % (local_host,local_port)
        print &amp;quot;[!!] Check for other listening sockets or correct permisssions.&amp;quot;
        sys.exit(0)
    print &amp;quot;[*] Listening on %s:%d......&amp;quot; % (local_host,local_port)
    server.listen(5)

    while True:
        client_socket,addr = server.accept()
        
        #打印本地连接信息
        print &amp;quot;\n[==&amp;gt;] Received incoming connection from %s:%d&amp;quot; % (addr[0],addr[1])

        #开启一个线程与远程主机通信
        proxy_thread = threading.Thread(target=proxy_handler,args=(client_socket,remote_host,remote_port,receive_first))
        proxy_thread.start()

def main ():
    parser = optparse.OptionParser()
    parser.add_option(&#39;--lh&#39;, &#39;--localhost&#39;, dest=&#39;localhost&#39;,default=&#39;127.0.0.1&#39;,
        type=&#39;string&#39;, help=&#39;Localhost.&#39;)
    parser.add_option(&#39;--lp&#39;, &#39;--localport&#39;, dest=&#39;localport&#39;,default=8888,
        type=&#39;int&#39;, help=&#39;Localport.&#39;)
    parser.add_option(&#39;--rh&#39;, &#39;--remotehost&#39;, dest=&#39;remotehost&#39;, default=&#39;127.0.0.1&#39;,
        type=&#39;string&#39;, help=&#39;Remotehost.&#39;)
    parser.add_option(&#39;--rp&#39;, &#39;--remoteport&#39;, dest=&#39;remoteport&#39;, default=8080, 
        type=&#39;int&#39;, help=&#39;Remoteport.&#39;)
    parser.add_option(&#39;--rf&#39;, &#39;--receivefirst&#39;, dest=&#39;receive_first&#39;, default=False,
        action=&#39;store_true&#39;,help=&#39;Connection before send and receive data.&#39;)

    (options, args) = parser.parse_args()

    #设置本地监听参数
    if options.localhost:
        local_host = options.localhost
    if options.localport:
        local_port = options.localport
    
    #设置远程目标
    if options.remotehost:
        remote_host = options.remotehost
    if options.remoteport:
        remote_port = options.remoteport

    receive_first = options.receive_first

    # print local_host,local_port,remote_host,remote_port,receive_first

    #现在设置好我们的监听socket
    server_loop(local_host,local_port,remote_host,remote_port,receive_first)

main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;效果图:1c8d1e1a6033af5d70b3fcb50e371dd2&#34;&gt;效果图&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_proxy_result.png&#34; alt=&#34;效果图&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Windows下用Proxifier实现全局代理</title>
      <link>http://wyb0.com/posts/Windows%E4%B8%8B%E7%94%A8Proxifier%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</link>
      <pubDate>Sun, 24 Jul 2016 21:33:59 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Windows%E4%B8%8B%E7%94%A8Proxifier%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</guid>
      <description>

&lt;h3 id=&#34;0x00-环境:37d530142c476a688f9dc94b5cc12b88&#34;&gt;0x00 环境&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在windows下用Shadowsocks和Proxifier实现全局代理：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System：Windows10 Pro x64
Shadowsocks：Shadowsocks v2.5.2.0 
Proxifier：Proxifier Portable Edition v3.29
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-配置shadowsocks:37d530142c476a688f9dc94b5cc12b88&#34;&gt;0x01 配置Shadowsocks&lt;/h3&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_set_shadowsocks.png&#34; alt=&#34;Windows下实现全局代理-设置shadowsocks.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-配置proxifier:37d530142c476a688f9dc94b5cc12b88&#34;&gt;0x02 配置Proxifier&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Proxifier添加代理服务

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_add_proxy_servers1.png&#34; alt=&#34;Windows下实现全局代理-添加代理服务1.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_add_proxy_servers2.png&#34; alt=&#34;Windows下实现全局代理-添加代理服务2.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_check_proxy.png&#34; alt=&#34;Windows下实现全局代理-检测添加的代理.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Proxifier添加规则

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_set_rules1.png&#34; alt=&#34;Windows下实现全局代理-设置规则1.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_set_rules2.png&#34; alt=&#34;Windows下实现全局代理-设置规则2.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_add_rules1.png&#34; alt=&#34;Windows下实现全局代理-添加规则1.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_proxifier_add_rules2.png&#34; alt=&#34;Windows下实现全局代理-添加规则2.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;测试全局代理设置成功与否

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_test1.png&#34; alt=&#34;Windows下实现全局代理-测试全局代理是否设置成功1.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/global_agent_test2.png&#34; alt=&#34;Windows下实现全局代理-测试全局代理是否设置成功2.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>