<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则 on </title>
    <link>http://wyb0.com/tags/%E6%AD%A3%E5%88%99/</link>
    <description>Recent content in 正则 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 05 Feb 2016 11:38:23 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E6%AD%A3%E5%88%99/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python的正则</title>
      <link>http://wyb0.com/posts/Python%E7%9A%84%E6%AD%A3%E5%88%99/</link>
      <pubDate>Fri, 05 Feb 2016 11:38:23 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%9A%84%E6%AD%A3%E5%88%99/</guid>
      <description>

&lt;h2 id=&#34;正则表达式:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;正则表达式&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;正则表达式是用来匹配字符串的异常强大的东西，可以用来匹配邮箱、域名等字符串&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;原子字符:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;原子字符&lt;/h2&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_atomic_character.png&#34; alt=&#34;正则的原子字符&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2 id=&#34;元字符:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;元字符&lt;/h2&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_metacharacters.png&#34; alt=&#34;正则的元字符&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2 id=&#34;修饰符:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;修饰符&lt;/h2&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_modifier.png&#34; alt=&#34;正则的修饰符&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2 id=&#34;re模块:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;re模块&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;由于Pyton的字符串本身也用\转义，强烈建议使用r前缀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数match()&lt;br /&gt;
这个函数会尝试从字符串起始位置匹配一个模式，未匹配到则返回None

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_match.png&#34; alt=&#34;re模块的match函数&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数search()&lt;br /&gt;
这个函数会扫描整个字符串并返回第一个成功的匹配，未匹配到则返回None

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_search.png&#34; alt=&#34;re模块的match函数&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数findall()和finditer()&lt;br /&gt;
re.findall()将以列表的形式返回所有能匹配到的字符&lt;br /&gt;
re.finditer()将以迭代器的形式返回所有能匹配到的字符

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_findall_finditer.png&#34; alt=&#34;re的findall和finditer&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数sub()&lt;br /&gt;
这个函数会对字符串进行匹配，然后替换，可以指定替换次数

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_sub.png&#34; alt=&#34;re的sub函数&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数split()&lt;br /&gt;
这个函数会以正则来分割字符串，以列表样式返回

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_split.png&#34; alt=&#34;re的split函数&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;函数compile()&lt;br /&gt;
这个函数可以编译正则，提高匹配速度

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_compile.png&#34; alt=&#34;re的compile函数&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;提取子串:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;提取子串&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;根据正则可以匹配字符然后提取出来，用括号表示要提取的分组

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_get_substr.png&#34; alt=&#34;提取子串&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;贪婪匹配:dfc97807cc7b90667a4db8d3b0403795&#34;&gt;贪婪匹配&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;正则表达式默认贪婪匹配，会尽可能的多匹配字符，一般就是用&amp;rdquo;？&amp;rdquo;来抑制贪婪匹配

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/regular_re_not_greed_match%20.png&#34; alt=&#34;非贪婪匹配&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>