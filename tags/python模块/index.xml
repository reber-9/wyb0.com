<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python模块 on </title>
    <link>http://wyb0.com/tags/python%E6%A8%A1%E5%9D%97/</link>
    <description>Recent content in Python模块 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 25 Nov 2016 17:44:23 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/python%E6%A8%A1%E5%9D%97/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python的openpyxl模块</title>
      <link>http://wyb0.com/posts/python-module-openpyxl/</link>
      <pubDate>Fri, 25 Nov 2016 17:44:23 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-openpyxl/</guid>
      <description>

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/anime/anime001.jpg&#34; alt=&#34;夏目友人帐&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x00-openpyxl模块:066a934ccd3d0cfd20fcce987317e4e0&#34;&gt;0x00 openpyxl模块&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;这个模块可以让你读写excel文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-读取数据:066a934ccd3d0cfd20fcce987317e4e0&#34;&gt;0x01 读取数据&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/openpyxl_excel.png&#34; alt=&#34;excel数据&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;
代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from openpyxl import load_workbook

wb = load_workbook(filename=&#39;aa.xlsx&#39;)

sheetnames = wb.get_sheet_names() #获得所有表名
print u&amp;quot;存在表：%s&amp;quot; % sheetnames

ws = wb.get_sheet_by_name(sheetnames[0])
print u&amp;quot;第一张表表名为：%s&amp;quot; % ws.title  #Sheet1
rows = ws.max_row  #行数
columns = ws.max_column  #列数
print &amp;quot;表%s有%d行%d列&amp;quot; % (ws.title,rows,columns)  #10 2  共10行2列


print
print u&amp;quot;取部分数据：&amp;quot;
print ws[&#39;A1&#39;].value,ws[&#39;B1&#39;].value  
print ws[&#39;A2&#39;].value,ws[&#39;B2&#39;].value
print ws.cell(row=1, column=2).value

print u&amp;quot;\n输出表%s的所有数据：&amp;quot; % ws.title
for x in range(1,rows+1):
    for y in range(1,columns+1):
        print ws.cell(row=x,column=y).value,&#39;\t&#39;,
    print
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/openpyxl_result.png&#34; alt=&#34;excel数据提取结果&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-写入数据:066a934ccd3d0cfd20fcce987317e4e0&#34;&gt;0x02 写入数据&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from openpyxl import Workbook

wb = Workbook()

# 建表
ws1 = wb.active # 第一张表需要这样写，代表从第一张表开始
ws1.title = &#39;s1&#39;
ws2 = wb.create_sheet(title=&#39;s2&#39;)
ws3 = wb.create_sheet(title=&#39;s3&#39;)

# 写入数据
ws1[&#39;A1&#39;] = 1111
ws1[&#39;A2&#39;] = 2222
ws1[&#39;A3&#39;] = 3333
ws2[&#39;A1&#39;] = &#39;ssssssssss&#39;
ws2[&#39;B1&#39;] = &#39;dddddddddd&#39;
for x in range(1,4):
    for y in range(1,8):
        v = int(str(x)+str(y))
        _ = ws3.cell(column=x,row=y,value=v)

wb.save(filename=&#39;test.xlsx&#39;) # 保存数据
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下：

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/openpyxl_write.png&#34; alt=&#34;向excel写入数据&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的模块</title>
      <link>http://wyb0.com/posts/Python%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 31 Aug 2016 11:22:41 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>

&lt;h2 id=&#34;python的模块:26b868add6f7b4d754432e2664208236&#34;&gt;Python的模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在python中，任何一个python文件都可以看作一个模块&lt;/li&gt;
&lt;li&gt;不同包下有相同模块名并不会冲突，且包下必须有文件__init__.py&lt;/li&gt;
&lt;li&gt;from lib import * 意思是从包lib中导入所有模块(若lib为模块名则为导入模块的所有函数)&lt;/li&gt;
&lt;li&gt;from lib.module1 import test 意思是从lib这个包下的module1模块中导入函数test&lt;/li&gt;
&lt;li&gt;import导入模块时会从sys.path输出的结果路径中查找模块然后导入&lt;/li&gt;
&lt;li&gt;sys.path.append(&amp;rsquo;D:/xx/xx/xx/code&amp;rsquo;)可以添加搜索路径&lt;/li&gt;
&lt;li&gt;使用if __name__ == &amp;lsquo;__main__&amp;lsquo;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;实例:26b868add6f7b4d754432e2664208236&#34;&gt;实例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件结构如下

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_module_file_tree.png&#34; alt=&#34;模块目录结构.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;测试文件test.py&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from package1 import * #导入包package1下的所有模块
import package2.module3 #导入包package2下的module3模块
import package2.module4 as s #导入包package2下的module4模块并重命名为s

a = module1.Class1() #创建一个对象
a.test() #调用类中的方法

b = module2.Class2()
b.test()

c = package2.module3.Class3()
c.test()

d = s.Class4()
d.test()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;包package1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#这个文件可以为空


__all__ = [&#39;module1&#39;, &#39;module2&#39;] #有这一句才能使用import *导入所有模块
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module1.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class1(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class1&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class1, self).__init__()


    def test(self):
        print &amp;quot;package1 -&amp;gt; module1.py -&amp;gt; Class1 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module1.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class1()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module2.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class2(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class1&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class2, self).__init__()


    def test(self):
        print &amp;quot;package1 -&amp;gt; module2.py -&amp;gt; Class2 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module2.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class2()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;包package2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;

__all__ = [&#39;module3&#39;, &#39;module4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module3.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class3(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class1&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class3, self).__init__()


    def test(self):
        print &amp;quot;package2 -&amp;gt; module3.py -&amp;gt; Class3 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module3.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class3()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module4.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class4(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class4&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class4, self).__init__()


    def test(self):
        print &amp;quot;package2 -&amp;gt; module4.py -&amp;gt; Class4 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module4.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class4()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行python test.py结果

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_module_test_result.png&#34; alt=&#34;导入模块测试结果.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python的一些小模块</title>
      <link>http://wyb0.com/posts/Python%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 19 Aug 2016 19:42:14 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%A8%A1%E5%9D%97/</guid>
      <description>

&lt;h3 id=&#34;0x00-colorama:790dd5e6005cf75dbef05cf9a3332221&#34;&gt;0x00 colorama&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;这个模块可以输出带有颜色的字符&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import colorama

colorama.init()

print &amp;quot;{f_color}{content}{g_color}&amp;quot;.format(f_color=colorama.Fore.CYAN,content=&#39;debug&#39;,g_color=colorama.Fore.RESET)
print &amp;quot;{f_color}{content}{g_color}&amp;quot;.format(f_color=colorama.Fore.YELLOW,content=&#39;warning&#39;,g_color=colorama.Fore.RESET)
print &amp;quot;{f_color}{content}{g_color}&amp;quot;.format(f_color=colorama.Fore.RED,content=&#39;error&#39;,g_color=colorama.Fore.RESET)
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_moudle_colorama.png&#34; alt=&#34;python的colorama模块&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-pyfiglet:790dd5e6005cf75dbef05cf9a3332221&#34;&gt;0x01 pyfiglet&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;可以输出字体的图片效果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pyfiglet import figlet_format

print figlet_format(&amp;quot;reber&amp;quot;, font=&amp;quot;xtty&amp;quot;) #font可以控制输出的类型
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_moudle_pyfiglet.png&#34; alt=&#34;python的pyfiglet模块&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-chardet:790dd5e6005cf75dbef05cf9a3332221&#34;&gt;0x02 chardet&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;这个模块可以用来判断你的字符串(除了Unicode类型)是什么类型的编码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import chardet
import requests

resp = requests.get(&amp;quot;https://tower.im/users/sign_in&amp;quot;)
html = resp.content

if not isinstance(html,unicode):
    code = chardet.detect(html)
    print code #输出当前的编码方式
    
    #解码为unicode，然后编码为gbk
    str1 = html.decode(code[&#39;encoding&#39;]).encode(&#39;gbk&#39;)
    print chardet.detect(str1)

    start = str1.find(&#39;&amp;lt;title&amp;gt;&#39;)
    stop = str1.find(&#39;&amp;lt;/title&#39;)
    print str1[start+7:stop]
else:
    print u&amp;quot;编码是unicode.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_moudle_chardet.png&#34; alt=&#34;python的chardet模块&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-tqdm:790dd5e6005cf75dbef05cf9a3332221&#34;&gt;0x03 tqdm&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;进度条&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tqdm import tqdm
import time

num = 233
for x in tqdm(xrange(1,num+1)):
    time.sleep(0.001)
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_moudle_tqdm.png&#34; alt=&#34;python的tqdm模块&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-xpinyin:790dd5e6005cf75dbef05cf9a3332221&#34;&gt;0x04 xpinyin&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;可以将汉字转化为拼音&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from xpinyin import Pinyin
&amp;gt;&amp;gt;&amp;gt; p = Pinyin()
&amp;gt;&amp;gt;&amp;gt; p.get_pinyin(u&#39;上海&#39;)
u&#39;shang-hai&#39;
&amp;gt;&amp;gt;&amp;gt; p.get_pinyin(u&#39;上海&#39;,&#39;&#39;)
u&#39;shanghai&#39;
&amp;gt;&amp;gt;&amp;gt; p.get_pinyin(u&#39;上海&#39;,&#39;:::&#39;)
u&#39;shang:::hai&#39;
&amp;gt;&amp;gt;&amp;gt; p.get_initials(u&#39;上海&#39;,&#39;&#39;)
u&#39;SH&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的optparse模块</title>
      <link>http://wyb0.com/posts/python-module-optparse/</link>
      <pubDate>Tue, 16 Aug 2016 15:10:44 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-optparse/</guid>
      <description>

&lt;h3 id=&#34;0x00-关于optparse模块:c5fb9f80fde40e87901813a227e12279&#34;&gt;0x00 关于optparse模块&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;python2.3之后添加的模块optparse是专门用来处理命令行选项的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import optparse

parser = optparse.OptionParser(usage=&#39;Usage: %prog [options] domaion&#39;,
                                version=&#39;%prog 1.2&#39;)
parser.add_option(&#39;-b&#39;, &#39;--bug&#39;, dest=&#39;isbug&#39;,
                    default=False, action=&#39;store_true&#39;,
                    help=&#39;Whether open the debug mode, default is false&#39;)
parser.add_option(&#39;-u&#39;, &#39;--url&#39;, dest=&#39;url&#39;,
                    default=None, action=&#39;store&#39;, type=&#39;string&#39;,
                    help=&#39;target url&#39;)
parser.add_option(&#39;-n&#39;,&#39;--number&#39;,
                    dest=&#39;num&#39;, default=10, type=&#39;int&#39;,
                    help=&#39;the number, default is 10&#39;)

(options, args) = parser.parse_args()

print options
print args
print options.url
# parser.print_help() # show help message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/parser_example.png&#34; alt=&#34;parser简单示例&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/parser_show_help_msg.png&#34; alt=&#34;显示帮助信息&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-说明:c5fb9f80fde40e87901813a227e12279&#34;&gt;0x01 说明&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在输出帮助信息时%prog会被脚本名代替
-b和--bug作用一样，一个是短标签一个是长标签
dest：它是存储变量值的变量名
default：默认的值
type：值的类型，默认为string，可以不用写
action：有3种类型
    默认action=&#39;store&#39;，可以不用写
    action=&#39;store_true&#39;使用参数时将布尔值true存储到dest指定的变量中
    action=&#39;store_false&#39;使用参数时将布尔值false存储到dest指定的变量中
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的scapy模块简单使用</title>
      <link>http://wyb0.com/posts/python-module-scapy/</link>
      <pubDate>Thu, 11 Aug 2016 23:26:39 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-scapy/</guid>
      <description>

&lt;h3 id=&#34;0x00-简单尝试:d4647a9c285d416dc3807f7ddc4e1729&#34;&gt;0x00 简单尝试&lt;/h3&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_establish_the_packet.png&#34; alt=&#34;尝试构造数据包&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-生成一组数据包:d4647a9c285d416dc3807f7ddc4e1729&#34;&gt;0x01 生成一组数据包&lt;/h3&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_create_a_set_of_packet.png&#34; alt=&#34;生成一组数据包&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-发送数据包:d4647a9c285d416dc3807f7ddc4e1729&#34;&gt;0x02 发送数据包&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;send发送数据包

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_send_send_packet.png&#34; alt=&#34;用send发送数据包&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;sr1发送数据包

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_sr1_send_packet.png&#34; alt=&#34;用sr1发送数据包&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;sr发送数据包

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_sr_send_packet.png&#34; alt=&#34;用sr1发送数据包&#34;&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;0x03-发送syn数据包:d4647a9c285d416dc3807f7ddc4e1729&#34;&gt;0x03 发送SYN数据包&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_sr1_send_syn_packet.png&#34; alt=&#34;用sr1发送syn数据包&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_sr_send_syn_packet.png&#34; alt=&#34;用sr发送syn数据包&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-得到tcp内容:d4647a9c285d416dc3807f7ddc4e1729&#34;&gt;0x04 得到TCP内容&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_get_tcp_content.png&#34; alt=&#34;得到tcp内容&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x05-syn-scans:d4647a9c285d416dc3807f7ddc4e1729&#34;&gt;0x05 SYN Scans&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/scapy_syn_scan.png&#34; alt=&#34;syn扫描&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的paramiko模块</title>
      <link>http://wyb0.com/posts/python-module-paramiko/</link>
      <pubDate>Thu, 14 Jul 2016 15:24:11 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-paramiko/</guid>
      <description>

&lt;h2 id=&#34;安装:7fa85122bf02ba123eab72294e954fb2&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;直接pip install paramiko安装&lt;br /&gt;
或者去&lt;a href=&#34;http://www.paramiko.org/&#34;&gt;http://www.paramiko.org/&lt;/a&gt; 下载&lt;/p&gt;

&lt;h2 id=&#34;执行一条远程命令:7fa85122bf02ba123eab72294e954fb2&#34;&gt;执行一条远程命令&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import paramiko

#远程执行命令
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(&amp;quot;192.168.188.134&amp;quot;,22,&amp;quot;reber&amp;quot;,&amp;quot;123456&amp;quot;)
ssh_session = ssh.get_transport().open_session()

stdin,stdout,stderr = ssh.exec_command(&amp;quot;ls -l&amp;quot;)
print stdin
print stdout.readlines()   #返回执行结果
print stderr.readlines()   #有错误信息就返回错误信息，没有就返回空

ssh.close()
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/paramiko_ssh_one_command.png&#34; alt=&#34;paramiko远程ssh后执行一条命令.png&#34;&gt;
&lt;/div&gt;


&lt;h2 id=&#34;上传与下载文件:7fa85122bf02ba123eab72294e954fb2&#34;&gt;上传与下载文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import paramiko
ftp = paramiko.Transport((&amp;quot;192.168.188.134&amp;quot;,22))
ftp.connect(username=&amp;quot;reber&amp;quot;,password=&amp;quot;123456&amp;quot;)
sftp = paramiko.SFTPClient.from_transport(ftp)

#将本地的文件上传到服务端的/tmp/a.txt
remotepath=&#39;/tmp/a.txt&#39;
localpath=&#39;C:\\Users\\WYB_9\\Desktop\\a.txt&#39;
sftp.put(localpath, remotepath)

#将服务端的文件下载到C:\\Users\\WYB_9\\Desktop\\system.log
remotepath=&#39;/tmp/a.txt&#39;
localpath=&#39;C:\\Users\\WYB_9\\Desktop\\system.log&#39;
sftp.get(remotepath, localpath)

ftp.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/paramiko_put_file.png&#34; alt=&#34;paramiko上传文件.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python的cmd模块</title>
      <link>http://wyb0.com/posts/python-module-cmd/</link>
      <pubDate>Thu, 14 Jul 2016 09:44:06 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-cmd/</guid>
      <description>

&lt;h2 id=&#34;关于cmd模块:0ae08eab8565c7b3105add7d60635093&#34;&gt;关于cmd模块&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;使用cmd模块创建的命令行解释器可以循环读取输入的所有行并且解析它们&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;cmd模块的一些常用方法:0ae08eab8565c7b3105add7d60635093&#34;&gt;cmd模块的一些常用方法：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;cmdloop()：类似与Tkinter的mainloop，运行Cmd解析器&lt;/li&gt;
&lt;li&gt;onecmd(str)：读取输入，并进行处理，通常不需要重载该函数，而是使用更加具体的do_command来执行特定的命名&lt;/li&gt;
&lt;li&gt;emptyline()：当输入空行时调用该方法&lt;/li&gt;
&lt;li&gt;default(line)：当无法识别输入的command时调用该方法&lt;/li&gt;
&lt;li&gt;completedefault(text,line,begidx,endidx):如果不存在针对的complete_*()方法，那么会调用该函数&lt;/li&gt;
&lt;li&gt;precmd(line)：命令line解析之前被调用该方法&lt;/li&gt;
&lt;li&gt;postcmd(stop，line)：命令line解析之后被调用该方法&lt;/li&gt;
&lt;li&gt;preloop()：cmdloop()运行之前调用该方法&lt;/li&gt;
&lt;li&gt;postloop()：cmdloop()退出之后调用该方法&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;用cmd模块简单实现shell命令:0ae08eab8565c7b3105add7d60635093&#34;&gt;用cmd模块简单实现shell命令&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sys
import os
import socket
from cmd import Cmd

class ClassShell(Cmd):
    &amp;quot;&amp;quot;&amp;quot;docstring for ClassShell&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        Cmd.__init__(self)
        os.chdir(&amp;quot;C:/Users/WYB_9/Desktop&amp;quot;)
        hostName = socket.gethostname()
        self.prompt = &amp;quot;reber@&amp;quot; + hostName + &amp;quot;  &amp;quot; + os.path.abspath(&#39;.&#39;) + &amp;quot;\n$ &amp;quot;
        

    def help_dir(self):
        print &amp;quot;dir [path]&amp;quot;
    def do_dir(self, arg):
        if not arg:
            print &amp;quot;\n&amp;quot;.join(os.listdir(&#39;.&#39;))
        elif os.path.exists(arg):
            print &amp;quot;\n&amp;quot;.join(os.listdir(arg))
        else:
            print &amp;quot;no such path exists&amp;quot;

    def help_ls(self):
        print &amp;quot;ls [path]&amp;quot;
    def do_ls(self, arg):
        if not arg:
            print &amp;quot;\n&amp;quot;.join(os.listdir(&#39;.&#39;))
        elif os.path.exists(arg):
            print &amp;quot;\n&amp;quot;.join(os.listdir(arg))
        else:
            print &amp;quot;no such path exists&amp;quot;

    def help_pwd(self):
        print &amp;quot;pwd&amp;quot;
    def do_pwd(self, arg):
        print os.path.abspath(&#39;.&#39;)

    def help_cd(self):
        print &amp;quot;cd [path]&amp;quot;
    def do_cd(self, arg):
        hostName = socket.gethostname()
        if not arg:
            os.chdir(&amp;quot;C:/Users/WYB_9/Desktop&amp;quot;)
            self.prompt = &amp;quot;reber@&amp;quot; + hostName + &amp;quot;  &amp;quot; + os.path.abspath(&#39;.&#39;) + &amp;quot;\n$ &amp;quot;
        elif os.path.exists(arg):
            os.chdir(arg)
            self.prompt = &amp;quot;reber@&amp;quot; + hostName + &amp;quot;  &amp;quot; + os.path.abspath(&#39;.&#39;) + &amp;quot;\n$ &amp;quot;
        else:
            print &amp;quot;no such path&amp;quot;

    def help_clear(self):
        print &amp;quot;clear&amp;quot;
    def do_clear(self, arg):
        i = os.system(&#39;cls&#39;)

    def help_cat(self):
        print &amp;quot;cat filename&amp;quot;
    def do_cat(self, arg):
        if os.path.exists(arg):
            with open(arg,&amp;quot;r&amp;quot;) as f:
                data = f.read()
            print data
        else:
            print &amp;quot;no such file exists&amp;quot;

    def help_mv(self):
        print &amp;quot;mv oldfilename newfilename&amp;quot;
    def do_mv(self, arg):
        oldfilename,newfilename = arg.split()
        if os.path.exists(oldfilename):
            os.rename(oldfilename,newfilename)
        else:
            print &amp;quot;no such file:&amp;quot; + oldfilename

    def help_touch(self):
        print &amp;quot;touch filename&amp;quot;
    def do_touch(self, arg):
        with open(arg, &amp;quot;w&amp;quot;) as f:
            pass

    def help_rm(self):
        print &amp;quot;rm filepath&amp;quot;
    def do_rm(self, arg):
        if os.path.exists(arg):
            os.remove(arg)
        else:
            print &amp;quot;no such file:&amp;quot; + arg
        
    def help_cp(self):
        print &amp;quot;cp oldfilepath newfilepath&amp;quot;
    def do_cp(self, arg):
        oldfilepath,newfilepath = arg.split()
        if os.path.exists(oldfilepath):
            with open(oldfilepath, &amp;quot;r&amp;quot;) as f:
                data = f.read()
            with open(newfilepath, &amp;quot;w&amp;quot;) as f:
                f.write(data)
        else:
            print &amp;quot;no such path:&amp;quot; + oldfilepath

    def help_exit(self):
        print &amp;quot;input exit will exit the program&amp;quot;

    def do_exit(self, arg):
        print &amp;quot;Exit:&amp;quot;,arg
        sys.exit()


if __name__ == &#39;__main__&#39;:
    shell = ClassShell()
    shell.cmdloop()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;程序执行结果如下:0ae08eab8565c7b3105add7d60635093&#34;&gt;程序执行结果如下&lt;/h2&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/cmd_results_sample.png&#34; alt=&#34;cmd简单实现shell运行结果.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的requests模块</title>
      <link>http://wyb0.com/posts/python-module-requests/</link>
      <pubDate>Sat, 02 Jul 2016 10:47:19 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-requests/</guid>
      <description>

&lt;h3 id=&#34;0x00-无参数的get请求:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x00 无参数的get请求&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;import requests

resp = requests.get(&#39;http://www.baidu.com&#39;,timeout=1) #设置超时，超时后抛出timeout错误
print resp.text #一般用来输出纯文本，可得到unicode类型字符串
print resp.content #一般用来输出pdf、图片等，可得到原网页设定类型的字符串
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/requests_text.png&#34; alt=&#34;requests得到html源码.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-有参数的get请求:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x01 有参数的get请求&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;import requests

url = &#39;http://10.10.10.10:8080/Lab2.0/Login.action&#39;
header = {
    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0&#39;,
}
payload = {&#39;aaa&#39;:&#39;1111&#39;,&#39;bbb&#39;:&#39;2222&#39;}
resp = requests.get(url,params=payload,headers=header)
print resp.url #得到url
print resp.status_code #得到返回的状态码
print resp.headers #得到html头
print resp.cookies #得到cookie
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/requests_get_params.png&#34; alt=&#34;有参数的get请求.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-post请求:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x02 POST请求&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;import requests
url1 = &#39;http://10.10.10.10:8080/Lab2.0/Login.action&#39;
url2 = &#39;http://10.10.10.10:8080/Lab2.0/student.action&#39;
payload = {
    &#39;userid&#39;:&#39;1315935xxx&#39;,
    &#39;password&#39;:&#39;xxxxxxx&#39;,
    &#39;quan&#39;:&#39;Student&#39;,
}
header = {
    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0&#39;,
    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,
}
# payload为字典时会变成表单形式，为字符串时会直接提交字符串
# 若payload为字典且用data=json.dumps(payload)则会变成json格式
resp = requests.post(url1,data=payload,headers=header)
cookie = resp.cookies #保存cookie
resp = requests.get(url2,cookies=cookie) #要加上cookie
print resp.text
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/requests_post.png&#34; alt=&#34;post登陆后带cookie访问页面.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-ssl证书:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x03 SSL证书&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests
url = &#39;https://www.aa.com&#39;
requests.get(url)   #出错，因为是https，验证了证书
requests.get(url,verify=False) #正常，因为忽略了证书验证
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-使用session:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x04 使用Session&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;import requests
url = &#39;http://10.10.10.10:8080/Lab2.0/Login.action&#39;
proxy = {
    &#39;http&#39;:&#39;http://127.0.0.1:8080&#39;
}
payload = {
    &#39;userid&#39;:&#39;13159xxxxx&#39;,
    &#39;password&#39;:&#39;xxxxxxx&#39;,
    &#39;quan&#39;:&#39;Student&#39;,
}
s = requests.Session() #此后请求时不用再声明cookie
resp = s.post(url,data=payload,proxies=proxy)
# 此时再次请求就不用使用cookie了
resp = s.get(&#39;http://10.10.10.10:8080/Lab2.0/student.action&#39;)
print resp.text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/requests_proxies.png&#34; alt=&#34;post登陆后带cookie访问页面.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/requests_post.png&#34; alt=&#34;post登陆后带cookie访问页面.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x05-上传与下载:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x05 上传与下载&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import requests

#会上传本地的aa.png，上传后的名字为bb.png

file = {&#39;myfile&#39;:(&#39;bb.png&#39;,open(&#39;/home/reber/aa.png&#39;,&#39;rb&#39;),&#39;img/jpeg&#39;)}
upload_url = &amp;quot;http://123.206.78.220/u.php&amp;quot;
requests.post(upload_url, files=file)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
#-*- coding:utf-8 -*-

import urllib
import requests

#下载不同类型的文件只要更改后缀即可

url = &#39;http://nginx.org/download/nginx-1.9.9.tar.gz&#39;

resp = requests.get(url)
#resp = requests.get(url,stream=True) #下载视频时要设置stream为True
with open(&amp;quot;a.tar.gz&amp;quot;,&amp;quot;wb&amp;quot;) as f:
    f.write(resp.content)

urllib.urlretrieve(url, &amp;quot;b.tar.gz&amp;quot;) #只能下载http的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x06-重定向:0ed0f578c1f6cf072915b92ae1a58a44&#34;&gt;0x06 重定向&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import requests
&amp;gt;&amp;gt;&amp;gt; r = requests.get(&#39;http://github.com&#39;) #默认跳转
&amp;gt;&amp;gt;&amp;gt; r.url
u&#39;https://github.com/&#39; #可以看到跳转到了https
&amp;gt;&amp;gt;&amp;gt; r.status_code #转跳后返回200代码
200
&amp;gt;&amp;gt;&amp;gt; r.history
[&amp;lt;Response [301]&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; r = requests.get(&#39;http://github.com&#39;,allow_redirects=False) #禁止跳转
&amp;gt;&amp;gt;&amp;gt; r.url
u&#39;http://github.com/&#39; #可以看到没有跳转，还是http
&amp;gt;&amp;gt;&amp;gt; r.status_code #没有转跳返回301代码
301
&amp;gt;&amp;gt;&amp;gt; r.history
[]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python的logging模块</title>
      <link>http://wyb0.com/posts/python-module-logging/</link>
      <pubDate>Sat, 25 Jun 2016 08:55:30 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/python-module-logging/</guid>
      <description>

&lt;h2 id=&#34;使用流程:57ef0aa36d2809ff6eb24f079980d275&#34;&gt;使用流程&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;创建一个logger&lt;/li&gt;
&lt;li&gt;创建一个handler，用于写入日志文件&lt;/li&gt;
&lt;li&gt;定义handler的输出格式&lt;/li&gt;
&lt;li&gt;将handler添加到logger&lt;/li&gt;
&lt;li&gt;记录日志&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;示例:57ef0aa36d2809ff6eb24f079980d275&#34;&gt;示例&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging

class MyLog(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for MyLog&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, logfile, loglevel, logger):
        super(MyLog, self).__init__()
        
        # 创建一个logger
        self.logger = logging.getLogger(logger)
        self.logger.setLevel(logging.DEBUG)

        # 创建一个用于写入日志文件的handler
        fh = logging.FileHandler(logfile)
        fh.setLevel(logging.DEBUG) # 只要是写入文件的等级都为DEBUG，也可以设置为loglevel
        formatterf = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)
        fh.setFormatter(formatterf)

        # 创建一个用于输出到控制台的handler
        ch = logging.StreamHandler()
        ch.setLevel(loglevel)
        formatterc = logging.Formatter(&#39;%(asctime)s - %(message)s&#39;)
        ch.setFormatter(formatterc)

        # 将handler添加到logger
        self.logger.addHandler(fh)
        self.logger.addHandler(ch)
    
    def debug(self,msg):
        self.logger.debug(msg)

    def info(self,msg):
        self.logger.info(msg)

    def warn(self,msg):
        self.logger.warn(msg)

    def error(self,msg):
        self.logger.error(msg)

    def critical(self,msg):
        self.logger.critical(msg)

# 等级为WARNING则只会输出级别大于WARNING的日志
# NOTSET &amp;lt; DEBUG &amp;lt; INFO &amp;lt; WARNING &amp;lt; ERROR &amp;lt; CRITICAL

logger = MyLog(logfile=&#39;log.txt&#39;, loglevel=&#39;INFO&#39;, logger=&#39;test&#39;)
logger.debug(&amp;quot;debug&amp;quot;)
logger.info(&amp;quot;info&amp;quot;)
logger.warn(&amp;quot;warn&amp;quot;)
logger.error(&amp;quot;error&amp;quot;)
logger.critical(&amp;quot;critical&amp;quot;)
print
logger = MyLog(logfile=&#39;log.txt&#39;, loglevel=&#39;ERROR&#39;, logger=&#39;mylog&#39;)
logger.debug(&amp;quot;debug&amp;quot;)
logger.info(&amp;quot;info&amp;quot;)
logger.warn(&amp;quot;warn&amp;quot;)
logger.error(&amp;quot;error&amp;quot;)
logger.critical(&amp;quot;critical&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;结果如下:57ef0aa36d2809ff6eb24f079980d275&#34;&gt;结果如下：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/logging_to_file.png&#34; alt=&#34;日志输出至文件.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/logging_to_cmdline.png&#34; alt=&#34;日志输出到命令行.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Python第三方模块的安装</title>
      <link>http://wyb0.com/posts/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 15 Jun 2016 13:08:00 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
      <description>

&lt;h2 id=&#34;第三方模块安装方法:5b6c170ceb8d6cbcf1ef1d02eaced839&#34;&gt;第三方模块安装方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;使用工具easy_install&lt;/li&gt;
&lt;li&gt;使用工具pip(easy_install的升级版，还不能完全取代)&lt;/li&gt;
&lt;li&gt;直接在&lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;https://pypi.python.org/pypi&lt;/a&gt; 下载安装&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使用easy-install安装:5b6c170ceb8d6cbcf1ef1d02eaced839&#34;&gt;使用easy_install安装&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在https://bootstrap.pypa.ip/ez_setup.py 下载安装脚本
然后执行python ez_setup.py即可安装easy_install

安装：easy_install PackageName
升级：easy_install -U PackageName
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;使用pip安装:5b6c170ceb8d6cbcf1ef1d02eaced839&#34;&gt;使用pip安装&lt;/h2&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;在https://bootstrap.pypa.io/get-pip.py 下载安装脚本
然后执行python get-pip.py即可安装pip

安装：pip install PackageName
升级：pip install --upgrade PackageName
删除：pip uninstall PackageName
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;网站下载安装包:5b6c170ceb8d6cbcf1ef1d02eaced839&#34;&gt;网站下载安装包&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;https://pypi.python.org/pypi&lt;/a&gt; 直接下载相应的exe或者py文件安装&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>