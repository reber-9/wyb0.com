<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>命令执行 on </title>
    <link>http://wyb0.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
    <description>Recent content in 命令执行 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 24 Jul 2016 14:32:51 +0800</lastBuildDate>
    
	<atom:link href="http://wyb0.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>命令执行漏洞</title>
      <link>http://wyb0.com/posts/command-execution-vulnerabilities/</link>
      <pubDate>Sun, 24 Jul 2016 14:32:51 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/command-execution-vulnerabilities/</guid>
      <description>0x00 命令执行  应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、 passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令 拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。   0x01 利用条件  应用调用执行系统命令的函数 将用户输入作为系统命令的参数拼接到了命令行中 没有对用户输入进行过滤或过滤不严  0x02 漏洞分类  代码层过滤不严
商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：
system(&amp;ldquo;/bin/program --arg $arg&amp;rdquo;); 系统的漏洞造成命令执行
bash破壳漏洞(CVE-2014-6271)
执行env x=&#39;() { :;}; echo vulnerable&#39; bash -c &amp;quot;echo this is a test&amp;quot;后
若输出vulnerable则证明存在漏洞 调用的第三方组件存在代码执行漏洞
如WordPress中用来处理图片的ImageMagick组件
JAVA中的命令执行漏洞(struts2/ElasticsearchGroovy等)
ThinkPHP命令执行  0x03 漏洞危害  继承Web服务程序的权限去执行系统命令或读写文件 反弹shell 控制整个网站甚至控制服务器 进一步内网渗透 等等  0x04 漏洞挖掘  可以google hacking
尝试：filetype:action或filetype:do来找struts2
 0x05 漏洞可能代码(以system为例)  1. system(&amp;quot;$arg&amp;quot;); //直接输入即可 2. system(&amp;quot;/bin/prog $arg&amp;quot;); //直接输入;ls 3.</description>
    </item>
    
  </channel>
</rss>