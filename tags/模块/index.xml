<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>模块 on </title>
    <link>http://wyb0.com/tags/%E6%A8%A1%E5%9D%97/</link>
    <description>Recent content in 模块 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 31 Aug 2016 11:22:41 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E6%A8%A1%E5%9D%97/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python的模块</title>
      <link>http://wyb0.com/posts/Python%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 31 Aug 2016 11:22:41 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/Python%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>

&lt;h2 id=&#34;python的模块:26b868add6f7b4d754432e2664208236&#34;&gt;Python的模块&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在python中，任何一个python文件都可以看作一个模块&lt;/li&gt;
&lt;li&gt;不同包下有相同模块名并不会冲突，且包下必须有文件__init__.py&lt;/li&gt;
&lt;li&gt;from lib import * 意思是从包lib中导入所有模块(若lib为模块名则为导入模块的所有函数)&lt;/li&gt;
&lt;li&gt;from lib.module1 import test 意思是从lib这个包下的module1模块中导入函数test&lt;/li&gt;
&lt;li&gt;import导入模块时会从sys.path输出的结果路径中查找模块然后导入&lt;/li&gt;
&lt;li&gt;sys.path.append(&amp;rsquo;D:/xx/xx/xx/code&amp;rsquo;)可以添加搜索路径&lt;/li&gt;
&lt;li&gt;使用if __name__ == &amp;lsquo;__main__&amp;lsquo;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;实例:26b868add6f7b4d754432e2664208236&#34;&gt;实例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件结构如下

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_module_file_tree.png&#34; alt=&#34;模块目录结构.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;测试文件test.py&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-

from package1 import * #导入包package1下的所有模块
import package2.module3 #导入包package2下的module3模块
import package2.module4 as s #导入包package2下的module4模块并重命名为s

a = module1.Class1() #创建一个对象
a.test() #调用类中的方法

b = module2.Class2()
b.test()

c = package2.module3.Class3()
c.test()

d = s.Class4()
d.test()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;包package1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#这个文件可以为空


__all__ = [&#39;module1&#39;, &#39;module2&#39;] #有这一句才能使用import *导入所有模块
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module1.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class1(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class1&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class1, self).__init__()


    def test(self):
        print &amp;quot;package1 -&amp;gt; module1.py -&amp;gt; Class1 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module1.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class1()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module2.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class2(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class1&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class2, self).__init__()


    def test(self):
        print &amp;quot;package1 -&amp;gt; module2.py -&amp;gt; Class2 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module2.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class2()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;包package2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;

__all__ = [&#39;module3&#39;, &#39;module4&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module3.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class3(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class1&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class3, self).__init__()


    def test(self):
        print &amp;quot;package2 -&amp;gt; module3.py -&amp;gt; Class3 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module3.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class3()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;module4.py&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-


&#39;this is test moudle&#39;


__author__ = &#39;reber&#39;


import sys


class Class4(object):
    &amp;quot;&amp;quot;&amp;quot;docstring for Class4&amp;quot;&amp;quot;&amp;quot;
    def __init__(self):
        super(Class4, self).__init__()


    def test(self):
        print &amp;quot;package2 -&amp;gt; module4.py -&amp;gt; Class4 -&amp;gt; test()&amp;quot;


    def main(self):
        print &amp;quot;this is module4.py main()&amp;quot;


if __name__ == &#39;__main__&#39;:
    sub11 = Class4()
    sub11.test()
    sub11.main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;执行python test.py结果

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/python_module_test_result.png&#34; alt=&#34;导入模块测试结果.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>